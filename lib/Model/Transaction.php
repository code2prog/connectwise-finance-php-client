<?php
/**
 * Transaction
 *
 * PHP version 5
 *
 * @category Class
 * @package  Spinen\ConnectWise\Clients\Finance
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Finance API
 *
 * ConnectWise Finance API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: platform@connectwise.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Spinen\ConnectWise\Clients\Finance\Model;

use \ArrayAccess;

/**
 * Transaction Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Spinen\ConnectWise\Clients\Finance
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Transaction implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Transaction';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'batch' => '\Spinen\ConnectWise\Clients\Finance\Model\BatchReference',
        'billing_log_id' => 'int',
        'invoice_number' => 'string',
        'type' => 'string',
        'description' => 'string',
        'cost' => 'double',
        'item' => 'string',
        'inventory' => 'string',
        'sales_code' => 'string',
        'cogs' => 'string',
        'gl_account' => 'string',
        'currency' => '\Spinen\ConnectWise\Clients\Finance\Model\CurrencyReference',
        'debit_amount' => 'double',
        'credit_amount' => 'double',
        'balance' => 'string',
        'product' => '\Spinen\ConnectWise\Clients\Finance\Model\ProductReference',
        'quantity' => 'double',
        'unit_of_measure' => '\Spinen\ConnectWise\Clients\Finance\Model\UnitOfMeasureReference',
        'serialized_flag' => 'bool',
        'serial_number' => 'string',
        'shipment_method' => '\Spinen\ConnectWise\Clients\Finance\Model\ShipmentMethodReference',
        'packing_slip' => 'string',
        'ticket' => '\Spinen\ConnectWise\Clients\Finance\Model\TicketReference',
        'project' => '\Spinen\ConnectWise\Clients\Finance\Model\ProjectReference',
        'phase' => '\Spinen\ConnectWise\Clients\Finance\Model\ProjectPhaseReference',
        'expense_class' => 'string',
        'expense_type' => '\Spinen\ConnectWise\Clients\Finance\Model\ExpenseTypeReference',
        'time_entry' => '\Spinen\ConnectWise\Clients\Finance\Model\TimeEntryReference',
        'activity' => '\Spinen\ConnectWise\Clients\Finance\Model\ActivityReference',
        'segment1' => 'string',
        'segment2' => 'string',
        'segment3' => 'string',
        'segment4' => 'string',
        'segment5' => 'string',
        'segment6' => 'string',
        'segment7' => 'string',
        'segment8' => 'string',
        'segment9' => 'string',
        'segment10' => 'string',
        'avalara_tax_flag' => 'bool',
        'item_taxable_flag' => 'bool',
        'tax_code' => '\Spinen\ConnectWise\Clients\Finance\Model\TaxCodeReference',
        'state_tax_flag' => 'bool',
        'state_tax_xref' => 'string',
        'state_tax_amount' => 'double',
        'county_tax_flag' => 'bool',
        'county_tax_xref' => 'string',
        'county_tax_amount' => 'double',
        'city_tax_flag' => 'bool',
        'city_tax_xref' => 'string',
        'city_tax_amount' => 'double',
        'country_tax_flag' => 'bool',
        'country_tax_xref' => 'string',
        'country_tax_amount' => 'double',
        'composite_tax_flag' => 'bool',
        'composite_tax_xref' => 'string',
        'composite_tax_amount' => 'double',
        'tax_total' => 'double',
        '_info' => '\Spinen\ConnectWise\Clients\Finance\Model\Metadata'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'batch' => 'batch',
        'billing_log_id' => 'billingLogId',
        'invoice_number' => 'invoiceNumber',
        'type' => 'type',
        'description' => 'description',
        'cost' => 'cost',
        'item' => 'item',
        'inventory' => 'inventory',
        'sales_code' => 'salesCode',
        'cogs' => 'cogs',
        'gl_account' => 'glAccount',
        'currency' => 'currency',
        'debit_amount' => 'debitAmount',
        'credit_amount' => 'creditAmount',
        'balance' => 'balance',
        'product' => 'product',
        'quantity' => 'quantity',
        'unit_of_measure' => 'unitOfMeasure',
        'serialized_flag' => 'serializedFlag',
        'serial_number' => 'serialNumber',
        'shipment_method' => 'shipmentMethod',
        'packing_slip' => 'packingSlip',
        'ticket' => 'ticket',
        'project' => 'project',
        'phase' => 'phase',
        'expense_class' => 'expenseClass',
        'expense_type' => 'expenseType',
        'time_entry' => 'timeEntry',
        'activity' => 'activity',
        'segment1' => 'segment1',
        'segment2' => 'segment2',
        'segment3' => 'segment3',
        'segment4' => 'segment4',
        'segment5' => 'segment5',
        'segment6' => 'segment6',
        'segment7' => 'segment7',
        'segment8' => 'segment8',
        'segment9' => 'segment9',
        'segment10' => 'segment10',
        'avalara_tax_flag' => 'avalaraTaxFlag',
        'item_taxable_flag' => 'itemTaxableFlag',
        'tax_code' => 'taxCode',
        'state_tax_flag' => 'stateTaxFlag',
        'state_tax_xref' => 'stateTaxXref',
        'state_tax_amount' => 'stateTaxAmount',
        'county_tax_flag' => 'countyTaxFlag',
        'county_tax_xref' => 'countyTaxXref',
        'county_tax_amount' => 'countyTaxAmount',
        'city_tax_flag' => 'cityTaxFlag',
        'city_tax_xref' => 'cityTaxXref',
        'city_tax_amount' => 'cityTaxAmount',
        'country_tax_flag' => 'countryTaxFlag',
        'country_tax_xref' => 'countryTaxXref',
        'country_tax_amount' => 'countryTaxAmount',
        'composite_tax_flag' => 'compositeTaxFlag',
        'composite_tax_xref' => 'compositeTaxXref',
        'composite_tax_amount' => 'compositeTaxAmount',
        'tax_total' => 'taxTotal',
        '_info' => '_info'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'batch' => 'setBatch',
        'billing_log_id' => 'setBillingLogId',
        'invoice_number' => 'setInvoiceNumber',
        'type' => 'setType',
        'description' => 'setDescription',
        'cost' => 'setCost',
        'item' => 'setItem',
        'inventory' => 'setInventory',
        'sales_code' => 'setSalesCode',
        'cogs' => 'setCogs',
        'gl_account' => 'setGlAccount',
        'currency' => 'setCurrency',
        'debit_amount' => 'setDebitAmount',
        'credit_amount' => 'setCreditAmount',
        'balance' => 'setBalance',
        'product' => 'setProduct',
        'quantity' => 'setQuantity',
        'unit_of_measure' => 'setUnitOfMeasure',
        'serialized_flag' => 'setSerializedFlag',
        'serial_number' => 'setSerialNumber',
        'shipment_method' => 'setShipmentMethod',
        'packing_slip' => 'setPackingSlip',
        'ticket' => 'setTicket',
        'project' => 'setProject',
        'phase' => 'setPhase',
        'expense_class' => 'setExpenseClass',
        'expense_type' => 'setExpenseType',
        'time_entry' => 'setTimeEntry',
        'activity' => 'setActivity',
        'segment1' => 'setSegment1',
        'segment2' => 'setSegment2',
        'segment3' => 'setSegment3',
        'segment4' => 'setSegment4',
        'segment5' => 'setSegment5',
        'segment6' => 'setSegment6',
        'segment7' => 'setSegment7',
        'segment8' => 'setSegment8',
        'segment9' => 'setSegment9',
        'segment10' => 'setSegment10',
        'avalara_tax_flag' => 'setAvalaraTaxFlag',
        'item_taxable_flag' => 'setItemTaxableFlag',
        'tax_code' => 'setTaxCode',
        'state_tax_flag' => 'setStateTaxFlag',
        'state_tax_xref' => 'setStateTaxXref',
        'state_tax_amount' => 'setStateTaxAmount',
        'county_tax_flag' => 'setCountyTaxFlag',
        'county_tax_xref' => 'setCountyTaxXref',
        'county_tax_amount' => 'setCountyTaxAmount',
        'city_tax_flag' => 'setCityTaxFlag',
        'city_tax_xref' => 'setCityTaxXref',
        'city_tax_amount' => 'setCityTaxAmount',
        'country_tax_flag' => 'setCountryTaxFlag',
        'country_tax_xref' => 'setCountryTaxXref',
        'country_tax_amount' => 'setCountryTaxAmount',
        'composite_tax_flag' => 'setCompositeTaxFlag',
        'composite_tax_xref' => 'setCompositeTaxXref',
        'composite_tax_amount' => 'setCompositeTaxAmount',
        'tax_total' => 'setTaxTotal',
        '_info' => 'setInfo'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'batch' => 'getBatch',
        'billing_log_id' => 'getBillingLogId',
        'invoice_number' => 'getInvoiceNumber',
        'type' => 'getType',
        'description' => 'getDescription',
        'cost' => 'getCost',
        'item' => 'getItem',
        'inventory' => 'getInventory',
        'sales_code' => 'getSalesCode',
        'cogs' => 'getCogs',
        'gl_account' => 'getGlAccount',
        'currency' => 'getCurrency',
        'debit_amount' => 'getDebitAmount',
        'credit_amount' => 'getCreditAmount',
        'balance' => 'getBalance',
        'product' => 'getProduct',
        'quantity' => 'getQuantity',
        'unit_of_measure' => 'getUnitOfMeasure',
        'serialized_flag' => 'getSerializedFlag',
        'serial_number' => 'getSerialNumber',
        'shipment_method' => 'getShipmentMethod',
        'packing_slip' => 'getPackingSlip',
        'ticket' => 'getTicket',
        'project' => 'getProject',
        'phase' => 'getPhase',
        'expense_class' => 'getExpenseClass',
        'expense_type' => 'getExpenseType',
        'time_entry' => 'getTimeEntry',
        'activity' => 'getActivity',
        'segment1' => 'getSegment1',
        'segment2' => 'getSegment2',
        'segment3' => 'getSegment3',
        'segment4' => 'getSegment4',
        'segment5' => 'getSegment5',
        'segment6' => 'getSegment6',
        'segment7' => 'getSegment7',
        'segment8' => 'getSegment8',
        'segment9' => 'getSegment9',
        'segment10' => 'getSegment10',
        'avalara_tax_flag' => 'getAvalaraTaxFlag',
        'item_taxable_flag' => 'getItemTaxableFlag',
        'tax_code' => 'getTaxCode',
        'state_tax_flag' => 'getStateTaxFlag',
        'state_tax_xref' => 'getStateTaxXref',
        'state_tax_amount' => 'getStateTaxAmount',
        'county_tax_flag' => 'getCountyTaxFlag',
        'county_tax_xref' => 'getCountyTaxXref',
        'county_tax_amount' => 'getCountyTaxAmount',
        'city_tax_flag' => 'getCityTaxFlag',
        'city_tax_xref' => 'getCityTaxXref',
        'city_tax_amount' => 'getCityTaxAmount',
        'country_tax_flag' => 'getCountryTaxFlag',
        'country_tax_xref' => 'getCountryTaxXref',
        'country_tax_amount' => 'getCountryTaxAmount',
        'composite_tax_flag' => 'getCompositeTaxFlag',
        'composite_tax_xref' => 'getCompositeTaxXref',
        'composite_tax_amount' => 'getCompositeTaxAmount',
        'tax_total' => 'getTaxTotal',
        '_info' => 'getInfo'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const TYPE_AP = 'AP';
    const TYPE_AR = 'AR';
    const TYPE_EE = 'EE';
    const TYPE_EI = 'EI';
    const TYPE_EO = 'EO';
    const TYPE_IA = 'IA';
    const TYPE_IT = 'IT';
    const TYPE_P = 'P';
    const TYPE_PF = 'PF';
    const TYPE_R = 'R';
    const TYPE_RA = 'RA';
    const TYPE_RD = 'RD';
    const TYPE_RE = 'RE';
    const TYPE_RP = 'RP';
    const TYPE_ST = 'ST';
    const TYPE_SD = 'SD';
    const TYPE_ET = 'ET';
    const TYPE_RM = 'RM';
    const TYPE_FT = 'FT';
    const TYPE_PT = 'PT';
    const EXPENSE_CLASS_NON_REIMBURSABLE = 'NonReimbursable';
    const EXPENSE_CLASS_REIMBURSABLE = 'Reimbursable';
    const EXPENSE_CLASS_PERSONAL = 'Personal';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_AP,
            self::TYPE_AR,
            self::TYPE_EE,
            self::TYPE_EI,
            self::TYPE_EO,
            self::TYPE_IA,
            self::TYPE_IT,
            self::TYPE_P,
            self::TYPE_PF,
            self::TYPE_R,
            self::TYPE_RA,
            self::TYPE_RD,
            self::TYPE_RE,
            self::TYPE_RP,
            self::TYPE_ST,
            self::TYPE_SD,
            self::TYPE_ET,
            self::TYPE_RM,
            self::TYPE_FT,
            self::TYPE_PT,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getExpenseClassAllowableValues()
    {
        return [
            self::EXPENSE_CLASS_NON_REIMBURSABLE,
            self::EXPENSE_CLASS_REIMBURSABLE,
            self::EXPENSE_CLASS_PERSONAL,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['batch'] = isset($data['batch']) ? $data['batch'] : null;
        $this->container['billing_log_id'] = isset($data['billing_log_id']) ? $data['billing_log_id'] : null;
        $this->container['invoice_number'] = isset($data['invoice_number']) ? $data['invoice_number'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['cost'] = isset($data['cost']) ? $data['cost'] : null;
        $this->container['item'] = isset($data['item']) ? $data['item'] : null;
        $this->container['inventory'] = isset($data['inventory']) ? $data['inventory'] : null;
        $this->container['sales_code'] = isset($data['sales_code']) ? $data['sales_code'] : null;
        $this->container['cogs'] = isset($data['cogs']) ? $data['cogs'] : null;
        $this->container['gl_account'] = isset($data['gl_account']) ? $data['gl_account'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['debit_amount'] = isset($data['debit_amount']) ? $data['debit_amount'] : null;
        $this->container['credit_amount'] = isset($data['credit_amount']) ? $data['credit_amount'] : null;
        $this->container['balance'] = isset($data['balance']) ? $data['balance'] : null;
        $this->container['product'] = isset($data['product']) ? $data['product'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['unit_of_measure'] = isset($data['unit_of_measure']) ? $data['unit_of_measure'] : null;
        $this->container['serialized_flag'] = isset($data['serialized_flag']) ? $data['serialized_flag'] : null;
        $this->container['serial_number'] = isset($data['serial_number']) ? $data['serial_number'] : null;
        $this->container['shipment_method'] = isset($data['shipment_method']) ? $data['shipment_method'] : null;
        $this->container['packing_slip'] = isset($data['packing_slip']) ? $data['packing_slip'] : null;
        $this->container['ticket'] = isset($data['ticket']) ? $data['ticket'] : null;
        $this->container['project'] = isset($data['project']) ? $data['project'] : null;
        $this->container['phase'] = isset($data['phase']) ? $data['phase'] : null;
        $this->container['expense_class'] = isset($data['expense_class']) ? $data['expense_class'] : null;
        $this->container['expense_type'] = isset($data['expense_type']) ? $data['expense_type'] : null;
        $this->container['time_entry'] = isset($data['time_entry']) ? $data['time_entry'] : null;
        $this->container['activity'] = isset($data['activity']) ? $data['activity'] : null;
        $this->container['segment1'] = isset($data['segment1']) ? $data['segment1'] : null;
        $this->container['segment2'] = isset($data['segment2']) ? $data['segment2'] : null;
        $this->container['segment3'] = isset($data['segment3']) ? $data['segment3'] : null;
        $this->container['segment4'] = isset($data['segment4']) ? $data['segment4'] : null;
        $this->container['segment5'] = isset($data['segment5']) ? $data['segment5'] : null;
        $this->container['segment6'] = isset($data['segment6']) ? $data['segment6'] : null;
        $this->container['segment7'] = isset($data['segment7']) ? $data['segment7'] : null;
        $this->container['segment8'] = isset($data['segment8']) ? $data['segment8'] : null;
        $this->container['segment9'] = isset($data['segment9']) ? $data['segment9'] : null;
        $this->container['segment10'] = isset($data['segment10']) ? $data['segment10'] : null;
        $this->container['avalara_tax_flag'] = isset($data['avalara_tax_flag']) ? $data['avalara_tax_flag'] : null;
        $this->container['item_taxable_flag'] = isset($data['item_taxable_flag']) ? $data['item_taxable_flag'] : null;
        $this->container['tax_code'] = isset($data['tax_code']) ? $data['tax_code'] : null;
        $this->container['state_tax_flag'] = isset($data['state_tax_flag']) ? $data['state_tax_flag'] : null;
        $this->container['state_tax_xref'] = isset($data['state_tax_xref']) ? $data['state_tax_xref'] : null;
        $this->container['state_tax_amount'] = isset($data['state_tax_amount']) ? $data['state_tax_amount'] : null;
        $this->container['county_tax_flag'] = isset($data['county_tax_flag']) ? $data['county_tax_flag'] : null;
        $this->container['county_tax_xref'] = isset($data['county_tax_xref']) ? $data['county_tax_xref'] : null;
        $this->container['county_tax_amount'] = isset($data['county_tax_amount']) ? $data['county_tax_amount'] : null;
        $this->container['city_tax_flag'] = isset($data['city_tax_flag']) ? $data['city_tax_flag'] : null;
        $this->container['city_tax_xref'] = isset($data['city_tax_xref']) ? $data['city_tax_xref'] : null;
        $this->container['city_tax_amount'] = isset($data['city_tax_amount']) ? $data['city_tax_amount'] : null;
        $this->container['country_tax_flag'] = isset($data['country_tax_flag']) ? $data['country_tax_flag'] : null;
        $this->container['country_tax_xref'] = isset($data['country_tax_xref']) ? $data['country_tax_xref'] : null;
        $this->container['country_tax_amount'] = isset($data['country_tax_amount']) ? $data['country_tax_amount'] : null;
        $this->container['composite_tax_flag'] = isset($data['composite_tax_flag']) ? $data['composite_tax_flag'] : null;
        $this->container['composite_tax_xref'] = isset($data['composite_tax_xref']) ? $data['composite_tax_xref'] : null;
        $this->container['composite_tax_amount'] = isset($data['composite_tax_amount']) ? $data['composite_tax_amount'] : null;
        $this->container['tax_total'] = isset($data['tax_total']) ? $data['tax_total'] : null;
        $this->container['_info'] = isset($data['_info']) ? $data['_info'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        $allowed_values = ["AP", "AR", "EE", "EI", "EO", "IA", "IT", "P", "PF", "R", "RA", "RD", "RE", "RP", "ST", "SD", "ET", "RM", "FT", "PT"];
        if (!in_array($this->container['type'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'type', must be one of #{allowed_values}.";
        }

        $allowed_values = ["NonReimbursable", "Reimbursable", "Personal"];
        if (!in_array($this->container['expense_class'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'expense_class', must be one of #{allowed_values}.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        $allowed_values = ["AP", "AR", "EE", "EI", "EO", "IA", "IT", "P", "PF", "R", "RA", "RD", "RE", "RP", "ST", "SD", "ET", "RM", "FT", "PT"];
        if (!in_array($this->container['type'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["NonReimbursable", "Reimbursable", "Personal"];
        if (!in_array($this->container['expense_class'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets batch
     * @return \Spinen\ConnectWise\Clients\Finance\Model\BatchReference
     */
    public function getBatch()
    {
        return $this->container['batch'];
    }

    /**
     * Sets batch
     * @param \Spinen\ConnectWise\Clients\Finance\Model\BatchReference $batch
     * @return $this
     */
    public function setBatch($batch)
    {
        $this->container['batch'] = $batch;

        return $this;
    }

    /**
     * Gets billing_log_id
     * @return int
     */
    public function getBillingLogId()
    {
        return $this->container['billing_log_id'];
    }

    /**
     * Sets billing_log_id
     * @param int $billing_log_id
     * @return $this
     */
    public function setBillingLogId($billing_log_id)
    {
        $this->container['billing_log_id'] = $billing_log_id;

        return $this;
    }

    /**
     * Gets invoice_number
     * @return string
     */
    public function getInvoiceNumber()
    {
        return $this->container['invoice_number'];
    }

    /**
     * Sets invoice_number
     * @param string $invoice_number
     * @return $this
     */
    public function setInvoiceNumber($invoice_number)
    {
        $this->container['invoice_number'] = $invoice_number;

        return $this;
    }

    /**
     * Gets type
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     * @param string $type
     * @return $this
     */
    public function setType($type)
    {
        $allowed_values = array('AP', 'AR', 'EE', 'EI', 'EO', 'IA', 'IT', 'P', 'PF', 'R', 'RA', 'RD', 'RE', 'RP', 'ST', 'SD', 'ET', 'RM', 'FT', 'PT');
        if (!is_null($type) && (!in_array($type, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'type', must be one of 'AP', 'AR', 'EE', 'EI', 'EO', 'IA', 'IT', 'P', 'PF', 'R', 'RA', 'RD', 'RE', 'RP', 'ST', 'SD', 'ET', 'RM', 'FT', 'PT'");
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     * @param string $description
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets cost
     * @return double
     */
    public function getCost()
    {
        return $this->container['cost'];
    }

    /**
     * Sets cost
     * @param double $cost
     * @return $this
     */
    public function setCost($cost)
    {
        $this->container['cost'] = $cost;

        return $this;
    }

    /**
     * Gets item
     * @return string
     */
    public function getItem()
    {
        return $this->container['item'];
    }

    /**
     * Sets item
     * @param string $item
     * @return $this
     */
    public function setItem($item)
    {
        $this->container['item'] = $item;

        return $this;
    }

    /**
     * Gets inventory
     * @return string
     */
    public function getInventory()
    {
        return $this->container['inventory'];
    }

    /**
     * Sets inventory
     * @param string $inventory
     * @return $this
     */
    public function setInventory($inventory)
    {
        $this->container['inventory'] = $inventory;

        return $this;
    }

    /**
     * Gets sales_code
     * @return string
     */
    public function getSalesCode()
    {
        return $this->container['sales_code'];
    }

    /**
     * Sets sales_code
     * @param string $sales_code
     * @return $this
     */
    public function setSalesCode($sales_code)
    {
        $this->container['sales_code'] = $sales_code;

        return $this;
    }

    /**
     * Gets cogs
     * @return string
     */
    public function getCogs()
    {
        return $this->container['cogs'];
    }

    /**
     * Sets cogs
     * @param string $cogs
     * @return $this
     */
    public function setCogs($cogs)
    {
        $this->container['cogs'] = $cogs;

        return $this;
    }

    /**
     * Gets gl_account
     * @return string
     */
    public function getGlAccount()
    {
        return $this->container['gl_account'];
    }

    /**
     * Sets gl_account
     * @param string $gl_account
     * @return $this
     */
    public function setGlAccount($gl_account)
    {
        $this->container['gl_account'] = $gl_account;

        return $this;
    }

    /**
     * Gets currency
     * @return \Spinen\ConnectWise\Clients\Finance\Model\CurrencyReference
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     * @param \Spinen\ConnectWise\Clients\Finance\Model\CurrencyReference $currency
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets debit_amount
     * @return double
     */
    public function getDebitAmount()
    {
        return $this->container['debit_amount'];
    }

    /**
     * Sets debit_amount
     * @param double $debit_amount
     * @return $this
     */
    public function setDebitAmount($debit_amount)
    {
        $this->container['debit_amount'] = $debit_amount;

        return $this;
    }

    /**
     * Gets credit_amount
     * @return double
     */
    public function getCreditAmount()
    {
        return $this->container['credit_amount'];
    }

    /**
     * Sets credit_amount
     * @param double $credit_amount
     * @return $this
     */
    public function setCreditAmount($credit_amount)
    {
        $this->container['credit_amount'] = $credit_amount;

        return $this;
    }

    /**
     * Gets balance
     * @return string
     */
    public function getBalance()
    {
        return $this->container['balance'];
    }

    /**
     * Sets balance
     * @param string $balance
     * @return $this
     */
    public function setBalance($balance)
    {
        $this->container['balance'] = $balance;

        return $this;
    }

    /**
     * Gets product
     * @return \Spinen\ConnectWise\Clients\Finance\Model\ProductReference
     */
    public function getProduct()
    {
        return $this->container['product'];
    }

    /**
     * Sets product
     * @param \Spinen\ConnectWise\Clients\Finance\Model\ProductReference $product
     * @return $this
     */
    public function setProduct($product)
    {
        $this->container['product'] = $product;

        return $this;
    }

    /**
     * Gets quantity
     * @return double
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     * @param double $quantity
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets unit_of_measure
     * @return \Spinen\ConnectWise\Clients\Finance\Model\UnitOfMeasureReference
     */
    public function getUnitOfMeasure()
    {
        return $this->container['unit_of_measure'];
    }

    /**
     * Sets unit_of_measure
     * @param \Spinen\ConnectWise\Clients\Finance\Model\UnitOfMeasureReference $unit_of_measure
     * @return $this
     */
    public function setUnitOfMeasure($unit_of_measure)
    {
        $this->container['unit_of_measure'] = $unit_of_measure;

        return $this;
    }

    /**
     * Gets serialized_flag
     * @return bool
     */
    public function getSerializedFlag()
    {
        return $this->container['serialized_flag'];
    }

    /**
     * Sets serialized_flag
     * @param bool $serialized_flag
     * @return $this
     */
    public function setSerializedFlag($serialized_flag)
    {
        $this->container['serialized_flag'] = $serialized_flag;

        return $this;
    }

    /**
     * Gets serial_number
     * @return string
     */
    public function getSerialNumber()
    {
        return $this->container['serial_number'];
    }

    /**
     * Sets serial_number
     * @param string $serial_number
     * @return $this
     */
    public function setSerialNumber($serial_number)
    {
        $this->container['serial_number'] = $serial_number;

        return $this;
    }

    /**
     * Gets shipment_method
     * @return \Spinen\ConnectWise\Clients\Finance\Model\ShipmentMethodReference
     */
    public function getShipmentMethod()
    {
        return $this->container['shipment_method'];
    }

    /**
     * Sets shipment_method
     * @param \Spinen\ConnectWise\Clients\Finance\Model\ShipmentMethodReference $shipment_method
     * @return $this
     */
    public function setShipmentMethod($shipment_method)
    {
        $this->container['shipment_method'] = $shipment_method;

        return $this;
    }

    /**
     * Gets packing_slip
     * @return string
     */
    public function getPackingSlip()
    {
        return $this->container['packing_slip'];
    }

    /**
     * Sets packing_slip
     * @param string $packing_slip
     * @return $this
     */
    public function setPackingSlip($packing_slip)
    {
        $this->container['packing_slip'] = $packing_slip;

        return $this;
    }

    /**
     * Gets ticket
     * @return \Spinen\ConnectWise\Clients\Finance\Model\TicketReference
     */
    public function getTicket()
    {
        return $this->container['ticket'];
    }

    /**
     * Sets ticket
     * @param \Spinen\ConnectWise\Clients\Finance\Model\TicketReference $ticket
     * @return $this
     */
    public function setTicket($ticket)
    {
        $this->container['ticket'] = $ticket;

        return $this;
    }

    /**
     * Gets project
     * @return \Spinen\ConnectWise\Clients\Finance\Model\ProjectReference
     */
    public function getProject()
    {
        return $this->container['project'];
    }

    /**
     * Sets project
     * @param \Spinen\ConnectWise\Clients\Finance\Model\ProjectReference $project
     * @return $this
     */
    public function setProject($project)
    {
        $this->container['project'] = $project;

        return $this;
    }

    /**
     * Gets phase
     * @return \Spinen\ConnectWise\Clients\Finance\Model\ProjectPhaseReference
     */
    public function getPhase()
    {
        return $this->container['phase'];
    }

    /**
     * Sets phase
     * @param \Spinen\ConnectWise\Clients\Finance\Model\ProjectPhaseReference $phase
     * @return $this
     */
    public function setPhase($phase)
    {
        $this->container['phase'] = $phase;

        return $this;
    }

    /**
     * Gets expense_class
     * @return string
     */
    public function getExpenseClass()
    {
        return $this->container['expense_class'];
    }

    /**
     * Sets expense_class
     * @param string $expense_class
     * @return $this
     */
    public function setExpenseClass($expense_class)
    {
        $allowed_values = array('NonReimbursable', 'Reimbursable', 'Personal');
        if (!is_null($expense_class) && (!in_array($expense_class, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'expense_class', must be one of 'NonReimbursable', 'Reimbursable', 'Personal'");
        }
        $this->container['expense_class'] = $expense_class;

        return $this;
    }

    /**
     * Gets expense_type
     * @return \Spinen\ConnectWise\Clients\Finance\Model\ExpenseTypeReference
     */
    public function getExpenseType()
    {
        return $this->container['expense_type'];
    }

    /**
     * Sets expense_type
     * @param \Spinen\ConnectWise\Clients\Finance\Model\ExpenseTypeReference $expense_type
     * @return $this
     */
    public function setExpenseType($expense_type)
    {
        $this->container['expense_type'] = $expense_type;

        return $this;
    }

    /**
     * Gets time_entry
     * @return \Spinen\ConnectWise\Clients\Finance\Model\TimeEntryReference
     */
    public function getTimeEntry()
    {
        return $this->container['time_entry'];
    }

    /**
     * Sets time_entry
     * @param \Spinen\ConnectWise\Clients\Finance\Model\TimeEntryReference $time_entry
     * @return $this
     */
    public function setTimeEntry($time_entry)
    {
        $this->container['time_entry'] = $time_entry;

        return $this;
    }

    /**
     * Gets activity
     * @return \Spinen\ConnectWise\Clients\Finance\Model\ActivityReference
     */
    public function getActivity()
    {
        return $this->container['activity'];
    }

    /**
     * Sets activity
     * @param \Spinen\ConnectWise\Clients\Finance\Model\ActivityReference $activity
     * @return $this
     */
    public function setActivity($activity)
    {
        $this->container['activity'] = $activity;

        return $this;
    }

    /**
     * Gets segment1
     * @return string
     */
    public function getSegment1()
    {
        return $this->container['segment1'];
    }

    /**
     * Sets segment1
     * @param string $segment1
     * @return $this
     */
    public function setSegment1($segment1)
    {
        $this->container['segment1'] = $segment1;

        return $this;
    }

    /**
     * Gets segment2
     * @return string
     */
    public function getSegment2()
    {
        return $this->container['segment2'];
    }

    /**
     * Sets segment2
     * @param string $segment2
     * @return $this
     */
    public function setSegment2($segment2)
    {
        $this->container['segment2'] = $segment2;

        return $this;
    }

    /**
     * Gets segment3
     * @return string
     */
    public function getSegment3()
    {
        return $this->container['segment3'];
    }

    /**
     * Sets segment3
     * @param string $segment3
     * @return $this
     */
    public function setSegment3($segment3)
    {
        $this->container['segment3'] = $segment3;

        return $this;
    }

    /**
     * Gets segment4
     * @return string
     */
    public function getSegment4()
    {
        return $this->container['segment4'];
    }

    /**
     * Sets segment4
     * @param string $segment4
     * @return $this
     */
    public function setSegment4($segment4)
    {
        $this->container['segment4'] = $segment4;

        return $this;
    }

    /**
     * Gets segment5
     * @return string
     */
    public function getSegment5()
    {
        return $this->container['segment5'];
    }

    /**
     * Sets segment5
     * @param string $segment5
     * @return $this
     */
    public function setSegment5($segment5)
    {
        $this->container['segment5'] = $segment5;

        return $this;
    }

    /**
     * Gets segment6
     * @return string
     */
    public function getSegment6()
    {
        return $this->container['segment6'];
    }

    /**
     * Sets segment6
     * @param string $segment6
     * @return $this
     */
    public function setSegment6($segment6)
    {
        $this->container['segment6'] = $segment6;

        return $this;
    }

    /**
     * Gets segment7
     * @return string
     */
    public function getSegment7()
    {
        return $this->container['segment7'];
    }

    /**
     * Sets segment7
     * @param string $segment7
     * @return $this
     */
    public function setSegment7($segment7)
    {
        $this->container['segment7'] = $segment7;

        return $this;
    }

    /**
     * Gets segment8
     * @return string
     */
    public function getSegment8()
    {
        return $this->container['segment8'];
    }

    /**
     * Sets segment8
     * @param string $segment8
     * @return $this
     */
    public function setSegment8($segment8)
    {
        $this->container['segment8'] = $segment8;

        return $this;
    }

    /**
     * Gets segment9
     * @return string
     */
    public function getSegment9()
    {
        return $this->container['segment9'];
    }

    /**
     * Sets segment9
     * @param string $segment9
     * @return $this
     */
    public function setSegment9($segment9)
    {
        $this->container['segment9'] = $segment9;

        return $this;
    }

    /**
     * Gets segment10
     * @return string
     */
    public function getSegment10()
    {
        return $this->container['segment10'];
    }

    /**
     * Sets segment10
     * @param string $segment10
     * @return $this
     */
    public function setSegment10($segment10)
    {
        $this->container['segment10'] = $segment10;

        return $this;
    }

    /**
     * Gets avalara_tax_flag
     * @return bool
     */
    public function getAvalaraTaxFlag()
    {
        return $this->container['avalara_tax_flag'];
    }

    /**
     * Sets avalara_tax_flag
     * @param bool $avalara_tax_flag Used to determine if Avalara tax is enabled.
     * @return $this
     */
    public function setAvalaraTaxFlag($avalara_tax_flag)
    {
        $this->container['avalara_tax_flag'] = $avalara_tax_flag;

        return $this;
    }

    /**
     * Gets item_taxable_flag
     * @return bool
     */
    public function getItemTaxableFlag()
    {
        return $this->container['item_taxable_flag'];
    }

    /**
     * Sets item_taxable_flag
     * @param bool $item_taxable_flag
     * @return $this
     */
    public function setItemTaxableFlag($item_taxable_flag)
    {
        $this->container['item_taxable_flag'] = $item_taxable_flag;

        return $this;
    }

    /**
     * Gets tax_code
     * @return \Spinen\ConnectWise\Clients\Finance\Model\TaxCodeReference
     */
    public function getTaxCode()
    {
        return $this->container['tax_code'];
    }

    /**
     * Sets tax_code
     * @param \Spinen\ConnectWise\Clients\Finance\Model\TaxCodeReference $tax_code
     * @return $this
     */
    public function setTaxCode($tax_code)
    {
        $this->container['tax_code'] = $tax_code;

        return $this;
    }

    /**
     * Gets state_tax_flag
     * @return bool
     */
    public function getStateTaxFlag()
    {
        return $this->container['state_tax_flag'];
    }

    /**
     * Sets state_tax_flag
     * @param bool $state_tax_flag Set to true if transaction is taxable at the state level.
     * @return $this
     */
    public function setStateTaxFlag($state_tax_flag)
    {
        $this->container['state_tax_flag'] = $state_tax_flag;

        return $this;
    }

    /**
     * Gets state_tax_xref
     * @return string
     */
    public function getStateTaxXref()
    {
        return $this->container['state_tax_xref'];
    }

    /**
     * Sets state_tax_xref
     * @param string $state_tax_xref
     * @return $this
     */
    public function setStateTaxXref($state_tax_xref)
    {
        $this->container['state_tax_xref'] = $state_tax_xref;

        return $this;
    }

    /**
     * Gets state_tax_amount
     * @return double
     */
    public function getStateTaxAmount()
    {
        return $this->container['state_tax_amount'];
    }

    /**
     * Sets state_tax_amount
     * @param double $state_tax_amount
     * @return $this
     */
    public function setStateTaxAmount($state_tax_amount)
    {
        $this->container['state_tax_amount'] = $state_tax_amount;

        return $this;
    }

    /**
     * Gets county_tax_flag
     * @return bool
     */
    public function getCountyTaxFlag()
    {
        return $this->container['county_tax_flag'];
    }

    /**
     * Sets county_tax_flag
     * @param bool $county_tax_flag Set to true if transaction is taxable at the county level.
     * @return $this
     */
    public function setCountyTaxFlag($county_tax_flag)
    {
        $this->container['county_tax_flag'] = $county_tax_flag;

        return $this;
    }

    /**
     * Gets county_tax_xref
     * @return string
     */
    public function getCountyTaxXref()
    {
        return $this->container['county_tax_xref'];
    }

    /**
     * Sets county_tax_xref
     * @param string $county_tax_xref
     * @return $this
     */
    public function setCountyTaxXref($county_tax_xref)
    {
        $this->container['county_tax_xref'] = $county_tax_xref;

        return $this;
    }

    /**
     * Gets county_tax_amount
     * @return double
     */
    public function getCountyTaxAmount()
    {
        return $this->container['county_tax_amount'];
    }

    /**
     * Sets county_tax_amount
     * @param double $county_tax_amount
     * @return $this
     */
    public function setCountyTaxAmount($county_tax_amount)
    {
        $this->container['county_tax_amount'] = $county_tax_amount;

        return $this;
    }

    /**
     * Gets city_tax_flag
     * @return bool
     */
    public function getCityTaxFlag()
    {
        return $this->container['city_tax_flag'];
    }

    /**
     * Sets city_tax_flag
     * @param bool $city_tax_flag Set to true if transaction is taxable at the city level.
     * @return $this
     */
    public function setCityTaxFlag($city_tax_flag)
    {
        $this->container['city_tax_flag'] = $city_tax_flag;

        return $this;
    }

    /**
     * Gets city_tax_xref
     * @return string
     */
    public function getCityTaxXref()
    {
        return $this->container['city_tax_xref'];
    }

    /**
     * Sets city_tax_xref
     * @param string $city_tax_xref
     * @return $this
     */
    public function setCityTaxXref($city_tax_xref)
    {
        $this->container['city_tax_xref'] = $city_tax_xref;

        return $this;
    }

    /**
     * Gets city_tax_amount
     * @return double
     */
    public function getCityTaxAmount()
    {
        return $this->container['city_tax_amount'];
    }

    /**
     * Sets city_tax_amount
     * @param double $city_tax_amount
     * @return $this
     */
    public function setCityTaxAmount($city_tax_amount)
    {
        $this->container['city_tax_amount'] = $city_tax_amount;

        return $this;
    }

    /**
     * Gets country_tax_flag
     * @return bool
     */
    public function getCountryTaxFlag()
    {
        return $this->container['country_tax_flag'];
    }

    /**
     * Sets country_tax_flag
     * @param bool $country_tax_flag Set to true if transaction is taxable at the country level.
     * @return $this
     */
    public function setCountryTaxFlag($country_tax_flag)
    {
        $this->container['country_tax_flag'] = $country_tax_flag;

        return $this;
    }

    /**
     * Gets country_tax_xref
     * @return string
     */
    public function getCountryTaxXref()
    {
        return $this->container['country_tax_xref'];
    }

    /**
     * Sets country_tax_xref
     * @param string $country_tax_xref
     * @return $this
     */
    public function setCountryTaxXref($country_tax_xref)
    {
        $this->container['country_tax_xref'] = $country_tax_xref;

        return $this;
    }

    /**
     * Gets country_tax_amount
     * @return double
     */
    public function getCountryTaxAmount()
    {
        return $this->container['country_tax_amount'];
    }

    /**
     * Sets country_tax_amount
     * @param double $country_tax_amount
     * @return $this
     */
    public function setCountryTaxAmount($country_tax_amount)
    {
        $this->container['country_tax_amount'] = $country_tax_amount;

        return $this;
    }

    /**
     * Gets composite_tax_flag
     * @return bool
     */
    public function getCompositeTaxFlag()
    {
        return $this->container['composite_tax_flag'];
    }

    /**
     * Sets composite_tax_flag
     * @param bool $composite_tax_flag Set to true if transaction is taxable at the composite level.
     * @return $this
     */
    public function setCompositeTaxFlag($composite_tax_flag)
    {
        $this->container['composite_tax_flag'] = $composite_tax_flag;

        return $this;
    }

    /**
     * Gets composite_tax_xref
     * @return string
     */
    public function getCompositeTaxXref()
    {
        return $this->container['composite_tax_xref'];
    }

    /**
     * Sets composite_tax_xref
     * @param string $composite_tax_xref
     * @return $this
     */
    public function setCompositeTaxXref($composite_tax_xref)
    {
        $this->container['composite_tax_xref'] = $composite_tax_xref;

        return $this;
    }

    /**
     * Gets composite_tax_amount
     * @return double
     */
    public function getCompositeTaxAmount()
    {
        return $this->container['composite_tax_amount'];
    }

    /**
     * Sets composite_tax_amount
     * @param double $composite_tax_amount
     * @return $this
     */
    public function setCompositeTaxAmount($composite_tax_amount)
    {
        $this->container['composite_tax_amount'] = $composite_tax_amount;

        return $this;
    }

    /**
     * Gets tax_total
     * @return double
     */
    public function getTaxTotal()
    {
        return $this->container['tax_total'];
    }

    /**
     * Sets tax_total
     * @param double $tax_total
     * @return $this
     */
    public function setTaxTotal($tax_total)
    {
        $this->container['tax_total'] = $tax_total;

        return $this;
    }

    /**
     * Gets _info
     * @return \Spinen\ConnectWise\Clients\Finance\Model\Metadata
     */
    public function getInfo()
    {
        return $this->container['_info'];
    }

    /**
     * Sets _info
     * @param \Spinen\ConnectWise\Clients\Finance\Model\Metadata $_info Metadata of the entity
     * @return $this
     */
    public function setInfo($_info)
    {
        $this->container['_info'] = $_info;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Spinen\ConnectWise\Clients\Finance\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Spinen\ConnectWise\Clients\Finance\ObjectSerializer::sanitizeForSerialization($this));
    }
}


