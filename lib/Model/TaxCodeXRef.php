<?php
/**
 * TaxCodeXRef
 *
 * PHP version 5
 *
 * @category Class
 * @package  Spinen\ConnectWise\Clients\Finance
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Finance API
 *
 * ConnectWise Finance API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: platform@connectwise.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Spinen\ConnectWise\Clients\Finance\Model;

use \ArrayAccess;

/**
 * TaxCodeXRef Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Spinen\ConnectWise\Clients\Finance
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class TaxCodeXRef implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'TaxCodeXRef';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'description' => 'string',
        'default_flag' => 'bool',
        'level_one' => 'string',
        'level_two' => 'string',
        'level_three' => 'string',
        'level_four' => 'string',
        'level_five' => 'string',
        'tax_code' => '\Spinen\ConnectWise\Clients\Finance\Model\TaxCodeReference',
        '_info' => '\Spinen\ConnectWise\Clients\Finance\Model\Metadata'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'description' => 'description',
        'default_flag' => 'defaultFlag',
        'level_one' => 'levelOne',
        'level_two' => 'levelTwo',
        'level_three' => 'levelThree',
        'level_four' => 'levelFour',
        'level_five' => 'levelFive',
        'tax_code' => 'taxCode',
        '_info' => '_info'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'description' => 'setDescription',
        'default_flag' => 'setDefaultFlag',
        'level_one' => 'setLevelOne',
        'level_two' => 'setLevelTwo',
        'level_three' => 'setLevelThree',
        'level_four' => 'setLevelFour',
        'level_five' => 'setLevelFive',
        'tax_code' => 'setTaxCode',
        '_info' => 'setInfo'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'description' => 'getDescription',
        'default_flag' => 'getDefaultFlag',
        'level_one' => 'getLevelOne',
        'level_two' => 'getLevelTwo',
        'level_three' => 'getLevelThree',
        'level_four' => 'getLevelFour',
        'level_five' => 'getLevelFive',
        'tax_code' => 'getTaxCode',
        '_info' => 'getInfo'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const LEVEL_ONE_NON_TAXABLE = 'NonTaxable';
    const LEVEL_ONE_TAXABLE = 'Taxable';
    const LEVEL_TWO_NON_TAXABLE = 'NonTaxable';
    const LEVEL_TWO_TAXABLE = 'Taxable';
    const LEVEL_THREE_NON_TAXABLE = 'NonTaxable';
    const LEVEL_THREE_TAXABLE = 'Taxable';
    const LEVEL_FOUR_NON_TAXABLE = 'NonTaxable';
    const LEVEL_FOUR_TAXABLE = 'Taxable';
    const LEVEL_FIVE_NON_TAXABLE = 'NonTaxable';
    const LEVEL_FIVE_TAXABLE = 'Taxable';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getLevelOneAllowableValues()
    {
        return [
            self::LEVEL_ONE_NON_TAXABLE,
            self::LEVEL_ONE_TAXABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getLevelTwoAllowableValues()
    {
        return [
            self::LEVEL_TWO_NON_TAXABLE,
            self::LEVEL_TWO_TAXABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getLevelThreeAllowableValues()
    {
        return [
            self::LEVEL_THREE_NON_TAXABLE,
            self::LEVEL_THREE_TAXABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getLevelFourAllowableValues()
    {
        return [
            self::LEVEL_FOUR_NON_TAXABLE,
            self::LEVEL_FOUR_TAXABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getLevelFiveAllowableValues()
    {
        return [
            self::LEVEL_FIVE_NON_TAXABLE,
            self::LEVEL_FIVE_TAXABLE,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['default_flag'] = isset($data['default_flag']) ? $data['default_flag'] : null;
        $this->container['level_one'] = isset($data['level_one']) ? $data['level_one'] : null;
        $this->container['level_two'] = isset($data['level_two']) ? $data['level_two'] : null;
        $this->container['level_three'] = isset($data['level_three']) ? $data['level_three'] : null;
        $this->container['level_four'] = isset($data['level_four']) ? $data['level_four'] : null;
        $this->container['level_five'] = isset($data['level_five']) ? $data['level_five'] : null;
        $this->container['tax_code'] = isset($data['tax_code']) ? $data['tax_code'] : null;
        $this->container['_info'] = isset($data['_info']) ? $data['_info'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if ($this->container['description'] === null) {
            $invalid_properties[] = "'description' can't be null";
        }
        if ((strlen($this->container['description']) > 50)) {
            $invalid_properties[] = "invalid value for 'description', the character length must be smaller than or equal to 50.";
        }

        $allowed_values = ["NonTaxable", "Taxable"];
        if (!in_array($this->container['level_one'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'level_one', must be one of #{allowed_values}.";
        }

        $allowed_values = ["NonTaxable", "Taxable"];
        if (!in_array($this->container['level_two'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'level_two', must be one of #{allowed_values}.";
        }

        $allowed_values = ["NonTaxable", "Taxable"];
        if (!in_array($this->container['level_three'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'level_three', must be one of #{allowed_values}.";
        }

        $allowed_values = ["NonTaxable", "Taxable"];
        if (!in_array($this->container['level_four'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'level_four', must be one of #{allowed_values}.";
        }

        $allowed_values = ["NonTaxable", "Taxable"];
        if (!in_array($this->container['level_five'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'level_five', must be one of #{allowed_values}.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['description'] === null) {
            return false;
        }
        if (strlen($this->container['description']) > 50) {
            return false;
        }
        $allowed_values = ["NonTaxable", "Taxable"];
        if (!in_array($this->container['level_one'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["NonTaxable", "Taxable"];
        if (!in_array($this->container['level_two'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["NonTaxable", "Taxable"];
        if (!in_array($this->container['level_three'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["NonTaxable", "Taxable"];
        if (!in_array($this->container['level_four'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["NonTaxable", "Taxable"];
        if (!in_array($this->container['level_five'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     * @param string $description
     * @return $this
     */
    public function setDescription($description)
    {
        if ((strlen($description) > 50)) {
            throw new \InvalidArgumentException('invalid length for $description when calling TaxCodeXRef., must be smaller than or equal to 50.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets default_flag
     * @return bool
     */
    public function getDefaultFlag()
    {
        return $this->container['default_flag'];
    }

    /**
     * Sets default_flag
     * @param bool $default_flag
     * @return $this
     */
    public function setDefaultFlag($default_flag)
    {
        $this->container['default_flag'] = $default_flag;

        return $this;
    }

    /**
     * Gets level_one
     * @return string
     */
    public function getLevelOne()
    {
        return $this->container['level_one'];
    }

    /**
     * Sets level_one
     * @param string $level_one
     * @return $this
     */
    public function setLevelOne($level_one)
    {
        $allowed_values = array('NonTaxable', 'Taxable');
        if (!is_null($level_one) && (!in_array($level_one, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'level_one', must be one of 'NonTaxable', 'Taxable'");
        }
        $this->container['level_one'] = $level_one;

        return $this;
    }

    /**
     * Gets level_two
     * @return string
     */
    public function getLevelTwo()
    {
        return $this->container['level_two'];
    }

    /**
     * Sets level_two
     * @param string $level_two
     * @return $this
     */
    public function setLevelTwo($level_two)
    {
        $allowed_values = array('NonTaxable', 'Taxable');
        if (!is_null($level_two) && (!in_array($level_two, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'level_two', must be one of 'NonTaxable', 'Taxable'");
        }
        $this->container['level_two'] = $level_two;

        return $this;
    }

    /**
     * Gets level_three
     * @return string
     */
    public function getLevelThree()
    {
        return $this->container['level_three'];
    }

    /**
     * Sets level_three
     * @param string $level_three
     * @return $this
     */
    public function setLevelThree($level_three)
    {
        $allowed_values = array('NonTaxable', 'Taxable');
        if (!is_null($level_three) && (!in_array($level_three, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'level_three', must be one of 'NonTaxable', 'Taxable'");
        }
        $this->container['level_three'] = $level_three;

        return $this;
    }

    /**
     * Gets level_four
     * @return string
     */
    public function getLevelFour()
    {
        return $this->container['level_four'];
    }

    /**
     * Sets level_four
     * @param string $level_four
     * @return $this
     */
    public function setLevelFour($level_four)
    {
        $allowed_values = array('NonTaxable', 'Taxable');
        if (!is_null($level_four) && (!in_array($level_four, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'level_four', must be one of 'NonTaxable', 'Taxable'");
        }
        $this->container['level_four'] = $level_four;

        return $this;
    }

    /**
     * Gets level_five
     * @return string
     */
    public function getLevelFive()
    {
        return $this->container['level_five'];
    }

    /**
     * Sets level_five
     * @param string $level_five
     * @return $this
     */
    public function setLevelFive($level_five)
    {
        $allowed_values = array('NonTaxable', 'Taxable');
        if (!is_null($level_five) && (!in_array($level_five, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'level_five', must be one of 'NonTaxable', 'Taxable'");
        }
        $this->container['level_five'] = $level_five;

        return $this;
    }

    /**
     * Gets tax_code
     * @return \Spinen\ConnectWise\Clients\Finance\Model\TaxCodeReference
     */
    public function getTaxCode()
    {
        return $this->container['tax_code'];
    }

    /**
     * Sets tax_code
     * @param \Spinen\ConnectWise\Clients\Finance\Model\TaxCodeReference $tax_code
     * @return $this
     */
    public function setTaxCode($tax_code)
    {
        $this->container['tax_code'] = $tax_code;

        return $this;
    }

    /**
     * Gets _info
     * @return \Spinen\ConnectWise\Clients\Finance\Model\Metadata
     */
    public function getInfo()
    {
        return $this->container['_info'];
    }

    /**
     * Sets _info
     * @param \Spinen\ConnectWise\Clients\Finance\Model\Metadata $_info Metadata of the entity
     * @return $this
     */
    public function setInfo($_info)
    {
        $this->container['_info'] = $_info;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Spinen\ConnectWise\Clients\Finance\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Spinen\ConnectWise\Clients\Finance\ObjectSerializer::sanitizeForSerialization($this));
    }
}


