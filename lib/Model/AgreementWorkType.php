<?php
/**
 * AgreementWorkType
 *
 * PHP version 5
 *
 * @category Class
 * @package  Spinen\ConnectWise\Clients\Finance
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Finance API
 *
 * ConnectWise Finance API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: platform@connectwise.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Spinen\ConnectWise\Clients\Finance\Model;

use \ArrayAccess;

/**
 * AgreementWorkType Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Spinen\ConnectWise\Clients\Finance
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class AgreementWorkType implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'AgreementWorkType';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'work_type' => '\Spinen\ConnectWise\Clients\Finance\Model\WorkTypeReference',
        'location_id' => 'int',
        'rate_type' => 'string',
        'bill_time' => 'string',
        'rate' => 'double',
        'hours_max' => 'double',
        'hours_min' => 'double',
        'round_bill_hours' => 'double',
        'overage_rate' => 'double',
        'overage_rate_type' => 'string',
        'agreement_limit' => 'double',
        'site' => '\Spinen\ConnectWise\Clients\Finance\Model\SiteReference',
        'effective_date' => '\DateTime',
        'ending_date' => '\DateTime',
        'agreement_id' => 'int',
        'company' => '\Spinen\ConnectWise\Clients\Finance\Model\CompanyReference',
        '_info' => '\Spinen\ConnectWise\Clients\Finance\Model\Metadata'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'work_type' => 'workType',
        'location_id' => 'locationId',
        'rate_type' => 'rateType',
        'bill_time' => 'billTime',
        'rate' => 'rate',
        'hours_max' => 'hoursMax',
        'hours_min' => 'hoursMin',
        'round_bill_hours' => 'roundBillHours',
        'overage_rate' => 'overageRate',
        'overage_rate_type' => 'overageRateType',
        'agreement_limit' => 'agreementLimit',
        'site' => 'site',
        'effective_date' => 'effectiveDate',
        'ending_date' => 'endingDate',
        'agreement_id' => 'agreementId',
        'company' => 'company',
        '_info' => '_info'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'work_type' => 'setWorkType',
        'location_id' => 'setLocationId',
        'rate_type' => 'setRateType',
        'bill_time' => 'setBillTime',
        'rate' => 'setRate',
        'hours_max' => 'setHoursMax',
        'hours_min' => 'setHoursMin',
        'round_bill_hours' => 'setRoundBillHours',
        'overage_rate' => 'setOverageRate',
        'overage_rate_type' => 'setOverageRateType',
        'agreement_limit' => 'setAgreementLimit',
        'site' => 'setSite',
        'effective_date' => 'setEffectiveDate',
        'ending_date' => 'setEndingDate',
        'agreement_id' => 'setAgreementId',
        'company' => 'setCompany',
        '_info' => 'setInfo'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'work_type' => 'getWorkType',
        'location_id' => 'getLocationId',
        'rate_type' => 'getRateType',
        'bill_time' => 'getBillTime',
        'rate' => 'getRate',
        'hours_max' => 'getHoursMax',
        'hours_min' => 'getHoursMin',
        'round_bill_hours' => 'getRoundBillHours',
        'overage_rate' => 'getOverageRate',
        'overage_rate_type' => 'getOverageRateType',
        'agreement_limit' => 'getAgreementLimit',
        'site' => 'getSite',
        'effective_date' => 'getEffectiveDate',
        'ending_date' => 'getEndingDate',
        'agreement_id' => 'getAgreementId',
        'company' => 'getCompany',
        '_info' => 'getInfo'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const RATE_TYPE_ADJ_AMOUNT = 'AdjAmount';
    const RATE_TYPE_CUSTOM = 'Custom';
    const RATE_TYPE_MULTIPLIER = 'Multiplier';
    const BILL_TIME_BILLABLE = 'Billable';
    const BILL_TIME_DO_NOT_BILL = 'DoNotBill';
    const BILL_TIME_NO_CHARGE = 'NoCharge';
    const BILL_TIME_NO_DEFAULT = 'NoDefault';
    const OVERAGE_RATE_TYPE_ADJ_AMOUNT = 'AdjAmount';
    const OVERAGE_RATE_TYPE_CUSTOM = 'Custom';
    const OVERAGE_RATE_TYPE_MULTIPLIER = 'Multiplier';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getRateTypeAllowableValues()
    {
        return [
            self::RATE_TYPE_ADJ_AMOUNT,
            self::RATE_TYPE_CUSTOM,
            self::RATE_TYPE_MULTIPLIER,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getBillTimeAllowableValues()
    {
        return [
            self::BILL_TIME_BILLABLE,
            self::BILL_TIME_DO_NOT_BILL,
            self::BILL_TIME_NO_CHARGE,
            self::BILL_TIME_NO_DEFAULT,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getOverageRateTypeAllowableValues()
    {
        return [
            self::OVERAGE_RATE_TYPE_ADJ_AMOUNT,
            self::OVERAGE_RATE_TYPE_CUSTOM,
            self::OVERAGE_RATE_TYPE_MULTIPLIER,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['work_type'] = isset($data['work_type']) ? $data['work_type'] : null;
        $this->container['location_id'] = isset($data['location_id']) ? $data['location_id'] : null;
        $this->container['rate_type'] = isset($data['rate_type']) ? $data['rate_type'] : null;
        $this->container['bill_time'] = isset($data['bill_time']) ? $data['bill_time'] : null;
        $this->container['rate'] = isset($data['rate']) ? $data['rate'] : null;
        $this->container['hours_max'] = isset($data['hours_max']) ? $data['hours_max'] : null;
        $this->container['hours_min'] = isset($data['hours_min']) ? $data['hours_min'] : null;
        $this->container['round_bill_hours'] = isset($data['round_bill_hours']) ? $data['round_bill_hours'] : null;
        $this->container['overage_rate'] = isset($data['overage_rate']) ? $data['overage_rate'] : null;
        $this->container['overage_rate_type'] = isset($data['overage_rate_type']) ? $data['overage_rate_type'] : null;
        $this->container['agreement_limit'] = isset($data['agreement_limit']) ? $data['agreement_limit'] : null;
        $this->container['site'] = isset($data['site']) ? $data['site'] : null;
        $this->container['effective_date'] = isset($data['effective_date']) ? $data['effective_date'] : null;
        $this->container['ending_date'] = isset($data['ending_date']) ? $data['ending_date'] : null;
        $this->container['agreement_id'] = isset($data['agreement_id']) ? $data['agreement_id'] : null;
        $this->container['company'] = isset($data['company']) ? $data['company'] : null;
        $this->container['_info'] = isset($data['_info']) ? $data['_info'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if ($this->container['rate_type'] === null) {
            $invalid_properties[] = "'rate_type' can't be null";
        }
        $allowed_values = ["AdjAmount", "Custom", "Multiplier"];
        if (!in_array($this->container['rate_type'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'rate_type', must be one of #{allowed_values}.";
        }

        if ($this->container['bill_time'] === null) {
            $invalid_properties[] = "'bill_time' can't be null";
        }
        $allowed_values = ["Billable", "DoNotBill", "NoCharge", "NoDefault"];
        if (!in_array($this->container['bill_time'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'bill_time', must be one of #{allowed_values}.";
        }

        $allowed_values = ["AdjAmount", "Custom", "Multiplier"];
        if (!in_array($this->container['overage_rate_type'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'overage_rate_type', must be one of #{allowed_values}.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['rate_type'] === null) {
            return false;
        }
        $allowed_values = ["AdjAmount", "Custom", "Multiplier"];
        if (!in_array($this->container['rate_type'], $allowed_values)) {
            return false;
        }
        if ($this->container['bill_time'] === null) {
            return false;
        }
        $allowed_values = ["Billable", "DoNotBill", "NoCharge", "NoDefault"];
        if (!in_array($this->container['bill_time'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["AdjAmount", "Custom", "Multiplier"];
        if (!in_array($this->container['overage_rate_type'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets work_type
     * @return \Spinen\ConnectWise\Clients\Finance\Model\WorkTypeReference
     */
    public function getWorkType()
    {
        return $this->container['work_type'];
    }

    /**
     * Sets work_type
     * @param \Spinen\ConnectWise\Clients\Finance\Model\WorkTypeReference $work_type
     * @return $this
     */
    public function setWorkType($work_type)
    {
        $this->container['work_type'] = $work_type;

        return $this;
    }

    /**
     * Gets location_id
     * @return int
     */
    public function getLocationId()
    {
        return $this->container['location_id'];
    }

    /**
     * Sets location_id
     * @param int $location_id
     * @return $this
     */
    public function setLocationId($location_id)
    {
        $this->container['location_id'] = $location_id;

        return $this;
    }

    /**
     * Gets rate_type
     * @return string
     */
    public function getRateType()
    {
        return $this->container['rate_type'];
    }

    /**
     * Sets rate_type
     * @param string $rate_type
     * @return $this
     */
    public function setRateType($rate_type)
    {
        $allowed_values = array('AdjAmount', 'Custom', 'Multiplier');
        if ((!in_array($rate_type, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'rate_type', must be one of 'AdjAmount', 'Custom', 'Multiplier'");
        }
        $this->container['rate_type'] = $rate_type;

        return $this;
    }

    /**
     * Gets bill_time
     * @return string
     */
    public function getBillTime()
    {
        return $this->container['bill_time'];
    }

    /**
     * Sets bill_time
     * @param string $bill_time
     * @return $this
     */
    public function setBillTime($bill_time)
    {
        $allowed_values = array('Billable', 'DoNotBill', 'NoCharge', 'NoDefault');
        if ((!in_array($bill_time, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'bill_time', must be one of 'Billable', 'DoNotBill', 'NoCharge', 'NoDefault'");
        }
        $this->container['bill_time'] = $bill_time;

        return $this;
    }

    /**
     * Gets rate
     * @return double
     */
    public function getRate()
    {
        return $this->container['rate'];
    }

    /**
     * Sets rate
     * @param double $rate
     * @return $this
     */
    public function setRate($rate)
    {
        $this->container['rate'] = $rate;

        return $this;
    }

    /**
     * Gets hours_max
     * @return double
     */
    public function getHoursMax()
    {
        return $this->container['hours_max'];
    }

    /**
     * Sets hours_max
     * @param double $hours_max
     * @return $this
     */
    public function setHoursMax($hours_max)
    {
        $this->container['hours_max'] = $hours_max;

        return $this;
    }

    /**
     * Gets hours_min
     * @return double
     */
    public function getHoursMin()
    {
        return $this->container['hours_min'];
    }

    /**
     * Sets hours_min
     * @param double $hours_min
     * @return $this
     */
    public function setHoursMin($hours_min)
    {
        $this->container['hours_min'] = $hours_min;

        return $this;
    }

    /**
     * Gets round_bill_hours
     * @return double
     */
    public function getRoundBillHours()
    {
        return $this->container['round_bill_hours'];
    }

    /**
     * Sets round_bill_hours
     * @param double $round_bill_hours
     * @return $this
     */
    public function setRoundBillHours($round_bill_hours)
    {
        $this->container['round_bill_hours'] = $round_bill_hours;

        return $this;
    }

    /**
     * Gets overage_rate
     * @return double
     */
    public function getOverageRate()
    {
        return $this->container['overage_rate'];
    }

    /**
     * Sets overage_rate
     * @param double $overage_rate
     * @return $this
     */
    public function setOverageRate($overage_rate)
    {
        $this->container['overage_rate'] = $overage_rate;

        return $this;
    }

    /**
     * Gets overage_rate_type
     * @return string
     */
    public function getOverageRateType()
    {
        return $this->container['overage_rate_type'];
    }

    /**
     * Sets overage_rate_type
     * @param string $overage_rate_type
     * @return $this
     */
    public function setOverageRateType($overage_rate_type)
    {
        $allowed_values = array('AdjAmount', 'Custom', 'Multiplier');
        if (!is_null($overage_rate_type) && (!in_array($overage_rate_type, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'overage_rate_type', must be one of 'AdjAmount', 'Custom', 'Multiplier'");
        }
        $this->container['overage_rate_type'] = $overage_rate_type;

        return $this;
    }

    /**
     * Gets agreement_limit
     * @return double
     */
    public function getAgreementLimit()
    {
        return $this->container['agreement_limit'];
    }

    /**
     * Sets agreement_limit
     * @param double $agreement_limit
     * @return $this
     */
    public function setAgreementLimit($agreement_limit)
    {
        $this->container['agreement_limit'] = $agreement_limit;

        return $this;
    }

    /**
     * Gets site
     * @return \Spinen\ConnectWise\Clients\Finance\Model\SiteReference
     */
    public function getSite()
    {
        return $this->container['site'];
    }

    /**
     * Sets site
     * @param \Spinen\ConnectWise\Clients\Finance\Model\SiteReference $site
     * @return $this
     */
    public function setSite($site)
    {
        $this->container['site'] = $site;

        return $this;
    }

    /**
     * Gets effective_date
     * @return \DateTime
     */
    public function getEffectiveDate()
    {
        return $this->container['effective_date'];
    }

    /**
     * Sets effective_date
     * @param \DateTime $effective_date
     * @return $this
     */
    public function setEffectiveDate($effective_date)
    {
        $this->container['effective_date'] = $effective_date;

        return $this;
    }

    /**
     * Gets ending_date
     * @return \DateTime
     */
    public function getEndingDate()
    {
        return $this->container['ending_date'];
    }

    /**
     * Sets ending_date
     * @param \DateTime $ending_date
     * @return $this
     */
    public function setEndingDate($ending_date)
    {
        $this->container['ending_date'] = $ending_date;

        return $this;
    }

    /**
     * Gets agreement_id
     * @return int
     */
    public function getAgreementId()
    {
        return $this->container['agreement_id'];
    }

    /**
     * Sets agreement_id
     * @param int $agreement_id
     * @return $this
     */
    public function setAgreementId($agreement_id)
    {
        $this->container['agreement_id'] = $agreement_id;

        return $this;
    }

    /**
     * Gets company
     * @return \Spinen\ConnectWise\Clients\Finance\Model\CompanyReference
     */
    public function getCompany()
    {
        return $this->container['company'];
    }

    /**
     * Sets company
     * @param \Spinen\ConnectWise\Clients\Finance\Model\CompanyReference $company
     * @return $this
     */
    public function setCompany($company)
    {
        $this->container['company'] = $company;

        return $this;
    }

    /**
     * Gets _info
     * @return \Spinen\ConnectWise\Clients\Finance\Model\Metadata
     */
    public function getInfo()
    {
        return $this->container['_info'];
    }

    /**
     * Sets _info
     * @param \Spinen\ConnectWise\Clients\Finance\Model\Metadata $_info Metadata of the entity
     * @return $this
     */
    public function setInfo($_info)
    {
        $this->container['_info'] = $_info;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Spinen\ConnectWise\Clients\Finance\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Spinen\ConnectWise\Clients\Finance\ObjectSerializer::sanitizeForSerialization($this));
    }
}


