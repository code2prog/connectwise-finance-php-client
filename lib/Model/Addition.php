<?php
/**
 * Addition
 *
 * PHP version 5
 *
 * @category Class
 * @package  Spinen\ConnectWise\Clients\Finance
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Finance API
 *
 * ConnectWise Finance API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: platform@connectwise.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Spinen\ConnectWise\Clients\Finance\Model;

use \ArrayAccess;

/**
 * Addition Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Spinen\ConnectWise\Clients\Finance
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Addition implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Addition';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'product' => '\Spinen\ConnectWise\Clients\Finance\Model\IvItemReference',
        'quantity' => 'double',
        'less_included' => 'double',
        'unit_price' => 'double',
        'unit_cost' => 'double',
        'bill_customer' => 'string',
        'effective_date' => '\DateTime',
        'cancelled_date' => '\DateTime',
        'taxable_flag' => 'bool',
        'serial_number' => 'string',
        'invoice_description' => 'string',
        'purchase_item_flag' => 'bool',
        'special_order_flag' => 'bool',
        'agreement_id' => 'int',
        'description' => 'string',
        'billed_quantity' => 'double',
        'uom' => 'string',
        'ext_price' => 'double',
        'ext_cost' => 'double',
        'sequence_number' => 'double',
        'margin' => 'double',
        'prorate_cost' => 'double',
        'prorate_price' => 'double',
        'extended_prorate_cost' => 'double',
        'extended_prorate_price' => 'double',
        'prorate_current_period_flag' => 'bool',
        '_info' => '\Spinen\ConnectWise\Clients\Finance\Model\Metadata'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'product' => 'product',
        'quantity' => 'quantity',
        'less_included' => 'lessIncluded',
        'unit_price' => 'unitPrice',
        'unit_cost' => 'unitCost',
        'bill_customer' => 'billCustomer',
        'effective_date' => 'effectiveDate',
        'cancelled_date' => 'cancelledDate',
        'taxable_flag' => 'taxableFlag',
        'serial_number' => 'serialNumber',
        'invoice_description' => 'invoiceDescription',
        'purchase_item_flag' => 'purchaseItemFlag',
        'special_order_flag' => 'specialOrderFlag',
        'agreement_id' => 'agreementId',
        'description' => 'description',
        'billed_quantity' => 'billedQuantity',
        'uom' => 'uom',
        'ext_price' => 'extPrice',
        'ext_cost' => 'extCost',
        'sequence_number' => 'sequenceNumber',
        'margin' => 'margin',
        'prorate_cost' => 'prorateCost',
        'prorate_price' => 'proratePrice',
        'extended_prorate_cost' => 'extendedProrateCost',
        'extended_prorate_price' => 'extendedProratePrice',
        'prorate_current_period_flag' => 'prorateCurrentPeriodFlag',
        '_info' => '_info'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'product' => 'setProduct',
        'quantity' => 'setQuantity',
        'less_included' => 'setLessIncluded',
        'unit_price' => 'setUnitPrice',
        'unit_cost' => 'setUnitCost',
        'bill_customer' => 'setBillCustomer',
        'effective_date' => 'setEffectiveDate',
        'cancelled_date' => 'setCancelledDate',
        'taxable_flag' => 'setTaxableFlag',
        'serial_number' => 'setSerialNumber',
        'invoice_description' => 'setInvoiceDescription',
        'purchase_item_flag' => 'setPurchaseItemFlag',
        'special_order_flag' => 'setSpecialOrderFlag',
        'agreement_id' => 'setAgreementId',
        'description' => 'setDescription',
        'billed_quantity' => 'setBilledQuantity',
        'uom' => 'setUom',
        'ext_price' => 'setExtPrice',
        'ext_cost' => 'setExtCost',
        'sequence_number' => 'setSequenceNumber',
        'margin' => 'setMargin',
        'prorate_cost' => 'setProrateCost',
        'prorate_price' => 'setProratePrice',
        'extended_prorate_cost' => 'setExtendedProrateCost',
        'extended_prorate_price' => 'setExtendedProratePrice',
        'prorate_current_period_flag' => 'setProrateCurrentPeriodFlag',
        '_info' => 'setInfo'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'product' => 'getProduct',
        'quantity' => 'getQuantity',
        'less_included' => 'getLessIncluded',
        'unit_price' => 'getUnitPrice',
        'unit_cost' => 'getUnitCost',
        'bill_customer' => 'getBillCustomer',
        'effective_date' => 'getEffectiveDate',
        'cancelled_date' => 'getCancelledDate',
        'taxable_flag' => 'getTaxableFlag',
        'serial_number' => 'getSerialNumber',
        'invoice_description' => 'getInvoiceDescription',
        'purchase_item_flag' => 'getPurchaseItemFlag',
        'special_order_flag' => 'getSpecialOrderFlag',
        'agreement_id' => 'getAgreementId',
        'description' => 'getDescription',
        'billed_quantity' => 'getBilledQuantity',
        'uom' => 'getUom',
        'ext_price' => 'getExtPrice',
        'ext_cost' => 'getExtCost',
        'sequence_number' => 'getSequenceNumber',
        'margin' => 'getMargin',
        'prorate_cost' => 'getProrateCost',
        'prorate_price' => 'getProratePrice',
        'extended_prorate_cost' => 'getExtendedProrateCost',
        'extended_prorate_price' => 'getExtendedProratePrice',
        'prorate_current_period_flag' => 'getProrateCurrentPeriodFlag',
        '_info' => 'getInfo'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const BILL_CUSTOMER_BILLABLE = 'Billable';
    const BILL_CUSTOMER_DO_NOT_BILL = 'DoNotBill';
    const BILL_CUSTOMER_NO_CHARGE = 'NoCharge';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getBillCustomerAllowableValues()
    {
        return [
            self::BILL_CUSTOMER_BILLABLE,
            self::BILL_CUSTOMER_DO_NOT_BILL,
            self::BILL_CUSTOMER_NO_CHARGE,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['product'] = isset($data['product']) ? $data['product'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['less_included'] = isset($data['less_included']) ? $data['less_included'] : null;
        $this->container['unit_price'] = isset($data['unit_price']) ? $data['unit_price'] : null;
        $this->container['unit_cost'] = isset($data['unit_cost']) ? $data['unit_cost'] : null;
        $this->container['bill_customer'] = isset($data['bill_customer']) ? $data['bill_customer'] : null;
        $this->container['effective_date'] = isset($data['effective_date']) ? $data['effective_date'] : null;
        $this->container['cancelled_date'] = isset($data['cancelled_date']) ? $data['cancelled_date'] : null;
        $this->container['taxable_flag'] = isset($data['taxable_flag']) ? $data['taxable_flag'] : null;
        $this->container['serial_number'] = isset($data['serial_number']) ? $data['serial_number'] : null;
        $this->container['invoice_description'] = isset($data['invoice_description']) ? $data['invoice_description'] : null;
        $this->container['purchase_item_flag'] = isset($data['purchase_item_flag']) ? $data['purchase_item_flag'] : null;
        $this->container['special_order_flag'] = isset($data['special_order_flag']) ? $data['special_order_flag'] : null;
        $this->container['agreement_id'] = isset($data['agreement_id']) ? $data['agreement_id'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['billed_quantity'] = isset($data['billed_quantity']) ? $data['billed_quantity'] : null;
        $this->container['uom'] = isset($data['uom']) ? $data['uom'] : null;
        $this->container['ext_price'] = isset($data['ext_price']) ? $data['ext_price'] : null;
        $this->container['ext_cost'] = isset($data['ext_cost']) ? $data['ext_cost'] : null;
        $this->container['sequence_number'] = isset($data['sequence_number']) ? $data['sequence_number'] : null;
        $this->container['margin'] = isset($data['margin']) ? $data['margin'] : null;
        $this->container['prorate_cost'] = isset($data['prorate_cost']) ? $data['prorate_cost'] : null;
        $this->container['prorate_price'] = isset($data['prorate_price']) ? $data['prorate_price'] : null;
        $this->container['extended_prorate_cost'] = isset($data['extended_prorate_cost']) ? $data['extended_prorate_cost'] : null;
        $this->container['extended_prorate_price'] = isset($data['extended_prorate_price']) ? $data['extended_prorate_price'] : null;
        $this->container['prorate_current_period_flag'] = isset($data['prorate_current_period_flag']) ? $data['prorate_current_period_flag'] : null;
        $this->container['_info'] = isset($data['_info']) ? $data['_info'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if ($this->container['product'] === null) {
            $invalid_properties[] = "'product' can't be null";
        }
        if ($this->container['bill_customer'] === null) {
            $invalid_properties[] = "'bill_customer' can't be null";
        }
        $allowed_values = ["Billable", "DoNotBill", "NoCharge"];
        if (!in_array($this->container['bill_customer'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'bill_customer', must be one of #{allowed_values}.";
        }

        if (!is_null($this->container['serial_number']) && (strlen($this->container['serial_number']) > 50)) {
            $invalid_properties[] = "invalid value for 'serial_number', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['invoice_description']) && (strlen($this->container['invoice_description']) > 6000)) {
            $invalid_properties[] = "invalid value for 'invoice_description', the character length must be smaller than or equal to 6000.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['product'] === null) {
            return false;
        }
        if ($this->container['bill_customer'] === null) {
            return false;
        }
        $allowed_values = ["Billable", "DoNotBill", "NoCharge"];
        if (!in_array($this->container['bill_customer'], $allowed_values)) {
            return false;
        }
        if (strlen($this->container['serial_number']) > 50) {
            return false;
        }
        if (strlen($this->container['invoice_description']) > 6000) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets product
     * @return \Spinen\ConnectWise\Clients\Finance\Model\IvItemReference
     */
    public function getProduct()
    {
        return $this->container['product'];
    }

    /**
     * Sets product
     * @param \Spinen\ConnectWise\Clients\Finance\Model\IvItemReference $product
     * @return $this
     */
    public function setProduct($product)
    {
        $this->container['product'] = $product;

        return $this;
    }

    /**
     * Gets quantity
     * @return double
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     * @param double $quantity
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets less_included
     * @return double
     */
    public function getLessIncluded()
    {
        return $this->container['less_included'];
    }

    /**
     * Sets less_included
     * @param double $less_included
     * @return $this
     */
    public function setLessIncluded($less_included)
    {
        $this->container['less_included'] = $less_included;

        return $this;
    }

    /**
     * Gets unit_price
     * @return double
     */
    public function getUnitPrice()
    {
        return $this->container['unit_price'];
    }

    /**
     * Sets unit_price
     * @param double $unit_price
     * @return $this
     */
    public function setUnitPrice($unit_price)
    {
        $this->container['unit_price'] = $unit_price;

        return $this;
    }

    /**
     * Gets unit_cost
     * @return double
     */
    public function getUnitCost()
    {
        return $this->container['unit_cost'];
    }

    /**
     * Sets unit_cost
     * @param double $unit_cost
     * @return $this
     */
    public function setUnitCost($unit_cost)
    {
        $this->container['unit_cost'] = $unit_cost;

        return $this;
    }

    /**
     * Gets bill_customer
     * @return string
     */
    public function getBillCustomer()
    {
        return $this->container['bill_customer'];
    }

    /**
     * Sets bill_customer
     * @param string $bill_customer
     * @return $this
     */
    public function setBillCustomer($bill_customer)
    {
        $allowed_values = array('Billable', 'DoNotBill', 'NoCharge');
        if ((!in_array($bill_customer, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'bill_customer', must be one of 'Billable', 'DoNotBill', 'NoCharge'");
        }
        $this->container['bill_customer'] = $bill_customer;

        return $this;
    }

    /**
     * Gets effective_date
     * @return \DateTime
     */
    public function getEffectiveDate()
    {
        return $this->container['effective_date'];
    }

    /**
     * Sets effective_date
     * @param \DateTime $effective_date
     * @return $this
     */
    public function setEffectiveDate($effective_date)
    {
        $this->container['effective_date'] = $effective_date;

        return $this;
    }

    /**
     * Gets cancelled_date
     * @return \DateTime
     */
    public function getCancelledDate()
    {
        return $this->container['cancelled_date'];
    }

    /**
     * Sets cancelled_date
     * @param \DateTime $cancelled_date
     * @return $this
     */
    public function setCancelledDate($cancelled_date)
    {
        $this->container['cancelled_date'] = $cancelled_date;

        return $this;
    }

    /**
     * Gets taxable_flag
     * @return bool
     */
    public function getTaxableFlag()
    {
        return $this->container['taxable_flag'];
    }

    /**
     * Sets taxable_flag
     * @param bool $taxable_flag
     * @return $this
     */
    public function setTaxableFlag($taxable_flag)
    {
        $this->container['taxable_flag'] = $taxable_flag;

        return $this;
    }

    /**
     * Gets serial_number
     * @return string
     */
    public function getSerialNumber()
    {
        return $this->container['serial_number'];
    }

    /**
     * Sets serial_number
     * @param string $serial_number
     * @return $this
     */
    public function setSerialNumber($serial_number)
    {
        if (!is_null($serial_number) && (strlen($serial_number) > 50)) {
            throw new \InvalidArgumentException('invalid length for $serial_number when calling Addition., must be smaller than or equal to 50.');
        }

        $this->container['serial_number'] = $serial_number;

        return $this;
    }

    /**
     * Gets invoice_description
     * @return string
     */
    public function getInvoiceDescription()
    {
        return $this->container['invoice_description'];
    }

    /**
     * Sets invoice_description
     * @param string $invoice_description
     * @return $this
     */
    public function setInvoiceDescription($invoice_description)
    {
        if (!is_null($invoice_description) && (strlen($invoice_description) > 6000)) {
            throw new \InvalidArgumentException('invalid length for $invoice_description when calling Addition., must be smaller than or equal to 6000.');
        }

        $this->container['invoice_description'] = $invoice_description;

        return $this;
    }

    /**
     * Gets purchase_item_flag
     * @return bool
     */
    public function getPurchaseItemFlag()
    {
        return $this->container['purchase_item_flag'];
    }

    /**
     * Sets purchase_item_flag
     * @param bool $purchase_item_flag
     * @return $this
     */
    public function setPurchaseItemFlag($purchase_item_flag)
    {
        $this->container['purchase_item_flag'] = $purchase_item_flag;

        return $this;
    }

    /**
     * Gets special_order_flag
     * @return bool
     */
    public function getSpecialOrderFlag()
    {
        return $this->container['special_order_flag'];
    }

    /**
     * Sets special_order_flag
     * @param bool $special_order_flag
     * @return $this
     */
    public function setSpecialOrderFlag($special_order_flag)
    {
        $this->container['special_order_flag'] = $special_order_flag;

        return $this;
    }

    /**
     * Gets agreement_id
     * @return int
     */
    public function getAgreementId()
    {
        return $this->container['agreement_id'];
    }

    /**
     * Sets agreement_id
     * @param int $agreement_id
     * @return $this
     */
    public function setAgreementId($agreement_id)
    {
        $this->container['agreement_id'] = $agreement_id;

        return $this;
    }

    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     * @param string $description
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets billed_quantity
     * @return double
     */
    public function getBilledQuantity()
    {
        return $this->container['billed_quantity'];
    }

    /**
     * Sets billed_quantity
     * @param double $billed_quantity
     * @return $this
     */
    public function setBilledQuantity($billed_quantity)
    {
        $this->container['billed_quantity'] = $billed_quantity;

        return $this;
    }

    /**
     * Gets uom
     * @return string
     */
    public function getUom()
    {
        return $this->container['uom'];
    }

    /**
     * Sets uom
     * @param string $uom
     * @return $this
     */
    public function setUom($uom)
    {
        $this->container['uom'] = $uom;

        return $this;
    }

    /**
     * Gets ext_price
     * @return double
     */
    public function getExtPrice()
    {
        return $this->container['ext_price'];
    }

    /**
     * Sets ext_price
     * @param double $ext_price
     * @return $this
     */
    public function setExtPrice($ext_price)
    {
        $this->container['ext_price'] = $ext_price;

        return $this;
    }

    /**
     * Gets ext_cost
     * @return double
     */
    public function getExtCost()
    {
        return $this->container['ext_cost'];
    }

    /**
     * Sets ext_cost
     * @param double $ext_cost
     * @return $this
     */
    public function setExtCost($ext_cost)
    {
        $this->container['ext_cost'] = $ext_cost;

        return $this;
    }

    /**
     * Gets sequence_number
     * @return double
     */
    public function getSequenceNumber()
    {
        return $this->container['sequence_number'];
    }

    /**
     * Sets sequence_number
     * @param double $sequence_number
     * @return $this
     */
    public function setSequenceNumber($sequence_number)
    {
        $this->container['sequence_number'] = $sequence_number;

        return $this;
    }

    /**
     * Gets margin
     * @return double
     */
    public function getMargin()
    {
        return $this->container['margin'];
    }

    /**
     * Sets margin
     * @param double $margin
     * @return $this
     */
    public function setMargin($margin)
    {
        $this->container['margin'] = $margin;

        return $this;
    }

    /**
     * Gets prorate_cost
     * @return double
     */
    public function getProrateCost()
    {
        return $this->container['prorate_cost'];
    }

    /**
     * Sets prorate_cost
     * @param double $prorate_cost
     * @return $this
     */
    public function setProrateCost($prorate_cost)
    {
        $this->container['prorate_cost'] = $prorate_cost;

        return $this;
    }

    /**
     * Gets prorate_price
     * @return double
     */
    public function getProratePrice()
    {
        return $this->container['prorate_price'];
    }

    /**
     * Sets prorate_price
     * @param double $prorate_price
     * @return $this
     */
    public function setProratePrice($prorate_price)
    {
        $this->container['prorate_price'] = $prorate_price;

        return $this;
    }

    /**
     * Gets extended_prorate_cost
     * @return double
     */
    public function getExtendedProrateCost()
    {
        return $this->container['extended_prorate_cost'];
    }

    /**
     * Sets extended_prorate_cost
     * @param double $extended_prorate_cost
     * @return $this
     */
    public function setExtendedProrateCost($extended_prorate_cost)
    {
        $this->container['extended_prorate_cost'] = $extended_prorate_cost;

        return $this;
    }

    /**
     * Gets extended_prorate_price
     * @return double
     */
    public function getExtendedProratePrice()
    {
        return $this->container['extended_prorate_price'];
    }

    /**
     * Sets extended_prorate_price
     * @param double $extended_prorate_price
     * @return $this
     */
    public function setExtendedProratePrice($extended_prorate_price)
    {
        $this->container['extended_prorate_price'] = $extended_prorate_price;

        return $this;
    }

    /**
     * Gets prorate_current_period_flag
     * @return bool
     */
    public function getProrateCurrentPeriodFlag()
    {
        return $this->container['prorate_current_period_flag'];
    }

    /**
     * Sets prorate_current_period_flag
     * @param bool $prorate_current_period_flag
     * @return $this
     */
    public function setProrateCurrentPeriodFlag($prorate_current_period_flag)
    {
        $this->container['prorate_current_period_flag'] = $prorate_current_period_flag;

        return $this;
    }

    /**
     * Gets _info
     * @return \Spinen\ConnectWise\Clients\Finance\Model\Metadata
     */
    public function getInfo()
    {
        return $this->container['_info'];
    }

    /**
     * Sets _info
     * @param \Spinen\ConnectWise\Clients\Finance\Model\Metadata $_info Metadata of the entity
     * @return $this
     */
    public function setInfo($_info)
    {
        $this->container['_info'] = $_info;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Spinen\ConnectWise\Clients\Finance\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Spinen\ConnectWise\Clients\Finance\ObjectSerializer::sanitizeForSerialization($this));
    }
}


