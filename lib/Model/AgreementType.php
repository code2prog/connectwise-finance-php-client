<?php
/**
 * AgreementType
 *
 * PHP version 5
 *
 * @category Class
 * @package  Spinen\ConnectWise\Clients\Finance
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Finance API
 *
 * ConnectWise Finance API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: platform@connectwise.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Spinen\ConnectWise\Clients\Finance\Model;

use \ArrayAccess;

/**
 * AgreementType Class Doc Comment
 *
 * @category    Class
 */

/**
 * @package     Spinen\ConnectWise\Clients\Finance
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class AgreementType implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     * @var string
     */
    protected static $swaggerModelName = 'AgreementType';

    /**
     * Array of property to type mappings. Used for (de)serialization
     * @var string[]
     */
    protected static $swaggerTypes = [
        'id'                            => 'int',
        'name'                          => 'string',
        'prefix_suffix_option'          => 'string',
        'default_flag'                  => 'bool',
        'inactive_flag'                 => 'bool',
        'pre_payment_flag'              => 'bool',
        'invoice_pre_suffix'            => 'string',
        'location_id'                   => 'int',
        'business_unit_id'              => 'int',
        'restrict_location_flag'        => 'bool',
        'restrict_department_flag'      => 'bool',
        'sla_id'                        => 'int',
        'application_units'             => 'string',
        'application_limit'             => 'double',
        'application_cycle'             => 'string',
        'application_unlimited_flag'    => 'bool',
        'one_time_flag'                 => 'bool',
        'cover_agreement_time_flag'     => 'bool',
        'cover_agreement_product_flag'  => 'bool',
        'cover_agreement_expense_flag'  => 'bool',
        'cover_sales_tax_flag'          => 'bool',
        'carry_over_unused_flag'        => 'bool',
        'allow_overruns_flag'           => 'bool',
        'expired_days'                  => 'int',
        'limit'                         => 'int',
        'expire_when_zero'              => 'bool',
        'charge_to_firm_flag'           => 'bool',
        'employee_comp_rate'            => 'string',
        'employee_comp_not_exceed'      => 'string',
        'comp_hourly_rate'              => 'double',
        'comp_limit_amount'             => 'double',
        'bill_cycle_id'                 => 'int',
        'bill_one_time_flag'            => 'bool',
        'bill_terms_id'                 => 'int',
        'invoicing_cycle'               => 'string',
        'bill_amount'                   => 'double',
        'taxable_flag'                  => 'bool',
        'restrict_down_payment_flag'    => 'bool',
        'invoice_description'           => 'string',
        'top_comment_flag'              => 'bool',
        'bottom_comment_flag'           => 'bool',
        'work_role'                     => '\Spinen\ConnectWise\Clients\Finance\Model\WorkRoleReference',
        'work_type'                     => '\Spinen\ConnectWise\Clients\Finance\Model\WorkTypeReference',
        'project_type_id'               => 'int',
        'invoice_template_setup_id'     => 'int',
        'bill_time'                     => 'string',
        'bill_expenses'                 => 'string',
        'bill_products'                 => 'string',
        'billable_time_invoice_flag'    => 'bool',
        'billable_expense_invoice_flag' => 'bool',
        'billable_product_invoice_flag' => 'bool',
        'copy_work_roles_flag'          => 'bool',
        'copy_work_types_flag'          => 'bool',
        '_info'                         => '\Spinen\ConnectWise\Clients\Finance\Model\Metadata'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id'                            => 'id',
        'name'                          => 'name',
        'prefix_suffix_option'          => 'prefixSuffixOption',
        'default_flag'                  => 'defaultFlag',
        'inactive_flag'                 => 'inactiveFlag',
        'pre_payment_flag'              => 'prePaymentFlag',
        'invoice_pre_suffix'            => 'invoicePreSuffix',
        'location_id'                   => 'locationId',
        'business_unit_id'              => 'businessUnitId',
        'restrict_location_flag'        => 'restrictLocationFlag',
        'restrict_department_flag'      => 'restrictDepartmentFlag',
        'sla_id'                        => 'slaId',
        'application_units'             => 'applicationUnits',
        'application_limit'             => 'applicationLimit',
        'application_cycle'             => 'applicationCycle',
        'application_unlimited_flag'    => 'applicationUnlimitedFlag',
        'one_time_flag'                 => 'oneTimeFlag',
        'cover_agreement_time_flag'     => 'coverAgreementTimeFlag',
        'cover_agreement_product_flag'  => 'coverAgreementProductFlag',
        'cover_agreement_expense_flag'  => 'coverAgreementExpenseFlag',
        'cover_sales_tax_flag'          => 'coverSalesTaxFlag',
        'carry_over_unused_flag'        => 'carryOverUnusedFlag',
        'allow_overruns_flag'           => 'allowOverrunsFlag',
        'expired_days'                  => 'expiredDays',
        'limit'                         => 'limit',
        'expire_when_zero'              => 'expireWhenZero',
        'charge_to_firm_flag'           => 'chargeToFirmFlag',
        'employee_comp_rate'            => 'employeeCompRate',
        'employee_comp_not_exceed'      => 'employeeCompNotExceed',
        'comp_hourly_rate'              => 'compHourlyRate',
        'comp_limit_amount'             => 'compLimitAmount',
        'bill_cycle_id'                 => 'billCycleId',
        'bill_one_time_flag'            => 'billOneTimeFlag',
        'bill_terms_id'                 => 'billTermsId',
        'invoicing_cycle'               => 'invoicingCycle',
        'bill_amount'                   => 'billAmount',
        'taxable_flag'                  => 'taxableFlag',
        'restrict_down_payment_flag'    => 'restrictDownPaymentFlag',
        'invoice_description'           => 'invoiceDescription',
        'top_comment_flag'              => 'topCommentFlag',
        'bottom_comment_flag'           => 'bottomCommentFlag',
        'work_role'                     => 'workRole',
        'work_type'                     => 'workType',
        'project_type_id'               => 'projectTypeId',
        'invoice_template_setup_id'     => 'invoiceTemplateSetupId',
        'bill_time'                     => 'billTime',
        'bill_expenses'                 => 'billExpenses',
        'bill_products'                 => 'billProducts',
        'billable_time_invoice_flag'    => 'billableTimeInvoiceFlag',
        'billable_expense_invoice_flag' => 'billableExpenseInvoiceFlag',
        'billable_product_invoice_flag' => 'billableProductInvoiceFlag',
        'copy_work_roles_flag'          => 'copyWorkRolesFlag',
        'copy_work_types_flag'          => 'copyWorkTypesFlag',
        '_info'                         => '_info'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id'                            => 'setId',
        'name'                          => 'setName',
        'prefix_suffix_option'          => 'setPrefixSuffixOption',
        'default_flag'                  => 'setDefaultFlag',
        'inactive_flag'                 => 'setInactiveFlag',
        'pre_payment_flag'              => 'setPrePaymentFlag',
        'invoice_pre_suffix'            => 'setInvoicePreSuffix',
        'location_id'                   => 'setLocationId',
        'business_unit_id'              => 'setBusinessUnitId',
        'restrict_location_flag'        => 'setRestrictLocationFlag',
        'restrict_department_flag'      => 'setRestrictDepartmentFlag',
        'sla_id'                        => 'setSlaId',
        'application_units'             => 'setApplicationUnits',
        'application_limit'             => 'setApplicationLimit',
        'application_cycle'             => 'setApplicationCycle',
        'application_unlimited_flag'    => 'setApplicationUnlimitedFlag',
        'one_time_flag'                 => 'setOneTimeFlag',
        'cover_agreement_time_flag'     => 'setCoverAgreementTimeFlag',
        'cover_agreement_product_flag'  => 'setCoverAgreementProductFlag',
        'cover_agreement_expense_flag'  => 'setCoverAgreementExpenseFlag',
        'cover_sales_tax_flag'          => 'setCoverSalesTaxFlag',
        'carry_over_unused_flag'        => 'setCarryOverUnusedFlag',
        'allow_overruns_flag'           => 'setAllowOverrunsFlag',
        'expired_days'                  => 'setExpiredDays',
        'limit'                         => 'setLimit',
        'expire_when_zero'              => 'setExpireWhenZero',
        'charge_to_firm_flag'           => 'setChargeToFirmFlag',
        'employee_comp_rate'            => 'setEmployeeCompRate',
        'employee_comp_not_exceed'      => 'setEmployeeCompNotExceed',
        'comp_hourly_rate'              => 'setCompHourlyRate',
        'comp_limit_amount'             => 'setCompLimitAmount',
        'bill_cycle_id'                 => 'setBillCycleId',
        'bill_one_time_flag'            => 'setBillOneTimeFlag',
        'bill_terms_id'                 => 'setBillTermsId',
        'invoicing_cycle'               => 'setInvoicingCycle',
        'bill_amount'                   => 'setBillAmount',
        'taxable_flag'                  => 'setTaxableFlag',
        'restrict_down_payment_flag'    => 'setRestrictDownPaymentFlag',
        'invoice_description'           => 'setInvoiceDescription',
        'top_comment_flag'              => 'setTopCommentFlag',
        'bottom_comment_flag'           => 'setBottomCommentFlag',
        'work_role'                     => 'setWorkRole',
        'work_type'                     => 'setWorkType',
        'project_type_id'               => 'setProjectTypeId',
        'invoice_template_setup_id'     => 'setInvoiceTemplateSetupId',
        'bill_time'                     => 'setBillTime',
        'bill_expenses'                 => 'setBillExpenses',
        'bill_products'                 => 'setBillProducts',
        'billable_time_invoice_flag'    => 'setBillableTimeInvoiceFlag',
        'billable_expense_invoice_flag' => 'setBillableExpenseInvoiceFlag',
        'billable_product_invoice_flag' => 'setBillableProductInvoiceFlag',
        'copy_work_roles_flag'          => 'setCopyWorkRolesFlag',
        'copy_work_types_flag'          => 'setCopyWorkTypesFlag',
        '_info'                         => 'setInfo'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id'                            => 'getId',
        'name'                          => 'getName',
        'prefix_suffix_option'          => 'getPrefixSuffixOption',
        'default_flag'                  => 'getDefaultFlag',
        'inactive_flag'                 => 'getInactiveFlag',
        'pre_payment_flag'              => 'getPrePaymentFlag',
        'invoice_pre_suffix'            => 'getInvoicePreSuffix',
        'location_id'                   => 'getLocationId',
        'business_unit_id'              => 'getBusinessUnitId',
        'restrict_location_flag'        => 'getRestrictLocationFlag',
        'restrict_department_flag'      => 'getRestrictDepartmentFlag',
        'sla_id'                        => 'getSlaId',
        'application_units'             => 'getApplicationUnits',
        'application_limit'             => 'getApplicationLimit',
        'application_cycle'             => 'getApplicationCycle',
        'application_unlimited_flag'    => 'getApplicationUnlimitedFlag',
        'one_time_flag'                 => 'getOneTimeFlag',
        'cover_agreement_time_flag'     => 'getCoverAgreementTimeFlag',
        'cover_agreement_product_flag'  => 'getCoverAgreementProductFlag',
        'cover_agreement_expense_flag'  => 'getCoverAgreementExpenseFlag',
        'cover_sales_tax_flag'          => 'getCoverSalesTaxFlag',
        'carry_over_unused_flag'        => 'getCarryOverUnusedFlag',
        'allow_overruns_flag'           => 'getAllowOverrunsFlag',
        'expired_days'                  => 'getExpiredDays',
        'limit'                         => 'getLimit',
        'expire_when_zero'              => 'getExpireWhenZero',
        'charge_to_firm_flag'           => 'getChargeToFirmFlag',
        'employee_comp_rate'            => 'getEmployeeCompRate',
        'employee_comp_not_exceed'      => 'getEmployeeCompNotExceed',
        'comp_hourly_rate'              => 'getCompHourlyRate',
        'comp_limit_amount'             => 'getCompLimitAmount',
        'bill_cycle_id'                 => 'getBillCycleId',
        'bill_one_time_flag'            => 'getBillOneTimeFlag',
        'bill_terms_id'                 => 'getBillTermsId',
        'invoicing_cycle'               => 'getInvoicingCycle',
        'bill_amount'                   => 'getBillAmount',
        'taxable_flag'                  => 'getTaxableFlag',
        'restrict_down_payment_flag'    => 'getRestrictDownPaymentFlag',
        'invoice_description'           => 'getInvoiceDescription',
        'top_comment_flag'              => 'getTopCommentFlag',
        'bottom_comment_flag'           => 'getBottomCommentFlag',
        'work_role'                     => 'getWorkRole',
        'work_type'                     => 'getWorkType',
        'project_type_id'               => 'getProjectTypeId',
        'invoice_template_setup_id'     => 'getInvoiceTemplateSetupId',
        'bill_time'                     => 'getBillTime',
        'bill_expenses'                 => 'getBillExpenses',
        'bill_products'                 => 'getBillProducts',
        'billable_time_invoice_flag'    => 'getBillableTimeInvoiceFlag',
        'billable_expense_invoice_flag' => 'getBillableExpenseInvoiceFlag',
        'billable_product_invoice_flag' => 'getBillableProductInvoiceFlag',
        'copy_work_roles_flag'          => 'getCopyWorkRolesFlag',
        'copy_work_types_flag'          => 'getCopyWorkTypesFlag',
        '_info'                         => 'getInfo'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const PREFIX_SUFFIX_OPTION_PREFIX = 'Prefix';
    const PREFIX_SUFFIX_OPTION_SUFFIX = 'Suffix';
    const APPLICATION_UNITS_AMOUNT = 'Amount';
    const APPLICATION_UNITS_HOURS = 'Hours';
    const APPLICATION_UNITS_INCIDENTS = 'Incidents';
    const APPLICATION_CYCLE_CONTRACT2_WEEKS = 'Contract2Weeks';
    const APPLICATION_CYCLE_CONTRACT4_WEEKS = 'Contract4Weeks';
    const APPLICATION_CYCLE_CONTRACT_YEAR = 'ContractYear';
    const APPLICATION_CYCLE_CALENDAR_MONTH = 'CalendarMonth';
    const APPLICATION_CYCLE_CALENDAR_QUARTER = 'CalendarQuarter';
    const APPLICATION_CYCLE_CALENDAR_WEEK = 'CalendarWeek';
    const APPLICATION_CYCLE_CONTRACT_QUARTER = 'ContractQuarter';
    const APPLICATION_CYCLE_CALENDAR_YEAR = 'CalendarYear';
    const EMPLOYEE_COMP_RATE_ACTUAL = 'Actual';
    const EMPLOYEE_COMP_RATE_HOURLY = 'Hourly';
    const EMPLOYEE_COMP_NOT_EXCEED_BILLING = 'Billing';
    const EMPLOYEE_COMP_NOT_EXCEED_PERCENT = 'Percent';
    const EMPLOYEE_COMP_NOT_EXCEED_AMOUNT = 'Amount';
    const INVOICING_CYCLE_CALENDAR_YEAR = 'CalendarYear';
    const INVOICING_CYCLE_CONTRACT_YEAR = 'ContractYear';
    const BILL_TIME_BILLABLE = 'Billable';
    const BILL_TIME_DO_NOT_BILL = 'DoNotBill';
    const BILL_TIME_NO_CHARGE = 'NoCharge';
    const BILL_TIME_NO_DEFAULT = 'NoDefault';
    const BILL_EXPENSES_BILLABLE = 'Billable';
    const BILL_EXPENSES_DO_NOT_BILL = 'DoNotBill';
    const BILL_EXPENSES_NO_CHARGE = 'NoCharge';
    const BILL_EXPENSES_NO_DEFAULT = 'NoDefault';
    const BILL_PRODUCTS_BILLABLE = 'Billable';
    const BILL_PRODUCTS_DO_NOT_BILL = 'DoNotBill';
    const BILL_PRODUCTS_NO_CHARGE = 'NoCharge';
    const BILL_PRODUCTS_NO_DEFAULT = 'NoDefault';


    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getPrefixSuffixOptionAllowableValues()
    {
        return [
            self::PREFIX_SUFFIX_OPTION_PREFIX,
            self::PREFIX_SUFFIX_OPTION_SUFFIX,
        ];
    }

    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getApplicationUnitsAllowableValues()
    {
        return [
            self::APPLICATION_UNITS_AMOUNT,
            self::APPLICATION_UNITS_HOURS,
            self::APPLICATION_UNITS_INCIDENTS,
        ];
    }

    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getApplicationCycleAllowableValues()
    {
        return [
            self::APPLICATION_CYCLE_CONTRACT2_WEEKS,
            self::APPLICATION_CYCLE_CONTRACT4_WEEKS,
            self::APPLICATION_CYCLE_CONTRACT_YEAR,
            self::APPLICATION_CYCLE_CALENDAR_MONTH,
            self::APPLICATION_CYCLE_CALENDAR_QUARTER,
            self::APPLICATION_CYCLE_CALENDAR_WEEK,
            self::APPLICATION_CYCLE_CONTRACT_QUARTER,
            self::APPLICATION_CYCLE_CALENDAR_YEAR,
        ];
    }

    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getEmployeeCompRateAllowableValues()
    {
        return [
            self::EMPLOYEE_COMP_RATE_ACTUAL,
            self::EMPLOYEE_COMP_RATE_HOURLY,
        ];
    }

    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getEmployeeCompNotExceedAllowableValues()
    {
        return [
            self::EMPLOYEE_COMP_NOT_EXCEED_BILLING,
            self::EMPLOYEE_COMP_NOT_EXCEED_PERCENT,
            self::EMPLOYEE_COMP_NOT_EXCEED_AMOUNT,
        ];
    }

    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getInvoicingCycleAllowableValues()
    {
        return [
            self::INVOICING_CYCLE_CALENDAR_YEAR,
            self::INVOICING_CYCLE_CONTRACT_YEAR,
        ];
    }

    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getBillTimeAllowableValues()
    {
        return [
            self::BILL_TIME_BILLABLE,
            self::BILL_TIME_DO_NOT_BILL,
            self::BILL_TIME_NO_CHARGE,
            self::BILL_TIME_NO_DEFAULT,
        ];
    }

    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getBillExpensesAllowableValues()
    {
        return [
            self::BILL_EXPENSES_BILLABLE,
            self::BILL_EXPENSES_DO_NOT_BILL,
            self::BILL_EXPENSES_NO_CHARGE,
            self::BILL_EXPENSES_NO_DEFAULT,
        ];
    }

    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getBillProductsAllowableValues()
    {
        return [
            self::BILL_PRODUCTS_BILLABLE,
            self::BILL_PRODUCTS_DO_NOT_BILL,
            self::BILL_PRODUCTS_NO_CHARGE,
            self::BILL_PRODUCTS_NO_DEFAULT,
        ];
    }


    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param  mixed[]  $data  Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['prefix_suffix_option'] = isset($data['prefix_suffix_option']) ? $data['prefix_suffix_option'] : null;
        $this->container['default_flag'] = isset($data['default_flag']) ? $data['default_flag'] : null;
        $this->container['inactive_flag'] = isset($data['inactive_flag']) ? $data['inactive_flag'] : null;
        $this->container['pre_payment_flag'] = isset($data['pre_payment_flag']) ? $data['pre_payment_flag'] : null;
        $this->container['invoice_pre_suffix'] = isset($data['invoice_pre_suffix']) ? $data['invoice_pre_suffix'] : null;
        $this->container['location_id'] = isset($data['location_id']) ? $data['location_id'] : null;
        $this->container['business_unit_id'] = isset($data['business_unit_id']) ? $data['business_unit_id'] : null;
        $this->container['restrict_location_flag'] = isset($data['restrict_location_flag']) ? $data['restrict_location_flag'] : null;
        $this->container['restrict_department_flag'] = isset($data['restrict_department_flag']) ? $data['restrict_department_flag'] : null;
        $this->container['sla_id'] = isset($data['sla_id']) ? $data['sla_id'] : null;
        $this->container['application_units'] = isset($data['application_units']) ? $data['application_units'] : null;
        $this->container['application_limit'] = isset($data['application_limit']) ? $data['application_limit'] : null;
        $this->container['application_cycle'] = isset($data['application_cycle']) ? $data['application_cycle'] : null;
        $this->container['application_unlimited_flag'] = isset($data['application_unlimited_flag']) ? $data['application_unlimited_flag'] : null;
        $this->container['one_time_flag'] = isset($data['one_time_flag']) ? $data['one_time_flag'] : null;
        $this->container['cover_agreement_time_flag'] = isset($data['cover_agreement_time_flag']) ? $data['cover_agreement_time_flag'] : null;
        $this->container['cover_agreement_product_flag'] = isset($data['cover_agreement_product_flag']) ? $data['cover_agreement_product_flag'] : null;
        $this->container['cover_agreement_expense_flag'] = isset($data['cover_agreement_expense_flag']) ? $data['cover_agreement_expense_flag'] : null;
        $this->container['cover_sales_tax_flag'] = isset($data['cover_sales_tax_flag']) ? $data['cover_sales_tax_flag'] : null;
        $this->container['carry_over_unused_flag'] = isset($data['carry_over_unused_flag']) ? $data['carry_over_unused_flag'] : null;
        $this->container['allow_overruns_flag'] = isset($data['allow_overruns_flag']) ? $data['allow_overruns_flag'] : null;
        $this->container['expired_days'] = isset($data['expired_days']) ? $data['expired_days'] : null;
        $this->container['limit'] = isset($data['limit']) ? $data['limit'] : null;
        $this->container['expire_when_zero'] = isset($data['expire_when_zero']) ? $data['expire_when_zero'] : null;
        $this->container['charge_to_firm_flag'] = isset($data['charge_to_firm_flag']) ? $data['charge_to_firm_flag'] : null;
        $this->container['employee_comp_rate'] = isset($data['employee_comp_rate']) ? $data['employee_comp_rate'] : null;
        $this->container['employee_comp_not_exceed'] = isset($data['employee_comp_not_exceed']) ? $data['employee_comp_not_exceed'] : null;
        $this->container['comp_hourly_rate'] = isset($data['comp_hourly_rate']) ? $data['comp_hourly_rate'] : null;
        $this->container['comp_limit_amount'] = isset($data['comp_limit_amount']) ? $data['comp_limit_amount'] : null;
        $this->container['bill_cycle_id'] = isset($data['bill_cycle_id']) ? $data['bill_cycle_id'] : null;
        $this->container['bill_one_time_flag'] = isset($data['bill_one_time_flag']) ? $data['bill_one_time_flag'] : null;
        $this->container['bill_terms_id'] = isset($data['bill_terms_id']) ? $data['bill_terms_id'] : null;
        $this->container['invoicing_cycle'] = isset($data['invoicing_cycle']) ? $data['invoicing_cycle'] : null;
        $this->container['bill_amount'] = isset($data['bill_amount']) ? $data['bill_amount'] : null;
        $this->container['taxable_flag'] = isset($data['taxable_flag']) ? $data['taxable_flag'] : null;
        $this->container['restrict_down_payment_flag'] = isset($data['restrict_down_payment_flag']) ? $data['restrict_down_payment_flag'] : null;
        $this->container['invoice_description'] = isset($data['invoice_description']) ? $data['invoice_description'] : null;
        $this->container['top_comment_flag'] = isset($data['top_comment_flag']) ? $data['top_comment_flag'] : null;
        $this->container['bottom_comment_flag'] = isset($data['bottom_comment_flag']) ? $data['bottom_comment_flag'] : null;
        $this->container['work_role'] = isset($data['work_role']) ? $data['work_role'] : null;
        $this->container['work_type'] = isset($data['work_type']) ? $data['work_type'] : null;
        $this->container['project_type_id'] = isset($data['project_type_id']) ? $data['project_type_id'] : null;
        $this->container['invoice_template_setup_id'] = isset($data['invoice_template_setup_id']) ? $data['invoice_template_setup_id'] : null;
        $this->container['bill_time'] = isset($data['bill_time']) ? $data['bill_time'] : null;
        $this->container['bill_expenses'] = isset($data['bill_expenses']) ? $data['bill_expenses'] : null;
        $this->container['bill_products'] = isset($data['bill_products']) ? $data['bill_products'] : null;
        $this->container['billable_time_invoice_flag'] = isset($data['billable_time_invoice_flag']) ? $data['billable_time_invoice_flag'] : null;
        $this->container['billable_expense_invoice_flag'] = isset($data['billable_expense_invoice_flag']) ? $data['billable_expense_invoice_flag'] : null;
        $this->container['billable_product_invoice_flag'] = isset($data['billable_product_invoice_flag']) ? $data['billable_product_invoice_flag'] : null;
        $this->container['copy_work_roles_flag'] = isset($data['copy_work_roles_flag']) ? $data['copy_work_roles_flag'] : null;
        $this->container['copy_work_types_flag'] = isset($data['copy_work_types_flag']) ? $data['copy_work_types_flag'] : null;
        $this->container['_info'] = isset($data['_info']) ? $data['_info'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if ($this->container['name'] === null) {
            $invalid_properties[] = "'name' can't be null";
        }
        if ((strlen($this->container['name']) > 50)) {
            $invalid_properties[] = "invalid value for 'name', the character length must be smaller than or equal to 50.";
        }

        if ($this->container['prefix_suffix_option'] === null) {
            $invalid_properties[] = "'prefix_suffix_option' can't be null";
        }
        $allowed_values = ["Prefix", "Suffix"];
        if (!in_array($this->container['prefix_suffix_option'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'prefix_suffix_option', must be one of #{allowed_values}.";
        }

        if (!is_null($this->container['invoice_pre_suffix']) && (strlen($this->container['invoice_pre_suffix']) > 5)) {
            $invalid_properties[] = "invalid value for 'invoice_pre_suffix', the character length must be smaller than or equal to 5.";
        }

        $allowed_values = ["Amount", "Hours", "Incidents"];
        if (!in_array($this->container['application_units'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'application_units', must be one of #{allowed_values}.";
        }

        $allowed_values = [
            "Contract2Weeks", "Contract4Weeks", "ContractYear", "CalendarMonth", "CalendarQuarter", "CalendarWeek",
            "ContractQuarter", "CalendarYear"
        ];
        if (!in_array($this->container['application_cycle'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'application_cycle', must be one of #{allowed_values}.";
        }

        if ($this->container['employee_comp_rate'] === null) {
            $invalid_properties[] = "'employee_comp_rate' can't be null";
        }
        $allowed_values = ["Actual", "Hourly"];
        if (!in_array($this->container['employee_comp_rate'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'employee_comp_rate', must be one of #{allowed_values}.";
        }

        if ($this->container['employee_comp_not_exceed'] === null) {
            $invalid_properties[] = "'employee_comp_not_exceed' can't be null";
        }
        $allowed_values = ["Billing", "Percent", "Amount"];
        if (!in_array($this->container['employee_comp_not_exceed'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'employee_comp_not_exceed', must be one of #{allowed_values}.";
        }

        if ($this->container['invoicing_cycle'] === null) {
            $invalid_properties[] = "'invoicing_cycle' can't be null";
        }
        $allowed_values = ["CalendarYear", "ContractYear"];
        if (!in_array($this->container['invoicing_cycle'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'invoicing_cycle', must be one of #{allowed_values}.";
        }

        if (!is_null($this->container['invoice_description']) && (strlen($this->container['invoice_description']) > 4000)) {
            $invalid_properties[] = "invalid value for 'invoice_description', the character length must be smaller than or equal to 4000.";
        }

        if ($this->container['bill_time'] === null) {
            $invalid_properties[] = "'bill_time' can't be null";
        }
        $allowed_values = ["Billable", "DoNotBill", "NoCharge", "NoDefault"];
        if (!in_array($this->container['bill_time'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'bill_time', must be one of #{allowed_values}.";
        }

        if ($this->container['bill_expenses'] === null) {
            $invalid_properties[] = "'bill_expenses' can't be null";
        }
        $allowed_values = ["Billable", "DoNotBill", "NoCharge", "NoDefault"];
        if (!in_array($this->container['bill_expenses'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'bill_expenses', must be one of #{allowed_values}.";
        }

        if ($this->container['bill_products'] === null) {
            $invalid_properties[] = "'bill_products' can't be null";
        }
        $allowed_values = ["Billable", "DoNotBill", "NoCharge", "NoDefault"];
        if (!in_array($this->container['bill_products'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'bill_products', must be one of #{allowed_values}.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['name'] === null) {
            return false;
        }
        if (strlen($this->container['name']) > 50) {
            return false;
        }
        if ($this->container['prefix_suffix_option'] === null) {
            return false;
        }
        $allowed_values = ["Prefix", "Suffix"];
        if (!in_array($this->container['prefix_suffix_option'], $allowed_values)) {
            return false;
        }
        if (strlen($this->container['invoice_pre_suffix']) > 5) {
            return false;
        }
        $allowed_values = ["Amount", "Hours", "Incidents"];
        if (!in_array($this->container['application_units'], $allowed_values)) {
            return false;
        }
        $allowed_values = [
            "Contract2Weeks", "Contract4Weeks", "ContractYear", "CalendarMonth", "CalendarQuarter", "CalendarWeek",
            "ContractQuarter", "CalendarYear"
        ];
        if (!in_array($this->container['application_cycle'], $allowed_values)) {
            return false;
        }
        if ($this->container['employee_comp_rate'] === null) {
            return false;
        }
        $allowed_values = ["Actual", "Hourly"];
        if (!in_array($this->container['employee_comp_rate'], $allowed_values)) {
            return false;
        }
        if ($this->container['employee_comp_not_exceed'] === null) {
            return false;
        }
        $allowed_values = ["Billing", "Percent", "Amount"];
        if (!in_array($this->container['employee_comp_not_exceed'], $allowed_values)) {
            return false;
        }
        if ($this->container['invoicing_cycle'] === null) {
            return false;
        }
        $allowed_values = ["CalendarYear", "ContractYear"];
        if (!in_array($this->container['invoicing_cycle'], $allowed_values)) {
            return false;
        }
        if (strlen($this->container['invoice_description']) > 4000) {
            return false;
        }
        if ($this->container['bill_time'] === null) {
            return false;
        }
        $allowed_values = ["Billable", "DoNotBill", "NoCharge", "NoDefault"];
        if (!in_array($this->container['bill_time'], $allowed_values)) {
            return false;
        }
        if ($this->container['bill_expenses'] === null) {
            return false;
        }
        $allowed_values = ["Billable", "DoNotBill", "NoCharge", "NoDefault"];
        if (!in_array($this->container['bill_expenses'], $allowed_values)) {
            return false;
        }
        if ($this->container['bill_products'] === null) {
            return false;
        }
        $allowed_values = ["Billable", "DoNotBill", "NoCharge", "NoDefault"];
        if (!in_array($this->container['bill_products'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param  int  $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param  string  $name
     * @return $this
     */
    public function setName($name)
    {
        if ((strlen($name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $name when calling AgreementType., must be smaller than or equal to 50.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets prefix_suffix_option
     * @return string
     */
    public function getPrefixSuffixOption()
    {
        return $this->container['prefix_suffix_option'];
    }

    /**
     * Sets prefix_suffix_option
     * @param  string  $prefix_suffix_option
     * @return $this
     */
    public function setPrefixSuffixOption($prefix_suffix_option)
    {
        $allowed_values = array('Prefix', 'Suffix');
        if ((!in_array($prefix_suffix_option, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'prefix_suffix_option', must be one of 'Prefix', 'Suffix'");
        }
        $this->container['prefix_suffix_option'] = $prefix_suffix_option;

        return $this;
    }

    /**
     * Gets default_flag
     * @return bool
     */
    public function getDefaultFlag()
    {
        return $this->container['default_flag'];
    }

    /**
     * Sets default_flag
     * @param  bool  $default_flag
     * @return $this
     */
    public function setDefaultFlag($default_flag)
    {
        $this->container['default_flag'] = $default_flag;

        return $this;
    }

    /**
     * Gets inactive_flag
     * @return bool
     */
    public function getInactiveFlag()
    {
        return $this->container['inactive_flag'];
    }

    /**
     * Sets inactive_flag
     * @param  bool  $inactive_flag
     * @return $this
     */
    public function setInactiveFlag($inactive_flag)
    {
        $this->container['inactive_flag'] = $inactive_flag;

        return $this;
    }

    /**
     * Gets pre_payment_flag
     * @return bool
     */
    public function getPrePaymentFlag()
    {
        return $this->container['pre_payment_flag'];
    }

    /**
     * Sets pre_payment_flag
     * @param  bool  $pre_payment_flag
     * @return $this
     */
    public function setPrePaymentFlag($pre_payment_flag)
    {
        $this->container['pre_payment_flag'] = $pre_payment_flag;

        return $this;
    }

    /**
     * Gets invoice_pre_suffix
     * @return string
     */
    public function getInvoicePreSuffix()
    {
        return $this->container['invoice_pre_suffix'];
    }

    /**
     * Sets invoice_pre_suffix
     * @param  string  $invoice_pre_suffix
     * @return $this
     */
    public function setInvoicePreSuffix($invoice_pre_suffix)
    {
        if (!is_null($invoice_pre_suffix) && (strlen($invoice_pre_suffix) > 5)) {
            throw new \InvalidArgumentException('invalid length for $invoice_pre_suffix when calling AgreementType., must be smaller than or equal to 5.');
        }

        $this->container['invoice_pre_suffix'] = $invoice_pre_suffix;

        return $this;
    }

    /**
     * Gets location_id
     * @return int
     */
    public function getLocationId()
    {
        return $this->container['location_id'];
    }

    /**
     * Sets location_id
     * @param  int  $location_id
     * @return $this
     */
    public function setLocationId($location_id)
    {
        $this->container['location_id'] = $location_id;

        return $this;
    }

    /**
     * Gets business_unit_id
     * @return int
     */
    public function getBusinessUnitId()
    {
        return $this->container['business_unit_id'];
    }

    /**
     * Sets business_unit_id
     * @param  int  $business_unit_id
     * @return $this
     */
    public function setBusinessUnitId($business_unit_id)
    {
        $this->container['business_unit_id'] = $business_unit_id;

        return $this;
    }

    /**
     * Gets restrict_location_flag
     * @return bool
     */
    public function getRestrictLocationFlag()
    {
        return $this->container['restrict_location_flag'];
    }

    /**
     * Sets restrict_location_flag
     * @param  bool  $restrict_location_flag
     * @return $this
     */
    public function setRestrictLocationFlag($restrict_location_flag)
    {
        $this->container['restrict_location_flag'] = $restrict_location_flag;

        return $this;
    }

    /**
     * Gets restrict_department_flag
     * @return bool
     */
    public function getRestrictDepartmentFlag()
    {
        return $this->container['restrict_department_flag'];
    }

    /**
     * Sets restrict_department_flag
     * @param  bool  $restrict_department_flag
     * @return $this
     */
    public function setRestrictDepartmentFlag($restrict_department_flag)
    {
        $this->container['restrict_department_flag'] = $restrict_department_flag;

        return $this;
    }

    /**
     * Gets sla_id
     * @return int
     */
    public function getSlaId()
    {
        return $this->container['sla_id'];
    }

    /**
     * Sets sla_id
     * @param  int  $sla_id
     * @return $this
     */
    public function setSlaId($sla_id)
    {
        $this->container['sla_id'] = $sla_id;

        return $this;
    }

    /**
     * Gets application_units
     * @return string
     */
    public function getApplicationUnits()
    {
        return $this->container['application_units'];
    }

    /**
     * Sets application_units
     * @param  string  $application_units
     * @return $this
     */
    public function setApplicationUnits($application_units)
    {
        $allowed_values = array('Amount', 'Hours', 'Incidents');
        if (!is_null($application_units) && (!in_array($application_units, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'application_units', must be one of 'Amount', 'Hours', 'Incidents'");
        }
        $this->container['application_units'] = $application_units;

        return $this;
    }

    /**
     * Gets application_limit
     * @return double
     */
    public function getApplicationLimit()
    {
        return $this->container['application_limit'];
    }

    /**
     * Sets application_limit
     * @param  double  $application_limit
     * @return $this
     */
    public function setApplicationLimit($application_limit)
    {
        $this->container['application_limit'] = $application_limit;

        return $this;
    }

    /**
     * Gets application_cycle
     * @return string
     */
    public function getApplicationCycle()
    {
        return $this->container['application_cycle'];
    }

    /**
     * Sets application_cycle
     * @param  string  $application_cycle
     * @return $this
     */
    public function setApplicationCycle($application_cycle)
    {
        $allowed_values = array(
            'Contract2Weeks', 'Contract4Weeks', 'ContractYear', 'CalendarMonth', 'CalendarQuarter', 'CalendarWeek',
            'ContractQuarter', 'CalendarYear'
        );
        if (!is_null($application_cycle) && (!in_array($application_cycle, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'application_cycle', must be one of 'Contract2Weeks', 'Contract4Weeks', 'ContractYear', 'CalendarMonth', 'CalendarQuarter', 'CalendarWeek', 'ContractQuarter', 'CalendarYear'");
        }
        $this->container['application_cycle'] = $application_cycle;

        return $this;
    }

    /**
     * Gets application_unlimited_flag
     * @return bool
     */
    public function getApplicationUnlimitedFlag()
    {
        return $this->container['application_unlimited_flag'];
    }

    /**
     * Sets application_unlimited_flag
     * @param  bool  $application_unlimited_flag
     * @return $this
     */
    public function setApplicationUnlimitedFlag($application_unlimited_flag)
    {
        $this->container['application_unlimited_flag'] = $application_unlimited_flag;

        return $this;
    }

    /**
     * Gets one_time_flag
     * @return bool
     */
    public function getOneTimeFlag()
    {
        return $this->container['one_time_flag'];
    }

    /**
     * Sets one_time_flag
     * @param  bool  $one_time_flag
     * @return $this
     */
    public function setOneTimeFlag($one_time_flag)
    {
        $this->container['one_time_flag'] = $one_time_flag;

        return $this;
    }

    /**
     * Gets cover_agreement_time_flag
     * @return bool
     */
    public function getCoverAgreementTimeFlag()
    {
        return $this->container['cover_agreement_time_flag'];
    }

    /**
     * Sets cover_agreement_time_flag
     * @param  bool  $cover_agreement_time_flag
     * @return $this
     */
    public function setCoverAgreementTimeFlag($cover_agreement_time_flag)
    {
        $this->container['cover_agreement_time_flag'] = $cover_agreement_time_flag;

        return $this;
    }

    /**
     * Gets cover_agreement_product_flag
     * @return bool
     */
    public function getCoverAgreementProductFlag()
    {
        return $this->container['cover_agreement_product_flag'];
    }

    /**
     * Sets cover_agreement_product_flag
     * @param  bool  $cover_agreement_product_flag
     * @return $this
     */
    public function setCoverAgreementProductFlag($cover_agreement_product_flag)
    {
        $this->container['cover_agreement_product_flag'] = $cover_agreement_product_flag;

        return $this;
    }

    /**
     * Gets cover_agreement_expense_flag
     * @return bool
     */
    public function getCoverAgreementExpenseFlag()
    {
        return $this->container['cover_agreement_expense_flag'];
    }

    /**
     * Sets cover_agreement_expense_flag
     * @param  bool  $cover_agreement_expense_flag
     * @return $this
     */
    public function setCoverAgreementExpenseFlag($cover_agreement_expense_flag)
    {
        $this->container['cover_agreement_expense_flag'] = $cover_agreement_expense_flag;

        return $this;
    }

    /**
     * Gets cover_sales_tax_flag
     * @return bool
     */
    public function getCoverSalesTaxFlag()
    {
        return $this->container['cover_sales_tax_flag'];
    }

    /**
     * Sets cover_sales_tax_flag
     * @param  bool  $cover_sales_tax_flag
     * @return $this
     */
    public function setCoverSalesTaxFlag($cover_sales_tax_flag)
    {
        $this->container['cover_sales_tax_flag'] = $cover_sales_tax_flag;

        return $this;
    }

    /**
     * Gets carry_over_unused_flag
     * @return bool
     */
    public function getCarryOverUnusedFlag()
    {
        return $this->container['carry_over_unused_flag'];
    }

    /**
     * Sets carry_over_unused_flag
     * @param  bool  $carry_over_unused_flag
     * @return $this
     */
    public function setCarryOverUnusedFlag($carry_over_unused_flag)
    {
        $this->container['carry_over_unused_flag'] = $carry_over_unused_flag;

        return $this;
    }

    /**
     * Gets allow_overruns_flag
     * @return bool
     */
    public function getAllowOverrunsFlag()
    {
        return $this->container['allow_overruns_flag'];
    }

    /**
     * Sets allow_overruns_flag
     * @param  bool  $allow_overruns_flag
     * @return $this
     */
    public function setAllowOverrunsFlag($allow_overruns_flag)
    {
        $this->container['allow_overruns_flag'] = $allow_overruns_flag;

        return $this;
    }

    /**
     * Gets expired_days
     * @return int
     */
    public function getExpiredDays()
    {
        return $this->container['expired_days'];
    }

    /**
     * Sets expired_days
     * @param  int  $expired_days
     * @return $this
     */
    public function setExpiredDays($expired_days)
    {
        $this->container['expired_days'] = $expired_days;

        return $this;
    }

    /**
     * Gets limit
     * @return int
     */
    public function getLimit()
    {
        return $this->container['limit'];
    }

    /**
     * Sets limit
     * @param  int  $limit
     * @return $this
     */
    public function setLimit($limit)
    {
        $this->container['limit'] = $limit;

        return $this;
    }

    /**
     * Gets expire_when_zero
     * @return bool
     */
    public function getExpireWhenZero()
    {
        return $this->container['expire_when_zero'];
    }

    /**
     * Sets expire_when_zero
     * @param  bool  $expire_when_zero
     * @return $this
     */
    public function setExpireWhenZero($expire_when_zero)
    {
        $this->container['expire_when_zero'] = $expire_when_zero;

        return $this;
    }

    /**
     * Gets charge_to_firm_flag
     * @return bool
     */
    public function getChargeToFirmFlag()
    {
        return $this->container['charge_to_firm_flag'];
    }

    /**
     * Sets charge_to_firm_flag
     * @param  bool  $charge_to_firm_flag
     * @return $this
     */
    public function setChargeToFirmFlag($charge_to_firm_flag)
    {
        $this->container['charge_to_firm_flag'] = $charge_to_firm_flag;

        return $this;
    }

    /**
     * Gets employee_comp_rate
     * @return string
     */
    public function getEmployeeCompRate()
    {
        return $this->container['employee_comp_rate'];
    }

    /**
     * Sets employee_comp_rate
     * @param  string  $employee_comp_rate
     * @return $this
     */
    public function setEmployeeCompRate($employee_comp_rate)
    {
        $allowed_values = array('Actual', 'Hourly');
        if ((!in_array($employee_comp_rate, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'employee_comp_rate', must be one of 'Actual', 'Hourly'");
        }
        $this->container['employee_comp_rate'] = $employee_comp_rate;

        return $this;
    }

    /**
     * Gets employee_comp_not_exceed
     * @return string
     */
    public function getEmployeeCompNotExceed()
    {
        return $this->container['employee_comp_not_exceed'];
    }

    /**
     * Sets employee_comp_not_exceed
     * @param  string  $employee_comp_not_exceed
     * @return $this
     */
    public function setEmployeeCompNotExceed($employee_comp_not_exceed)
    {
        $allowed_values = array('Billing', 'Percent', 'Amount');
        if ((!in_array($employee_comp_not_exceed, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'employee_comp_not_exceed', must be one of 'Billing', 'Percent', 'Amount'");
        }
        $this->container['employee_comp_not_exceed'] = $employee_comp_not_exceed;

        return $this;
    }

    /**
     * Gets comp_hourly_rate
     * @return double
     */
    public function getCompHourlyRate()
    {
        return $this->container['comp_hourly_rate'];
    }

    /**
     * Sets comp_hourly_rate
     * @param  double  $comp_hourly_rate
     * @return $this
     */
    public function setCompHourlyRate($comp_hourly_rate)
    {
        $this->container['comp_hourly_rate'] = $comp_hourly_rate;

        return $this;
    }

    /**
     * Gets comp_limit_amount
     * @return double
     */
    public function getCompLimitAmount()
    {
        return $this->container['comp_limit_amount'];
    }

    /**
     * Sets comp_limit_amount
     * @param  double  $comp_limit_amount
     * @return $this
     */
    public function setCompLimitAmount($comp_limit_amount)
    {
        $this->container['comp_limit_amount'] = $comp_limit_amount;

        return $this;
    }

    /**
     * Gets bill_cycle_id
     * @return int
     */
    public function getBillCycleId()
    {
        return $this->container['bill_cycle_id'];
    }

    /**
     * Sets bill_cycle_id
     * @param  int  $bill_cycle_id
     * @return $this
     */
    public function setBillCycleId($bill_cycle_id)
    {
        $this->container['bill_cycle_id'] = $bill_cycle_id;

        return $this;
    }

    /**
     * Gets bill_one_time_flag
     * @return bool
     */
    public function getBillOneTimeFlag()
    {
        return $this->container['bill_one_time_flag'];
    }

    /**
     * Sets bill_one_time_flag
     * @param  bool  $bill_one_time_flag
     * @return $this
     */
    public function setBillOneTimeFlag($bill_one_time_flag)
    {
        $this->container['bill_one_time_flag'] = $bill_one_time_flag;

        return $this;
    }

    /**
     * Gets bill_terms_id
     * @return int
     */
    public function getBillTermsId()
    {
        return $this->container['bill_terms_id'];
    }

    /**
     * Sets bill_terms_id
     * @param  int  $bill_terms_id
     * @return $this
     */
    public function setBillTermsId($bill_terms_id)
    {
        $this->container['bill_terms_id'] = $bill_terms_id;

        return $this;
    }

    /**
     * Gets invoicing_cycle
     * @return string
     */
    public function getInvoicingCycle()
    {
        return $this->container['invoicing_cycle'];
    }

    /**
     * Sets invoicing_cycle
     * @param  string  $invoicing_cycle
     * @return $this
     */
    public function setInvoicingCycle($invoicing_cycle)
    {
        $allowed_values = array('CalendarYear', 'ContractYear');
        if ((!in_array($invoicing_cycle, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'invoicing_cycle', must be one of 'CalendarYear', 'ContractYear'");
        }
        $this->container['invoicing_cycle'] = $invoicing_cycle;

        return $this;
    }

    /**
     * Gets bill_amount
     * @return double
     */
    public function getBillAmount()
    {
        return $this->container['bill_amount'];
    }

    /**
     * Sets bill_amount
     * @param  double  $bill_amount
     * @return $this
     */
    public function setBillAmount($bill_amount)
    {
        $this->container['bill_amount'] = $bill_amount;

        return $this;
    }

    /**
     * Gets taxable_flag
     * @return bool
     */
    public function getTaxableFlag()
    {
        return $this->container['taxable_flag'];
    }

    /**
     * Sets taxable_flag
     * @param  bool  $taxable_flag
     * @return $this
     */
    public function setTaxableFlag($taxable_flag)
    {
        $this->container['taxable_flag'] = $taxable_flag;

        return $this;
    }

    /**
     * Gets restrict_down_payment_flag
     * @return bool
     */
    public function getRestrictDownPaymentFlag()
    {
        return $this->container['restrict_down_payment_flag'];
    }

    /**
     * Sets restrict_down_payment_flag
     * @param  bool  $restrict_down_payment_flag
     * @return $this
     */
    public function setRestrictDownPaymentFlag($restrict_down_payment_flag)
    {
        $this->container['restrict_down_payment_flag'] = $restrict_down_payment_flag;

        return $this;
    }

    /**
     * Gets invoice_description
     * @return string
     */
    public function getInvoiceDescription()
    {
        return $this->container['invoice_description'];
    }

    /**
     * Sets invoice_description
     * @param  string  $invoice_description
     * @return $this
     */
    public function setInvoiceDescription($invoice_description)
    {
        if (!is_null($invoice_description) && (strlen($invoice_description) > 4000)) {
            throw new \InvalidArgumentException('invalid length for $invoice_description when calling AgreementType., must be smaller than or equal to 4000.');
        }

        $this->container['invoice_description'] = $invoice_description;

        return $this;
    }

    /**
     * Gets top_comment_flag
     * @return bool
     */
    public function getTopCommentFlag()
    {
        return $this->container['top_comment_flag'];
    }

    /**
     * Sets top_comment_flag
     * @param  bool  $top_comment_flag
     * @return $this
     */
    public function setTopCommentFlag($top_comment_flag)
    {
        $this->container['top_comment_flag'] = $top_comment_flag;

        return $this;
    }

    /**
     * Gets bottom_comment_flag
     * @return bool
     */
    public function getBottomCommentFlag()
    {
        return $this->container['bottom_comment_flag'];
    }

    /**
     * Sets bottom_comment_flag
     * @param  bool  $bottom_comment_flag
     * @return $this
     */
    public function setBottomCommentFlag($bottom_comment_flag)
    {
        $this->container['bottom_comment_flag'] = $bottom_comment_flag;

        return $this;
    }

    /**
     * Gets work_role
     * @return \Spinen\ConnectWise\Clients\Finance\Model\WorkRoleReference
     */
    public function getWorkRole()
    {
        return $this->container['work_role'];
    }

    /**
     * Sets work_role
     * @param  \Spinen\ConnectWise\Clients\Finance\Model\WorkRoleReference  $work_role
     * @return $this
     */
    public function setWorkRole($work_role)
    {
        $this->container['work_role'] = $work_role;

        return $this;
    }

    /**
     * Gets work_type
     * @return \Spinen\ConnectWise\Clients\Finance\Model\WorkTypeReference
     */
    public function getWorkType()
    {
        return $this->container['work_type'];
    }

    /**
     * Sets work_type
     * @param  \Spinen\ConnectWise\Clients\Finance\Model\WorkTypeReference  $work_type
     * @return $this
     */
    public function setWorkType($work_type)
    {
        $this->container['work_type'] = $work_type;

        return $this;
    }

    /**
     * Gets project_type_id
     * @return int
     */
    public function getProjectTypeId()
    {
        return $this->container['project_type_id'];
    }

    /**
     * Sets project_type_id
     * @param  int  $project_type_id
     * @return $this
     */
    public function setProjectTypeId($project_type_id)
    {
        $this->container['project_type_id'] = $project_type_id;

        return $this;
    }

    /**
     * Gets invoice_template_setup_id
     * @return int
     */
    public function getInvoiceTemplateSetupId()
    {
        return $this->container['invoice_template_setup_id'];
    }

    /**
     * Sets invoice_template_setup_id
     * @param  int  $invoice_template_setup_id
     * @return $this
     */
    public function setInvoiceTemplateSetupId($invoice_template_setup_id)
    {
        $this->container['invoice_template_setup_id'] = $invoice_template_setup_id;

        return $this;
    }

    /**
     * Gets bill_time
     * @return string
     */
    public function getBillTime()
    {
        return $this->container['bill_time'];
    }

    /**
     * Sets bill_time
     * @param  string  $bill_time
     * @return $this
     */
    public function setBillTime($bill_time)
    {
        $allowed_values = array('Billable', 'DoNotBill', 'NoCharge', 'NoDefault');
        if ((!in_array($bill_time, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'bill_time', must be one of 'Billable', 'DoNotBill', 'NoCharge', 'NoDefault'");
        }
        $this->container['bill_time'] = $bill_time;

        return $this;
    }

    /**
     * Gets bill_expenses
     * @return string
     */
    public function getBillExpenses()
    {
        return $this->container['bill_expenses'];
    }

    /**
     * Sets bill_expenses
     * @param  string  $bill_expenses
     * @return $this
     */
    public function setBillExpenses($bill_expenses)
    {
        $allowed_values = array('Billable', 'DoNotBill', 'NoCharge', 'NoDefault');
        if ((!in_array($bill_expenses, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'bill_expenses', must be one of 'Billable', 'DoNotBill', 'NoCharge', 'NoDefault'");
        }
        $this->container['bill_expenses'] = $bill_expenses;

        return $this;
    }

    /**
     * Gets bill_products
     * @return string
     */
    public function getBillProducts()
    {
        return $this->container['bill_products'];
    }

    /**
     * Sets bill_products
     * @param  string  $bill_products
     * @return $this
     */
    public function setBillProducts($bill_products)
    {
        $allowed_values = array('Billable', 'DoNotBill', 'NoCharge', 'NoDefault');
        if ((!in_array($bill_products, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'bill_products', must be one of 'Billable', 'DoNotBill', 'NoCharge', 'NoDefault'");
        }
        $this->container['bill_products'] = $bill_products;

        return $this;
    }

    /**
     * Gets billable_time_invoice_flag
     * @return bool
     */
    public function getBillableTimeInvoiceFlag()
    {
        return $this->container['billable_time_invoice_flag'];
    }

    /**
     * Sets billable_time_invoice_flag
     * @param  bool  $billable_time_invoice_flag
     * @return $this
     */
    public function setBillableTimeInvoiceFlag($billable_time_invoice_flag)
    {
        $this->container['billable_time_invoice_flag'] = $billable_time_invoice_flag;

        return $this;
    }

    /**
     * Gets billable_expense_invoice_flag
     * @return bool
     */
    public function getBillableExpenseInvoiceFlag()
    {
        return $this->container['billable_expense_invoice_flag'];
    }

    /**
     * Sets billable_expense_invoice_flag
     * @param  bool  $billable_expense_invoice_flag
     * @return $this
     */
    public function setBillableExpenseInvoiceFlag($billable_expense_invoice_flag)
    {
        $this->container['billable_expense_invoice_flag'] = $billable_expense_invoice_flag;

        return $this;
    }

    /**
     * Gets billable_product_invoice_flag
     * @return bool
     */
    public function getBillableProductInvoiceFlag()
    {
        return $this->container['billable_product_invoice_flag'];
    }

    /**
     * Sets billable_product_invoice_flag
     * @param  bool  $billable_product_invoice_flag
     * @return $this
     */
    public function setBillableProductInvoiceFlag($billable_product_invoice_flag)
    {
        $this->container['billable_product_invoice_flag'] = $billable_product_invoice_flag;

        return $this;
    }

    /**
     * Gets copy_work_roles_flag
     * @return bool
     */
    public function getCopyWorkRolesFlag()
    {
        return $this->container['copy_work_roles_flag'];
    }

    /**
     * Sets copy_work_roles_flag
     * @param  bool  $copy_work_roles_flag
     * @return $this
     */
    public function setCopyWorkRolesFlag($copy_work_roles_flag)
    {
        $this->container['copy_work_roles_flag'] = $copy_work_roles_flag;

        return $this;
    }

    /**
     * Gets copy_work_types_flag
     * @return bool
     */
    public function getCopyWorkTypesFlag()
    {
        return $this->container['copy_work_types_flag'];
    }

    /**
     * Sets copy_work_types_flag
     * @param  bool  $copy_work_types_flag
     * @return $this
     */
    public function setCopyWorkTypesFlag($copy_work_types_flag)
    {
        $this->container['copy_work_types_flag'] = $copy_work_types_flag;

        return $this;
    }

    /**
     * Gets _info
     * @return \Spinen\ConnectWise\Clients\Finance\Model\Metadata
     */
    public function getInfo()
    {
        return $this->container['_info'];
    }

    /**
     * Sets _info
     * @param  \Spinen\ConnectWise\Clients\Finance\Model\Metadata  $_info  Metadata of the entity
     * @return $this
     */
    public function setInfo($_info)
    {
        $this->container['_info'] = $_info;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer  $offset  Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer  $offset  Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer  $offset  Offset
     * @param  mixed  $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer  $offset  Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Spinen\ConnectWise\Clients\Finance\ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT);
        }

        return json_encode(\Spinen\ConnectWise\Clients\Finance\ObjectSerializer::sanitizeForSerialization($this));
    }
}


