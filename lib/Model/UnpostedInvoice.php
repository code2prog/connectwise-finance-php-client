<?php
/**
 * UnpostedInvoice
 *
 * PHP version 5
 *
 * @category Class
 * @package  Spinen\ConnectWise\Clients\Finance
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Finance API
 *
 * ConnectWise Finance API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: platform@connectwise.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Spinen\ConnectWise\Clients\Finance\Model;

use \ArrayAccess;

/**
 * UnpostedInvoice Class Doc Comment
 *
 * @category    Class
 */

/**
 * @package     Spinen\ConnectWise\Clients\Finance
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class UnpostedInvoice implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     * @var string
     */
    protected static $swaggerModelName = 'UnpostedInvoice';

    /**
     * Array of property to type mappings. Used for (de)serialization
     * @var string[]
     */
    protected static $swaggerTypes = [
        'id'                   => 'int',
        'billing_log_id'       => 'int',
        'location_id'          => 'int',
        'department_id'        => 'int',
        'company'              => '\Spinen\ConnectWise\Clients\Finance\Model\CompanyReference',
        'account_number'       => 'string',
        'bill_to_company'      => '\Spinen\ConnectWise\Clients\Finance\Model\CompanyReference',
        'bill_to_site'         => '\Spinen\ConnectWise\Clients\Finance\Model\SiteReference',
        'ship_to_company'      => '\Spinen\ConnectWise\Clients\Finance\Model\CompanyReference',
        'ship_to_site'         => '\Spinen\ConnectWise\Clients\Finance\Model\SiteReference',
        'invoice_number'       => 'string',
        'invoice_date'         => '\DateTime',
        'invoice_type'         => 'string',
        'description'          => 'string',
        'billing_terms'        => '\Spinen\ConnectWise\Clients\Finance\Model\BillingTermsReference',
        'due_days'             => 'string',
        'due_date'             => '\DateTime',
        'currency'             => '\Spinen\ConnectWise\Clients\Finance\Model\CurrencyReference',
        'sub_total'            => 'double',
        'total'                => 'double',
        'invoice_taxable_flag' => 'bool',
        'tax_code'             => '\Spinen\ConnectWise\Clients\Finance\Model\TaxCodeReference',
        'avalara_tax_flag'     => 'bool',
        'item_taxable_flag'    => 'bool',
        'sales_tax_amount'     => 'double',
        'state_tax_flag'       => 'bool',
        'state_tax_xref'       => 'string',
        'state_tax_amount'     => 'double',
        'county_tax_flag'      => 'bool',
        'county_tax_xref'      => 'string',
        'county_tax_amount'    => 'double',
        'city_tax_flag'        => 'bool',
        'city_tax_xref'        => 'string',
        'city_tax_amount'      => 'double',
        'country_tax_flag'     => 'bool',
        'country_tax_xref'     => 'string',
        'country_tax_amount'   => 'double',
        'composite_tax_flag'   => 'bool',
        'composite_tax_xref'   => 'string',
        'composite_tax_amount' => 'double',
        'created_by'           => 'string',
        'date_closed'          => '\DateTime',
        '_info'                => '\Spinen\ConnectWise\Clients\Finance\Model\Metadata'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id'                   => 'id',
        'billing_log_id'       => 'billingLogId',
        'location_id'          => 'locationId',
        'department_id'        => 'departmentId',
        'company'              => 'company',
        'account_number'       => 'accountNumber',
        'bill_to_company'      => 'billToCompany',
        'bill_to_site'         => 'billToSite',
        'ship_to_company'      => 'shipToCompany',
        'ship_to_site'         => 'shipToSite',
        'invoice_number'       => 'invoiceNumber',
        'invoice_date'         => 'invoiceDate',
        'invoice_type'         => 'invoiceType',
        'description'          => 'description',
        'billing_terms'        => 'billingTerms',
        'due_days'             => 'dueDays',
        'due_date'             => 'dueDate',
        'currency'             => 'currency',
        'sub_total'            => 'subTotal',
        'total'                => 'total',
        'invoice_taxable_flag' => 'invoiceTaxableFlag',
        'tax_code'             => 'taxCode',
        'avalara_tax_flag'     => 'avalaraTaxFlag',
        'item_taxable_flag'    => 'itemTaxableFlag',
        'sales_tax_amount'     => 'salesTaxAmount',
        'state_tax_flag'       => 'stateTaxFlag',
        'state_tax_xref'       => 'stateTaxXref',
        'state_tax_amount'     => 'stateTaxAmount',
        'county_tax_flag'      => 'countyTaxFlag',
        'county_tax_xref'      => 'countyTaxXref',
        'county_tax_amount'    => 'countyTaxAmount',
        'city_tax_flag'        => 'cityTaxFlag',
        'city_tax_xref'        => 'cityTaxXref',
        'city_tax_amount'      => 'cityTaxAmount',
        'country_tax_flag'     => 'countryTaxFlag',
        'country_tax_xref'     => 'countryTaxXref',
        'country_tax_amount'   => 'countryTaxAmount',
        'composite_tax_flag'   => 'compositeTaxFlag',
        'composite_tax_xref'   => 'compositeTaxXref',
        'composite_tax_amount' => 'compositeTaxAmount',
        'created_by'           => 'createdBy',
        'date_closed'          => 'dateClosed',
        '_info'                => '_info'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id'                   => 'setId',
        'billing_log_id'       => 'setBillingLogId',
        'location_id'          => 'setLocationId',
        'department_id'        => 'setDepartmentId',
        'company'              => 'setCompany',
        'account_number'       => 'setAccountNumber',
        'bill_to_company'      => 'setBillToCompany',
        'bill_to_site'         => 'setBillToSite',
        'ship_to_company'      => 'setShipToCompany',
        'ship_to_site'         => 'setShipToSite',
        'invoice_number'       => 'setInvoiceNumber',
        'invoice_date'         => 'setInvoiceDate',
        'invoice_type'         => 'setInvoiceType',
        'description'          => 'setDescription',
        'billing_terms'        => 'setBillingTerms',
        'due_days'             => 'setDueDays',
        'due_date'             => 'setDueDate',
        'currency'             => 'setCurrency',
        'sub_total'            => 'setSubTotal',
        'total'                => 'setTotal',
        'invoice_taxable_flag' => 'setInvoiceTaxableFlag',
        'tax_code'             => 'setTaxCode',
        'avalara_tax_flag'     => 'setAvalaraTaxFlag',
        'item_taxable_flag'    => 'setItemTaxableFlag',
        'sales_tax_amount'     => 'setSalesTaxAmount',
        'state_tax_flag'       => 'setStateTaxFlag',
        'state_tax_xref'       => 'setStateTaxXref',
        'state_tax_amount'     => 'setStateTaxAmount',
        'county_tax_flag'      => 'setCountyTaxFlag',
        'county_tax_xref'      => 'setCountyTaxXref',
        'county_tax_amount'    => 'setCountyTaxAmount',
        'city_tax_flag'        => 'setCityTaxFlag',
        'city_tax_xref'        => 'setCityTaxXref',
        'city_tax_amount'      => 'setCityTaxAmount',
        'country_tax_flag'     => 'setCountryTaxFlag',
        'country_tax_xref'     => 'setCountryTaxXref',
        'country_tax_amount'   => 'setCountryTaxAmount',
        'composite_tax_flag'   => 'setCompositeTaxFlag',
        'composite_tax_xref'   => 'setCompositeTaxXref',
        'composite_tax_amount' => 'setCompositeTaxAmount',
        'created_by'           => 'setCreatedBy',
        'date_closed'          => 'setDateClosed',
        '_info'                => 'setInfo'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id'                   => 'getId',
        'billing_log_id'       => 'getBillingLogId',
        'location_id'          => 'getLocationId',
        'department_id'        => 'getDepartmentId',
        'company'              => 'getCompany',
        'account_number'       => 'getAccountNumber',
        'bill_to_company'      => 'getBillToCompany',
        'bill_to_site'         => 'getBillToSite',
        'ship_to_company'      => 'getShipToCompany',
        'ship_to_site'         => 'getShipToSite',
        'invoice_number'       => 'getInvoiceNumber',
        'invoice_date'         => 'getInvoiceDate',
        'invoice_type'         => 'getInvoiceType',
        'description'          => 'getDescription',
        'billing_terms'        => 'getBillingTerms',
        'due_days'             => 'getDueDays',
        'due_date'             => 'getDueDate',
        'currency'             => 'getCurrency',
        'sub_total'            => 'getSubTotal',
        'total'                => 'getTotal',
        'invoice_taxable_flag' => 'getInvoiceTaxableFlag',
        'tax_code'             => 'getTaxCode',
        'avalara_tax_flag'     => 'getAvalaraTaxFlag',
        'item_taxable_flag'    => 'getItemTaxableFlag',
        'sales_tax_amount'     => 'getSalesTaxAmount',
        'state_tax_flag'       => 'getStateTaxFlag',
        'state_tax_xref'       => 'getStateTaxXref',
        'state_tax_amount'     => 'getStateTaxAmount',
        'county_tax_flag'      => 'getCountyTaxFlag',
        'county_tax_xref'      => 'getCountyTaxXref',
        'county_tax_amount'    => 'getCountyTaxAmount',
        'city_tax_flag'        => 'getCityTaxFlag',
        'city_tax_xref'        => 'getCityTaxXref',
        'city_tax_amount'      => 'getCityTaxAmount',
        'country_tax_flag'     => 'getCountryTaxFlag',
        'country_tax_xref'     => 'getCountryTaxXref',
        'country_tax_amount'   => 'getCountryTaxAmount',
        'composite_tax_flag'   => 'getCompositeTaxFlag',
        'composite_tax_xref'   => 'getCompositeTaxXref',
        'composite_tax_amount' => 'getCompositeTaxAmount',
        'created_by'           => 'getCreatedBy',
        'date_closed'          => 'getDateClosed',
        '_info'                => 'getInfo'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const INVOICE_TYPE_AGREEMENT = 'Agreement';
    const INVOICE_TYPE_CREDIT_MEMO = 'CreditMemo';
    const INVOICE_TYPE_DOWN_PAYMENT = 'DownPayment';
    const INVOICE_TYPE_MISCELLANEOUS = 'Miscellaneous';
    const INVOICE_TYPE_PROGRESS = 'Progress';
    const INVOICE_TYPE_STANDARD = 'Standard';


    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getInvoiceTypeAllowableValues()
    {
        return [
            self::INVOICE_TYPE_AGREEMENT,
            self::INVOICE_TYPE_CREDIT_MEMO,
            self::INVOICE_TYPE_DOWN_PAYMENT,
            self::INVOICE_TYPE_MISCELLANEOUS,
            self::INVOICE_TYPE_PROGRESS,
            self::INVOICE_TYPE_STANDARD,
        ];
    }


    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param  mixed[]  $data  Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['billing_log_id'] = isset($data['billing_log_id']) ? $data['billing_log_id'] : null;
        $this->container['location_id'] = isset($data['location_id']) ? $data['location_id'] : null;
        $this->container['department_id'] = isset($data['department_id']) ? $data['department_id'] : null;
        $this->container['company'] = isset($data['company']) ? $data['company'] : null;
        $this->container['account_number'] = isset($data['account_number']) ? $data['account_number'] : null;
        $this->container['bill_to_company'] = isset($data['bill_to_company']) ? $data['bill_to_company'] : null;
        $this->container['bill_to_site'] = isset($data['bill_to_site']) ? $data['bill_to_site'] : null;
        $this->container['ship_to_company'] = isset($data['ship_to_company']) ? $data['ship_to_company'] : null;
        $this->container['ship_to_site'] = isset($data['ship_to_site']) ? $data['ship_to_site'] : null;
        $this->container['invoice_number'] = isset($data['invoice_number']) ? $data['invoice_number'] : null;
        $this->container['invoice_date'] = isset($data['invoice_date']) ? $data['invoice_date'] : null;
        $this->container['invoice_type'] = isset($data['invoice_type']) ? $data['invoice_type'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['billing_terms'] = isset($data['billing_terms']) ? $data['billing_terms'] : null;
        $this->container['due_days'] = isset($data['due_days']) ? $data['due_days'] : null;
        $this->container['due_date'] = isset($data['due_date']) ? $data['due_date'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['sub_total'] = isset($data['sub_total']) ? $data['sub_total'] : null;
        $this->container['total'] = isset($data['total']) ? $data['total'] : null;
        $this->container['invoice_taxable_flag'] = isset($data['invoice_taxable_flag']) ? $data['invoice_taxable_flag'] : null;
        $this->container['tax_code'] = isset($data['tax_code']) ? $data['tax_code'] : null;
        $this->container['avalara_tax_flag'] = isset($data['avalara_tax_flag']) ? $data['avalara_tax_flag'] : null;
        $this->container['item_taxable_flag'] = isset($data['item_taxable_flag']) ? $data['item_taxable_flag'] : null;
        $this->container['sales_tax_amount'] = isset($data['sales_tax_amount']) ? $data['sales_tax_amount'] : null;
        $this->container['state_tax_flag'] = isset($data['state_tax_flag']) ? $data['state_tax_flag'] : null;
        $this->container['state_tax_xref'] = isset($data['state_tax_xref']) ? $data['state_tax_xref'] : null;
        $this->container['state_tax_amount'] = isset($data['state_tax_amount']) ? $data['state_tax_amount'] : null;
        $this->container['county_tax_flag'] = isset($data['county_tax_flag']) ? $data['county_tax_flag'] : null;
        $this->container['county_tax_xref'] = isset($data['county_tax_xref']) ? $data['county_tax_xref'] : null;
        $this->container['county_tax_amount'] = isset($data['county_tax_amount']) ? $data['county_tax_amount'] : null;
        $this->container['city_tax_flag'] = isset($data['city_tax_flag']) ? $data['city_tax_flag'] : null;
        $this->container['city_tax_xref'] = isset($data['city_tax_xref']) ? $data['city_tax_xref'] : null;
        $this->container['city_tax_amount'] = isset($data['city_tax_amount']) ? $data['city_tax_amount'] : null;
        $this->container['country_tax_flag'] = isset($data['country_tax_flag']) ? $data['country_tax_flag'] : null;
        $this->container['country_tax_xref'] = isset($data['country_tax_xref']) ? $data['country_tax_xref'] : null;
        $this->container['country_tax_amount'] = isset($data['country_tax_amount']) ? $data['country_tax_amount'] : null;
        $this->container['composite_tax_flag'] = isset($data['composite_tax_flag']) ? $data['composite_tax_flag'] : null;
        $this->container['composite_tax_xref'] = isset($data['composite_tax_xref']) ? $data['composite_tax_xref'] : null;
        $this->container['composite_tax_amount'] = isset($data['composite_tax_amount']) ? $data['composite_tax_amount'] : null;
        $this->container['created_by'] = isset($data['created_by']) ? $data['created_by'] : null;
        $this->container['date_closed'] = isset($data['date_closed']) ? $data['date_closed'] : null;
        $this->container['_info'] = isset($data['_info']) ? $data['_info'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        $allowed_values = ["Agreement", "CreditMemo", "DownPayment", "Miscellaneous", "Progress", "Standard"];
        if (!in_array($this->container['invoice_type'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'invoice_type', must be one of #{allowed_values}.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        $allowed_values = ["Agreement", "CreditMemo", "DownPayment", "Miscellaneous", "Progress", "Standard"];
        if (!in_array($this->container['invoice_type'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param  int  $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets billing_log_id
     * @return int
     */
    public function getBillingLogId()
    {
        return $this->container['billing_log_id'];
    }

    /**
     * Sets billing_log_id
     * @param  int  $billing_log_id
     * @return $this
     */
    public function setBillingLogId($billing_log_id)
    {
        $this->container['billing_log_id'] = $billing_log_id;

        return $this;
    }

    /**
     * Gets location_id
     * @return int
     */
    public function getLocationId()
    {
        return $this->container['location_id'];
    }

    /**
     * Sets location_id
     * @param  int  $location_id
     * @return $this
     */
    public function setLocationId($location_id)
    {
        $this->container['location_id'] = $location_id;

        return $this;
    }

    /**
     * Gets department_id
     * @return int
     */
    public function getDepartmentId()
    {
        return $this->container['department_id'];
    }

    /**
     * Sets department_id
     * @param  int  $department_id
     * @return $this
     */
    public function setDepartmentId($department_id)
    {
        $this->container['department_id'] = $department_id;

        return $this;
    }

    /**
     * Gets company
     * @return \Spinen\ConnectWise\Clients\Finance\Model\CompanyReference
     */
    public function getCompany()
    {
        return $this->container['company'];
    }

    /**
     * Sets company
     * @param  \Spinen\ConnectWise\Clients\Finance\Model\CompanyReference  $company
     * @return $this
     */
    public function setCompany($company)
    {
        $this->container['company'] = $company;

        return $this;
    }

    /**
     * Gets account_number
     * @return string
     */
    public function getAccountNumber()
    {
        return $this->container['account_number'];
    }

    /**
     * Sets account_number
     * @param  string  $account_number
     * @return $this
     */
    public function setAccountNumber($account_number)
    {
        $this->container['account_number'] = $account_number;

        return $this;
    }

    /**
     * Gets bill_to_company
     * @return \Spinen\ConnectWise\Clients\Finance\Model\CompanyReference
     */
    public function getBillToCompany()
    {
        return $this->container['bill_to_company'];
    }

    /**
     * Sets bill_to_company
     * @param  \Spinen\ConnectWise\Clients\Finance\Model\CompanyReference  $bill_to_company
     * @return $this
     */
    public function setBillToCompany($bill_to_company)
    {
        $this->container['bill_to_company'] = $bill_to_company;

        return $this;
    }

    /**
     * Gets bill_to_site
     * @return \Spinen\ConnectWise\Clients\Finance\Model\SiteReference
     */
    public function getBillToSite()
    {
        return $this->container['bill_to_site'];
    }

    /**
     * Sets bill_to_site
     * @param  \Spinen\ConnectWise\Clients\Finance\Model\SiteReference  $bill_to_site
     * @return $this
     */
    public function setBillToSite($bill_to_site)
    {
        $this->container['bill_to_site'] = $bill_to_site;

        return $this;
    }

    /**
     * Gets ship_to_company
     * @return \Spinen\ConnectWise\Clients\Finance\Model\CompanyReference
     */
    public function getShipToCompany()
    {
        return $this->container['ship_to_company'];
    }

    /**
     * Sets ship_to_company
     * @param  \Spinen\ConnectWise\Clients\Finance\Model\CompanyReference  $ship_to_company
     * @return $this
     */
    public function setShipToCompany($ship_to_company)
    {
        $this->container['ship_to_company'] = $ship_to_company;

        return $this;
    }

    /**
     * Gets ship_to_site
     * @return \Spinen\ConnectWise\Clients\Finance\Model\SiteReference
     */
    public function getShipToSite()
    {
        return $this->container['ship_to_site'];
    }

    /**
     * Sets ship_to_site
     * @param  \Spinen\ConnectWise\Clients\Finance\Model\SiteReference  $ship_to_site
     * @return $this
     */
    public function setShipToSite($ship_to_site)
    {
        $this->container['ship_to_site'] = $ship_to_site;

        return $this;
    }

    /**
     * Gets invoice_number
     * @return string
     */
    public function getInvoiceNumber()
    {
        return $this->container['invoice_number'];
    }

    /**
     * Sets invoice_number
     * @param  string  $invoice_number
     * @return $this
     */
    public function setInvoiceNumber($invoice_number)
    {
        $this->container['invoice_number'] = $invoice_number;

        return $this;
    }

    /**
     * Gets invoice_date
     * @return \DateTime
     */
    public function getInvoiceDate()
    {
        return $this->container['invoice_date'];
    }

    /**
     * Sets invoice_date
     * @param  \DateTime  $invoice_date
     * @return $this
     */
    public function setInvoiceDate($invoice_date)
    {
        $this->container['invoice_date'] = $invoice_date;

        return $this;
    }

    /**
     * Gets invoice_type
     * @return string
     */
    public function getInvoiceType()
    {
        return $this->container['invoice_type'];
    }

    /**
     * Sets invoice_type
     * @param  string  $invoice_type
     * @return $this
     */
    public function setInvoiceType($invoice_type)
    {
        $allowed_values = array('Agreement', 'CreditMemo', 'DownPayment', 'Miscellaneous', 'Progress', 'Standard');
        if (!is_null($invoice_type) && (!in_array($invoice_type, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'invoice_type', must be one of 'Agreement', 'CreditMemo', 'DownPayment', 'Miscellaneous', 'Progress', 'Standard'");
        }
        $this->container['invoice_type'] = $invoice_type;

        return $this;
    }

    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     * @param  string  $description
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets billing_terms
     * @return \Spinen\ConnectWise\Clients\Finance\Model\BillingTermsReference
     */
    public function getBillingTerms()
    {
        return $this->container['billing_terms'];
    }

    /**
     * Sets billing_terms
     * @param  \Spinen\ConnectWise\Clients\Finance\Model\BillingTermsReference  $billing_terms
     * @return $this
     */
    public function setBillingTerms($billing_terms)
    {
        $this->container['billing_terms'] = $billing_terms;

        return $this;
    }

    /**
     * Gets due_days
     * @return string
     */
    public function getDueDays()
    {
        return $this->container['due_days'];
    }

    /**
     * Sets due_days
     * @param  string  $due_days
     * @return $this
     */
    public function setDueDays($due_days)
    {
        $this->container['due_days'] = $due_days;

        return $this;
    }

    /**
     * Gets due_date
     * @return \DateTime
     */
    public function getDueDate()
    {
        return $this->container['due_date'];
    }

    /**
     * Sets due_date
     * @param  \DateTime  $due_date
     * @return $this
     */
    public function setDueDate($due_date)
    {
        $this->container['due_date'] = $due_date;

        return $this;
    }

    /**
     * Gets currency
     * @return \Spinen\ConnectWise\Clients\Finance\Model\CurrencyReference
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     * @param  \Spinen\ConnectWise\Clients\Finance\Model\CurrencyReference  $currency
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets sub_total
     * @return double
     */
    public function getSubTotal()
    {
        return $this->container['sub_total'];
    }

    /**
     * Sets sub_total
     * @param  double  $sub_total
     * @return $this
     */
    public function setSubTotal($sub_total)
    {
        $this->container['sub_total'] = $sub_total;

        return $this;
    }

    /**
     * Gets total
     * @return double
     */
    public function getTotal()
    {
        return $this->container['total'];
    }

    /**
     * Sets total
     * @param  double  $total
     * @return $this
     */
    public function setTotal($total)
    {
        $this->container['total'] = $total;

        return $this;
    }

    /**
     * Gets invoice_taxable_flag
     * @return bool
     */
    public function getInvoiceTaxableFlag()
    {
        return $this->container['invoice_taxable_flag'];
    }

    /**
     * Sets invoice_taxable_flag
     * @param  bool  $invoice_taxable_flag
     * @return $this
     */
    public function setInvoiceTaxableFlag($invoice_taxable_flag)
    {
        $this->container['invoice_taxable_flag'] = $invoice_taxable_flag;

        return $this;
    }

    /**
     * Gets tax_code
     * @return \Spinen\ConnectWise\Clients\Finance\Model\TaxCodeReference
     */
    public function getTaxCode()
    {
        return $this->container['tax_code'];
    }

    /**
     * Sets tax_code
     * @param  \Spinen\ConnectWise\Clients\Finance\Model\TaxCodeReference  $tax_code
     * @return $this
     */
    public function setTaxCode($tax_code)
    {
        $this->container['tax_code'] = $tax_code;

        return $this;
    }

    /**
     * Gets avalara_tax_flag
     * @return bool
     */
    public function getAvalaraTaxFlag()
    {
        return $this->container['avalara_tax_flag'];
    }

    /**
     * Sets avalara_tax_flag
     * @param  bool  $avalara_tax_flag  Used to determine if Avalara tax is enabled.
     * @return $this
     */
    public function setAvalaraTaxFlag($avalara_tax_flag)
    {
        $this->container['avalara_tax_flag'] = $avalara_tax_flag;

        return $this;
    }

    /**
     * Gets item_taxable_flag
     * @return bool
     */
    public function getItemTaxableFlag()
    {
        return $this->container['item_taxable_flag'];
    }

    /**
     * Sets item_taxable_flag
     * @param  bool  $item_taxable_flag
     * @return $this
     */
    public function setItemTaxableFlag($item_taxable_flag)
    {
        $this->container['item_taxable_flag'] = $item_taxable_flag;

        return $this;
    }

    /**
     * Gets sales_tax_amount
     * @return double
     */
    public function getSalesTaxAmount()
    {
        return $this->container['sales_tax_amount'];
    }

    /**
     * Sets sales_tax_amount
     * @param  double  $sales_tax_amount
     * @return $this
     */
    public function setSalesTaxAmount($sales_tax_amount)
    {
        $this->container['sales_tax_amount'] = $sales_tax_amount;

        return $this;
    }

    /**
     * Gets state_tax_flag
     * @return bool
     */
    public function getStateTaxFlag()
    {
        return $this->container['state_tax_flag'];
    }

    /**
     * Sets state_tax_flag
     * @param  bool  $state_tax_flag  Set to true if transaction is taxable at the state level.
     * @return $this
     */
    public function setStateTaxFlag($state_tax_flag)
    {
        $this->container['state_tax_flag'] = $state_tax_flag;

        return $this;
    }

    /**
     * Gets state_tax_xref
     * @return string
     */
    public function getStateTaxXref()
    {
        return $this->container['state_tax_xref'];
    }

    /**
     * Sets state_tax_xref
     * @param  string  $state_tax_xref
     * @return $this
     */
    public function setStateTaxXref($state_tax_xref)
    {
        $this->container['state_tax_xref'] = $state_tax_xref;

        return $this;
    }

    /**
     * Gets state_tax_amount
     * @return double
     */
    public function getStateTaxAmount()
    {
        return $this->container['state_tax_amount'];
    }

    /**
     * Sets state_tax_amount
     * @param  double  $state_tax_amount
     * @return $this
     */
    public function setStateTaxAmount($state_tax_amount)
    {
        $this->container['state_tax_amount'] = $state_tax_amount;

        return $this;
    }

    /**
     * Gets county_tax_flag
     * @return bool
     */
    public function getCountyTaxFlag()
    {
        return $this->container['county_tax_flag'];
    }

    /**
     * Sets county_tax_flag
     * @param  bool  $county_tax_flag  Set to true if transaction is taxable at the county level.
     * @return $this
     */
    public function setCountyTaxFlag($county_tax_flag)
    {
        $this->container['county_tax_flag'] = $county_tax_flag;

        return $this;
    }

    /**
     * Gets county_tax_xref
     * @return string
     */
    public function getCountyTaxXref()
    {
        return $this->container['county_tax_xref'];
    }

    /**
     * Sets county_tax_xref
     * @param  string  $county_tax_xref
     * @return $this
     */
    public function setCountyTaxXref($county_tax_xref)
    {
        $this->container['county_tax_xref'] = $county_tax_xref;

        return $this;
    }

    /**
     * Gets county_tax_amount
     * @return double
     */
    public function getCountyTaxAmount()
    {
        return $this->container['county_tax_amount'];
    }

    /**
     * Sets county_tax_amount
     * @param  double  $county_tax_amount
     * @return $this
     */
    public function setCountyTaxAmount($county_tax_amount)
    {
        $this->container['county_tax_amount'] = $county_tax_amount;

        return $this;
    }

    /**
     * Gets city_tax_flag
     * @return bool
     */
    public function getCityTaxFlag()
    {
        return $this->container['city_tax_flag'];
    }

    /**
     * Sets city_tax_flag
     * @param  bool  $city_tax_flag  Set to true if transaction is taxable at the city level.
     * @return $this
     */
    public function setCityTaxFlag($city_tax_flag)
    {
        $this->container['city_tax_flag'] = $city_tax_flag;

        return $this;
    }

    /**
     * Gets city_tax_xref
     * @return string
     */
    public function getCityTaxXref()
    {
        return $this->container['city_tax_xref'];
    }

    /**
     * Sets city_tax_xref
     * @param  string  $city_tax_xref
     * @return $this
     */
    public function setCityTaxXref($city_tax_xref)
    {
        $this->container['city_tax_xref'] = $city_tax_xref;

        return $this;
    }

    /**
     * Gets city_tax_amount
     * @return double
     */
    public function getCityTaxAmount()
    {
        return $this->container['city_tax_amount'];
    }

    /**
     * Sets city_tax_amount
     * @param  double  $city_tax_amount
     * @return $this
     */
    public function setCityTaxAmount($city_tax_amount)
    {
        $this->container['city_tax_amount'] = $city_tax_amount;

        return $this;
    }

    /**
     * Gets country_tax_flag
     * @return bool
     */
    public function getCountryTaxFlag()
    {
        return $this->container['country_tax_flag'];
    }

    /**
     * Sets country_tax_flag
     * @param  bool  $country_tax_flag  Set to true if transaction is taxable at the country level.
     * @return $this
     */
    public function setCountryTaxFlag($country_tax_flag)
    {
        $this->container['country_tax_flag'] = $country_tax_flag;

        return $this;
    }

    /**
     * Gets country_tax_xref
     * @return string
     */
    public function getCountryTaxXref()
    {
        return $this->container['country_tax_xref'];
    }

    /**
     * Sets country_tax_xref
     * @param  string  $country_tax_xref
     * @return $this
     */
    public function setCountryTaxXref($country_tax_xref)
    {
        $this->container['country_tax_xref'] = $country_tax_xref;

        return $this;
    }

    /**
     * Gets country_tax_amount
     * @return double
     */
    public function getCountryTaxAmount()
    {
        return $this->container['country_tax_amount'];
    }

    /**
     * Sets country_tax_amount
     * @param  double  $country_tax_amount
     * @return $this
     */
    public function setCountryTaxAmount($country_tax_amount)
    {
        $this->container['country_tax_amount'] = $country_tax_amount;

        return $this;
    }

    /**
     * Gets composite_tax_flag
     * @return bool
     */
    public function getCompositeTaxFlag()
    {
        return $this->container['composite_tax_flag'];
    }

    /**
     * Sets composite_tax_flag
     * @param  bool  $composite_tax_flag  Set to true if transaction is taxable at the composite level.
     * @return $this
     */
    public function setCompositeTaxFlag($composite_tax_flag)
    {
        $this->container['composite_tax_flag'] = $composite_tax_flag;

        return $this;
    }

    /**
     * Gets composite_tax_xref
     * @return string
     */
    public function getCompositeTaxXref()
    {
        return $this->container['composite_tax_xref'];
    }

    /**
     * Sets composite_tax_xref
     * @param  string  $composite_tax_xref
     * @return $this
     */
    public function setCompositeTaxXref($composite_tax_xref)
    {
        $this->container['composite_tax_xref'] = $composite_tax_xref;

        return $this;
    }

    /**
     * Gets composite_tax_amount
     * @return double
     */
    public function getCompositeTaxAmount()
    {
        return $this->container['composite_tax_amount'];
    }

    /**
     * Sets composite_tax_amount
     * @param  double  $composite_tax_amount
     * @return $this
     */
    public function setCompositeTaxAmount($composite_tax_amount)
    {
        $this->container['composite_tax_amount'] = $composite_tax_amount;

        return $this;
    }

    /**
     * Gets created_by
     * @return string
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     * @param  string  $created_by
     * @return $this
     */
    public function setCreatedBy($created_by)
    {
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets date_closed
     * @return \DateTime
     */
    public function getDateClosed()
    {
        return $this->container['date_closed'];
    }

    /**
     * Sets date_closed
     * @param  \DateTime  $date_closed
     * @return $this
     */
    public function setDateClosed($date_closed)
    {
        $this->container['date_closed'] = $date_closed;

        return $this;
    }

    /**
     * Gets _info
     * @return \Spinen\ConnectWise\Clients\Finance\Model\Metadata
     */
    public function getInfo()
    {
        return $this->container['_info'];
    }

    /**
     * Sets _info
     * @param  \Spinen\ConnectWise\Clients\Finance\Model\Metadata  $_info  Metadata of the entity
     * @return $this
     */
    public function setInfo($_info)
    {
        $this->container['_info'] = $_info;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer  $offset  Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer  $offset  Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer  $offset  Offset
     * @param  mixed  $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer  $offset  Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Spinen\ConnectWise\Clients\Finance\ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT);
        }

        return json_encode(\Spinen\ConnectWise\Clients\Finance\ObjectSerializer::sanitizeForSerialization($this));
    }
}


