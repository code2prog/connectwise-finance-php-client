<?php
/**
 * Currency
 *
 * PHP version 5
 *
 * @category Class
 * @package  Spinen\ConnectWise\Clients\Finance
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Finance API
 *
 * ConnectWise Finance API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: platform@connectwise.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Spinen\ConnectWise\Clients\Finance\Model;

use \ArrayAccess;

/**
 * Currency Class Doc Comment
 *
 * @category    Class
 */

/**
 * @package     Spinen\ConnectWise\Clients\Finance
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Currency implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     * @var string
     */
    protected static $swaggerModelName = 'Currency';

    /**
     * Array of property to type mappings. Used for (de)serialization
     * @var string[]
     */
    protected static $swaggerTypes = [
        'id'                  => 'int',
        'currency_identifier' => 'string',
        'name'                => 'string',
        'symbol'              => 'string',
        'display_id_flag'     => 'bool',
        'display_symbol_flag' => 'bool',
        'iso_code'            => 'string',
        '_info'               => '\Spinen\ConnectWise\Clients\Finance\Model\Metadata'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id'                  => 'id',
        'currency_identifier' => 'currencyIdentifier',
        'name'                => 'name',
        'symbol'              => 'symbol',
        'display_id_flag'     => 'displayIdFlag',
        'display_symbol_flag' => 'displaySymbolFlag',
        'iso_code'            => 'isoCode',
        '_info'               => '_info'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id'                  => 'setId',
        'currency_identifier' => 'setCurrencyIdentifier',
        'name'                => 'setName',
        'symbol'              => 'setSymbol',
        'display_id_flag'     => 'setDisplayIdFlag',
        'display_symbol_flag' => 'setDisplaySymbolFlag',
        'iso_code'            => 'setIsoCode',
        '_info'               => 'setInfo'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id'                  => 'getId',
        'currency_identifier' => 'getCurrencyIdentifier',
        'name'                => 'getName',
        'symbol'              => 'getSymbol',
        'display_id_flag'     => 'getDisplayIdFlag',
        'display_symbol_flag' => 'getDisplaySymbolFlag',
        'iso_code'            => 'getIsoCode',
        '_info'               => 'getInfo'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }


    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param  mixed[]  $data  Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['currency_identifier'] = isset($data['currency_identifier']) ? $data['currency_identifier'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['symbol'] = isset($data['symbol']) ? $data['symbol'] : null;
        $this->container['display_id_flag'] = isset($data['display_id_flag']) ? $data['display_id_flag'] : null;
        $this->container['display_symbol_flag'] = isset($data['display_symbol_flag']) ? $data['display_symbol_flag'] : null;
        $this->container['iso_code'] = isset($data['iso_code']) ? $data['iso_code'] : null;
        $this->container['_info'] = isset($data['_info']) ? $data['_info'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if ($this->container['currency_identifier'] === null) {
            $invalid_properties[] = "'currency_identifier' can't be null";
        }
        if ((strlen($this->container['currency_identifier']) > 10)) {
            $invalid_properties[] = "invalid value for 'currency_identifier', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['name']) && (strlen($this->container['name']) > 50)) {
            $invalid_properties[] = "invalid value for 'name', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['symbol']) && (strlen($this->container['symbol']) > 10)) {
            $invalid_properties[] = "invalid value for 'symbol', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['iso_code']) && (strlen($this->container['iso_code']) > 3)) {
            $invalid_properties[] = "invalid value for 'iso_code', the character length must be smaller than or equal to 3.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['currency_identifier'] === null) {
            return false;
        }
        if (strlen($this->container['currency_identifier']) > 10) {
            return false;
        }
        if (strlen($this->container['name']) > 50) {
            return false;
        }
        if (strlen($this->container['symbol']) > 10) {
            return false;
        }
        if (strlen($this->container['iso_code']) > 3) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param  int  $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets currency_identifier
     * @return string
     */
    public function getCurrencyIdentifier()
    {
        return $this->container['currency_identifier'];
    }

    /**
     * Sets currency_identifier
     * @param  string  $currency_identifier
     * @return $this
     */
    public function setCurrencyIdentifier($currency_identifier)
    {
        if ((strlen($currency_identifier) > 10)) {
            throw new \InvalidArgumentException('invalid length for $currency_identifier when calling Currency., must be smaller than or equal to 10.');
        }

        $this->container['currency_identifier'] = $currency_identifier;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param  string  $name
     * @return $this
     */
    public function setName($name)
    {
        if (!is_null($name) && (strlen($name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $name when calling Currency., must be smaller than or equal to 50.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets symbol
     * @return string
     */
    public function getSymbol()
    {
        return $this->container['symbol'];
    }

    /**
     * Sets symbol
     * @param  string  $symbol
     * @return $this
     */
    public function setSymbol($symbol)
    {
        if (!is_null($symbol) && (strlen($symbol) > 10)) {
            throw new \InvalidArgumentException('invalid length for $symbol when calling Currency., must be smaller than or equal to 10.');
        }

        $this->container['symbol'] = $symbol;

        return $this;
    }

    /**
     * Gets display_id_flag
     * @return bool
     */
    public function getDisplayIdFlag()
    {
        return $this->container['display_id_flag'];
    }

    /**
     * Sets display_id_flag
     * @param  bool  $display_id_flag
     * @return $this
     */
    public function setDisplayIdFlag($display_id_flag)
    {
        $this->container['display_id_flag'] = $display_id_flag;

        return $this;
    }

    /**
     * Gets display_symbol_flag
     * @return bool
     */
    public function getDisplaySymbolFlag()
    {
        return $this->container['display_symbol_flag'];
    }

    /**
     * Sets display_symbol_flag
     * @param  bool  $display_symbol_flag
     * @return $this
     */
    public function setDisplaySymbolFlag($display_symbol_flag)
    {
        $this->container['display_symbol_flag'] = $display_symbol_flag;

        return $this;
    }

    /**
     * Gets iso_code
     * @return string
     */
    public function getIsoCode()
    {
        return $this->container['iso_code'];
    }

    /**
     * Sets iso_code
     * @param  string  $iso_code
     * @return $this
     */
    public function setIsoCode($iso_code)
    {
        if (!is_null($iso_code) && (strlen($iso_code) > 3)) {
            throw new \InvalidArgumentException('invalid length for $iso_code when calling Currency., must be smaller than or equal to 3.');
        }

        $this->container['iso_code'] = $iso_code;

        return $this;
    }

    /**
     * Gets _info
     * @return \Spinen\ConnectWise\Clients\Finance\Model\Metadata
     */
    public function getInfo()
    {
        return $this->container['_info'];
    }

    /**
     * Sets _info
     * @param  \Spinen\ConnectWise\Clients\Finance\Model\Metadata  $_info  Metadata of the entity
     * @return $this
     */
    public function setInfo($_info)
    {
        $this->container['_info'] = $_info;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer  $offset  Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer  $offset  Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer  $offset  Offset
     * @param  mixed  $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer  $offset  Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Spinen\ConnectWise\Clients\Finance\ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT);
        }

        return json_encode(\Spinen\ConnectWise\Clients\Finance\ObjectSerializer::sanitizeForSerialization($this));
    }
}


