<?php
/**
 * UnpostedExpense
 *
 * PHP version 5
 *
 * @category Class
 * @package  Spinen\ConnectWise\Clients\Finance
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Finance API
 *
 * ConnectWise Finance API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: platform@connectwise.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Spinen\ConnectWise\Clients\Finance\Spinen\ConnectWise\Clients\Finance\Model;

use \ArrayAccess;

/**
 * UnpostedExpense Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Spinen\ConnectWise\Clients\Finance
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class UnpostedExpense implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'UnpostedExpense';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'location_id' => 'int',
        'department_id' => 'int',
        'company' => '\Spinen\ConnectWise\Clients\Finance\Spinen\ConnectWise\Clients\Finance\Model\CompanyReference',
        'account_number' => 'string',
        'credit_account' => 'string',
        'expense_detail_id' => 'int',
        'expense_type' => '\Spinen\ConnectWise\Clients\Finance\Spinen\ConnectWise\Clients\Finance\Model\ExpenseTypeReference',
        'classification' => 'string',
        'gl_type' => 'string',
        'member' => '\Spinen\ConnectWise\Clients\Finance\Spinen\ConnectWise\Clients\Finance\Model\MemberReference',
        'date_expense' => '\DateTime',
        'charge_code' => '\Spinen\ConnectWise\Clients\Finance\Spinen\ConnectWise\Clients\Finance\Model\ChargeCodeReference',
        'charge_description' => 'string',
        'in_policy' => 'bool',
        'payment_method' => '\Spinen\ConnectWise\Clients\Finance\Spinen\ConnectWise\Clients\Finance\Model\PaymentMethodReference',
        'currency' => '\Spinen\ConnectWise\Clients\Finance\Spinen\ConnectWise\Clients\Finance\Model\CurrencyReference',
        'total' => 'double',
        'billable_amount' => 'double',
        'non_billable_amount' => 'double',
        'agreement' => '\Spinen\ConnectWise\Clients\Finance\Spinen\ConnectWise\Clients\Finance\Model\AgreementReference',
        'agreement_amount_covered' => 'double',
        'ticket' => '\Spinen\ConnectWise\Clients\Finance\Spinen\ConnectWise\Clients\Finance\Model\TicketReference',
        'project' => '\Spinen\ConnectWise\Clients\Finance\Spinen\ConnectWise\Clients\Finance\Model\ProjectReference',
        'project_phase' => '\Spinen\ConnectWise\Clients\Finance\Spinen\ConnectWise\Clients\Finance\Model\ProjectPhaseReference',
        'tax_code' => '\Spinen\ConnectWise\Clients\Finance\Spinen\ConnectWise\Clients\Finance\Model\TaxCodeReference',
        'avalara_tax_flag' => 'bool',
        'item_taxable_flag' => 'bool',
        'sales_tax_amount' => 'double',
        'state_tax_flag' => 'bool',
        'state_tax_xref' => 'string',
        'state_tax_amount' => 'double',
        'county_tax_flag' => 'bool',
        'county_tax_xref' => 'string',
        'county_tax_amount' => 'double',
        'city_tax_flag' => 'bool',
        'city_tax_xref' => 'string',
        'city_tax_amount' => 'double',
        'country_tax_flag' => 'bool',
        'country_tax_xref' => 'string',
        'country_tax_amount' => 'double',
        'composite_tax_flag' => 'bool',
        'composite_tax_xref' => 'string',
        'composite_tax_amount' => 'double',
        'date_closed' => '\DateTime',
        '_info' => '\Spinen\ConnectWise\Clients\Finance\Spinen\ConnectWise\Clients\Finance\Model\Metadata'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'location_id' => 'locationId',
        'department_id' => 'departmentId',
        'company' => 'company',
        'account_number' => 'accountNumber',
        'credit_account' => 'creditAccount',
        'expense_detail_id' => 'expenseDetailId',
        'expense_type' => 'expenseType',
        'classification' => 'classification',
        'gl_type' => 'glType',
        'member' => 'member',
        'date_expense' => 'dateExpense',
        'charge_code' => 'chargeCode',
        'charge_description' => 'chargeDescription',
        'in_policy' => 'inPolicy',
        'payment_method' => 'paymentMethod',
        'currency' => 'currency',
        'total' => 'total',
        'billable_amount' => 'billableAmount',
        'non_billable_amount' => 'nonBillableAmount',
        'agreement' => 'agreement',
        'agreement_amount_covered' => 'agreementAmountCovered',
        'ticket' => 'ticket',
        'project' => 'project',
        'project_phase' => 'projectPhase',
        'tax_code' => 'taxCode',
        'avalara_tax_flag' => 'avalaraTaxFlag',
        'item_taxable_flag' => 'itemTaxableFlag',
        'sales_tax_amount' => 'salesTaxAmount',
        'state_tax_flag' => 'stateTaxFlag',
        'state_tax_xref' => 'stateTaxXref',
        'state_tax_amount' => 'stateTaxAmount',
        'county_tax_flag' => 'countyTaxFlag',
        'county_tax_xref' => 'countyTaxXref',
        'county_tax_amount' => 'countyTaxAmount',
        'city_tax_flag' => 'cityTaxFlag',
        'city_tax_xref' => 'cityTaxXref',
        'city_tax_amount' => 'cityTaxAmount',
        'country_tax_flag' => 'countryTaxFlag',
        'country_tax_xref' => 'countryTaxXref',
        'country_tax_amount' => 'countryTaxAmount',
        'composite_tax_flag' => 'compositeTaxFlag',
        'composite_tax_xref' => 'compositeTaxXref',
        'composite_tax_amount' => 'compositeTaxAmount',
        'date_closed' => 'dateClosed',
        '_info' => '_info'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'location_id' => 'setLocationId',
        'department_id' => 'setDepartmentId',
        'company' => 'setCompany',
        'account_number' => 'setAccountNumber',
        'credit_account' => 'setCreditAccount',
        'expense_detail_id' => 'setExpenseDetailId',
        'expense_type' => 'setExpenseType',
        'classification' => 'setClassification',
        'gl_type' => 'setGlType',
        'member' => 'setMember',
        'date_expense' => 'setDateExpense',
        'charge_code' => 'setChargeCode',
        'charge_description' => 'setChargeDescription',
        'in_policy' => 'setInPolicy',
        'payment_method' => 'setPaymentMethod',
        'currency' => 'setCurrency',
        'total' => 'setTotal',
        'billable_amount' => 'setBillableAmount',
        'non_billable_amount' => 'setNonBillableAmount',
        'agreement' => 'setAgreement',
        'agreement_amount_covered' => 'setAgreementAmountCovered',
        'ticket' => 'setTicket',
        'project' => 'setProject',
        'project_phase' => 'setProjectPhase',
        'tax_code' => 'setTaxCode',
        'avalara_tax_flag' => 'setAvalaraTaxFlag',
        'item_taxable_flag' => 'setItemTaxableFlag',
        'sales_tax_amount' => 'setSalesTaxAmount',
        'state_tax_flag' => 'setStateTaxFlag',
        'state_tax_xref' => 'setStateTaxXref',
        'state_tax_amount' => 'setStateTaxAmount',
        'county_tax_flag' => 'setCountyTaxFlag',
        'county_tax_xref' => 'setCountyTaxXref',
        'county_tax_amount' => 'setCountyTaxAmount',
        'city_tax_flag' => 'setCityTaxFlag',
        'city_tax_xref' => 'setCityTaxXref',
        'city_tax_amount' => 'setCityTaxAmount',
        'country_tax_flag' => 'setCountryTaxFlag',
        'country_tax_xref' => 'setCountryTaxXref',
        'country_tax_amount' => 'setCountryTaxAmount',
        'composite_tax_flag' => 'setCompositeTaxFlag',
        'composite_tax_xref' => 'setCompositeTaxXref',
        'composite_tax_amount' => 'setCompositeTaxAmount',
        'date_closed' => 'setDateClosed',
        '_info' => 'setInfo'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'location_id' => 'getLocationId',
        'department_id' => 'getDepartmentId',
        'company' => 'getCompany',
        'account_number' => 'getAccountNumber',
        'credit_account' => 'getCreditAccount',
        'expense_detail_id' => 'getExpenseDetailId',
        'expense_type' => 'getExpenseType',
        'classification' => 'getClassification',
        'gl_type' => 'getGlType',
        'member' => 'getMember',
        'date_expense' => 'getDateExpense',
        'charge_code' => 'getChargeCode',
        'charge_description' => 'getChargeDescription',
        'in_policy' => 'getInPolicy',
        'payment_method' => 'getPaymentMethod',
        'currency' => 'getCurrency',
        'total' => 'getTotal',
        'billable_amount' => 'getBillableAmount',
        'non_billable_amount' => 'getNonBillableAmount',
        'agreement' => 'getAgreement',
        'agreement_amount_covered' => 'getAgreementAmountCovered',
        'ticket' => 'getTicket',
        'project' => 'getProject',
        'project_phase' => 'getProjectPhase',
        'tax_code' => 'getTaxCode',
        'avalara_tax_flag' => 'getAvalaraTaxFlag',
        'item_taxable_flag' => 'getItemTaxableFlag',
        'sales_tax_amount' => 'getSalesTaxAmount',
        'state_tax_flag' => 'getStateTaxFlag',
        'state_tax_xref' => 'getStateTaxXref',
        'state_tax_amount' => 'getStateTaxAmount',
        'county_tax_flag' => 'getCountyTaxFlag',
        'county_tax_xref' => 'getCountyTaxXref',
        'county_tax_amount' => 'getCountyTaxAmount',
        'city_tax_flag' => 'getCityTaxFlag',
        'city_tax_xref' => 'getCityTaxXref',
        'city_tax_amount' => 'getCityTaxAmount',
        'country_tax_flag' => 'getCountryTaxFlag',
        'country_tax_xref' => 'getCountryTaxXref',
        'country_tax_amount' => 'getCountryTaxAmount',
        'composite_tax_flag' => 'getCompositeTaxFlag',
        'composite_tax_xref' => 'getCompositeTaxXref',
        'composite_tax_amount' => 'getCompositeTaxAmount',
        'date_closed' => 'getDateClosed',
        '_info' => 'getInfo'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const CLASSIFICATION_NON_REIMBURSABLE = 'NonReimbursable';
    const CLASSIFICATION_REIMBURSABLE = 'Reimbursable';
    const CLASSIFICATION_PERSONAL = 'Personal';
    const GL_TYPE_AP = 'AP';
    const GL_TYPE_AR = 'AR';
    const GL_TYPE_EE = 'EE';
    const GL_TYPE_EI = 'EI';
    const GL_TYPE_EO = 'EO';
    const GL_TYPE_IA = 'IA';
    const GL_TYPE_IT = 'IT';
    const GL_TYPE_P = 'P';
    const GL_TYPE_PF = 'PF';
    const GL_TYPE_R = 'R';
    const GL_TYPE_RA = 'RA';
    const GL_TYPE_RD = 'RD';
    const GL_TYPE_RE = 'RE';
    const GL_TYPE_RP = 'RP';
    const GL_TYPE_ST = 'ST';
    const GL_TYPE_SD = 'SD';
    const GL_TYPE_ET = 'ET';
    const GL_TYPE_RM = 'RM';
    const GL_TYPE_FT = 'FT';
    const GL_TYPE_PT = 'PT';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getClassificationAllowableValues()
    {
        return [
            self::CLASSIFICATION_NON_REIMBURSABLE,
            self::CLASSIFICATION_REIMBURSABLE,
            self::CLASSIFICATION_PERSONAL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getGlTypeAllowableValues()
    {
        return [
            self::GL_TYPE_AP,
            self::GL_TYPE_AR,
            self::GL_TYPE_EE,
            self::GL_TYPE_EI,
            self::GL_TYPE_EO,
            self::GL_TYPE_IA,
            self::GL_TYPE_IT,
            self::GL_TYPE_P,
            self::GL_TYPE_PF,
            self::GL_TYPE_R,
            self::GL_TYPE_RA,
            self::GL_TYPE_RD,
            self::GL_TYPE_RE,
            self::GL_TYPE_RP,
            self::GL_TYPE_ST,
            self::GL_TYPE_SD,
            self::GL_TYPE_ET,
            self::GL_TYPE_RM,
            self::GL_TYPE_FT,
            self::GL_TYPE_PT,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['location_id'] = isset($data['location_id']) ? $data['location_id'] : null;
        $this->container['department_id'] = isset($data['department_id']) ? $data['department_id'] : null;
        $this->container['company'] = isset($data['company']) ? $data['company'] : null;
        $this->container['account_number'] = isset($data['account_number']) ? $data['account_number'] : null;
        $this->container['credit_account'] = isset($data['credit_account']) ? $data['credit_account'] : null;
        $this->container['expense_detail_id'] = isset($data['expense_detail_id']) ? $data['expense_detail_id'] : null;
        $this->container['expense_type'] = isset($data['expense_type']) ? $data['expense_type'] : null;
        $this->container['classification'] = isset($data['classification']) ? $data['classification'] : null;
        $this->container['gl_type'] = isset($data['gl_type']) ? $data['gl_type'] : null;
        $this->container['member'] = isset($data['member']) ? $data['member'] : null;
        $this->container['date_expense'] = isset($data['date_expense']) ? $data['date_expense'] : null;
        $this->container['charge_code'] = isset($data['charge_code']) ? $data['charge_code'] : null;
        $this->container['charge_description'] = isset($data['charge_description']) ? $data['charge_description'] : null;
        $this->container['in_policy'] = isset($data['in_policy']) ? $data['in_policy'] : null;
        $this->container['payment_method'] = isset($data['payment_method']) ? $data['payment_method'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['total'] = isset($data['total']) ? $data['total'] : null;
        $this->container['billable_amount'] = isset($data['billable_amount']) ? $data['billable_amount'] : null;
        $this->container['non_billable_amount'] = isset($data['non_billable_amount']) ? $data['non_billable_amount'] : null;
        $this->container['agreement'] = isset($data['agreement']) ? $data['agreement'] : null;
        $this->container['agreement_amount_covered'] = isset($data['agreement_amount_covered']) ? $data['agreement_amount_covered'] : null;
        $this->container['ticket'] = isset($data['ticket']) ? $data['ticket'] : null;
        $this->container['project'] = isset($data['project']) ? $data['project'] : null;
        $this->container['project_phase'] = isset($data['project_phase']) ? $data['project_phase'] : null;
        $this->container['tax_code'] = isset($data['tax_code']) ? $data['tax_code'] : null;
        $this->container['avalara_tax_flag'] = isset($data['avalara_tax_flag']) ? $data['avalara_tax_flag'] : null;
        $this->container['item_taxable_flag'] = isset($data['item_taxable_flag']) ? $data['item_taxable_flag'] : null;
        $this->container['sales_tax_amount'] = isset($data['sales_tax_amount']) ? $data['sales_tax_amount'] : null;
        $this->container['state_tax_flag'] = isset($data['state_tax_flag']) ? $data['state_tax_flag'] : null;
        $this->container['state_tax_xref'] = isset($data['state_tax_xref']) ? $data['state_tax_xref'] : null;
        $this->container['state_tax_amount'] = isset($data['state_tax_amount']) ? $data['state_tax_amount'] : null;
        $this->container['county_tax_flag'] = isset($data['county_tax_flag']) ? $data['county_tax_flag'] : null;
        $this->container['county_tax_xref'] = isset($data['county_tax_xref']) ? $data['county_tax_xref'] : null;
        $this->container['county_tax_amount'] = isset($data['county_tax_amount']) ? $data['county_tax_amount'] : null;
        $this->container['city_tax_flag'] = isset($data['city_tax_flag']) ? $data['city_tax_flag'] : null;
        $this->container['city_tax_xref'] = isset($data['city_tax_xref']) ? $data['city_tax_xref'] : null;
        $this->container['city_tax_amount'] = isset($data['city_tax_amount']) ? $data['city_tax_amount'] : null;
        $this->container['country_tax_flag'] = isset($data['country_tax_flag']) ? $data['country_tax_flag'] : null;
        $this->container['country_tax_xref'] = isset($data['country_tax_xref']) ? $data['country_tax_xref'] : null;
        $this->container['country_tax_amount'] = isset($data['country_tax_amount']) ? $data['country_tax_amount'] : null;
        $this->container['composite_tax_flag'] = isset($data['composite_tax_flag']) ? $data['composite_tax_flag'] : null;
        $this->container['composite_tax_xref'] = isset($data['composite_tax_xref']) ? $data['composite_tax_xref'] : null;
        $this->container['composite_tax_amount'] = isset($data['composite_tax_amount']) ? $data['composite_tax_amount'] : null;
        $this->container['date_closed'] = isset($data['date_closed']) ? $data['date_closed'] : null;
        $this->container['_info'] = isset($data['_info']) ? $data['_info'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        $allowed_values = ["NonReimbursable", "Reimbursable", "Personal"];
        if (!in_array($this->container['classification'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'classification', must be one of #{allowed_values}.";
        }

        $allowed_values = ["AP", "AR", "EE", "EI", "EO", "IA", "IT", "P", "PF", "R", "RA", "RD", "RE", "RP", "ST", "SD", "ET", "RM", "FT", "PT"];
        if (!in_array($this->container['gl_type'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'gl_type', must be one of #{allowed_values}.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        $allowed_values = ["NonReimbursable", "Reimbursable", "Personal"];
        if (!in_array($this->container['classification'], $allowed_values)) {
            return false;
        }
        $allowed_values = ["AP", "AR", "EE", "EI", "EO", "IA", "IT", "P", "PF", "R", "RA", "RD", "RE", "RP", "ST", "SD", "ET", "RM", "FT", "PT"];
        if (!in_array($this->container['gl_type'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets location_id
     * @return int
     */
    public function getLocationId()
    {
        return $this->container['location_id'];
    }

    /**
     * Sets location_id
     * @param int $location_id
     * @return $this
     */
    public function setLocationId($location_id)
    {
        $this->container['location_id'] = $location_id;

        return $this;
    }

    /**
     * Gets department_id
     * @return int
     */
    public function getDepartmentId()
    {
        return $this->container['department_id'];
    }

    /**
     * Sets department_id
     * @param int $department_id
     * @return $this
     */
    public function setDepartmentId($department_id)
    {
        $this->container['department_id'] = $department_id;

        return $this;
    }

    /**
     * Gets company
     * @return \Spinen\ConnectWise\Clients\Finance\Spinen\ConnectWise\Clients\Finance\Model\CompanyReference
     */
    public function getCompany()
    {
        return $this->container['company'];
    }

    /**
     * Sets company
     * @param \Spinen\ConnectWise\Clients\Finance\Spinen\ConnectWise\Clients\Finance\Model\CompanyReference $company
     * @return $this
     */
    public function setCompany($company)
    {
        $this->container['company'] = $company;

        return $this;
    }

    /**
     * Gets account_number
     * @return string
     */
    public function getAccountNumber()
    {
        return $this->container['account_number'];
    }

    /**
     * Sets account_number
     * @param string $account_number
     * @return $this
     */
    public function setAccountNumber($account_number)
    {
        $this->container['account_number'] = $account_number;

        return $this;
    }

    /**
     * Gets credit_account
     * @return string
     */
    public function getCreditAccount()
    {
        return $this->container['credit_account'];
    }

    /**
     * Sets credit_account
     * @param string $credit_account
     * @return $this
     */
    public function setCreditAccount($credit_account)
    {
        $this->container['credit_account'] = $credit_account;

        return $this;
    }

    /**
     * Gets expense_detail_id
     * @return int
     */
    public function getExpenseDetailId()
    {
        return $this->container['expense_detail_id'];
    }

    /**
     * Sets expense_detail_id
     * @param int $expense_detail_id
     * @return $this
     */
    public function setExpenseDetailId($expense_detail_id)
    {
        $this->container['expense_detail_id'] = $expense_detail_id;

        return $this;
    }

    /**
     * Gets expense_type
     * @return \Spinen\ConnectWise\Clients\Finance\Spinen\ConnectWise\Clients\Finance\Model\ExpenseTypeReference
     */
    public function getExpenseType()
    {
        return $this->container['expense_type'];
    }

    /**
     * Sets expense_type
     * @param \Spinen\ConnectWise\Clients\Finance\Spinen\ConnectWise\Clients\Finance\Model\ExpenseTypeReference $expense_type
     * @return $this
     */
    public function setExpenseType($expense_type)
    {
        $this->container['expense_type'] = $expense_type;

        return $this;
    }

    /**
     * Gets classification
     * @return string
     */
    public function getClassification()
    {
        return $this->container['classification'];
    }

    /**
     * Sets classification
     * @param string $classification
     * @return $this
     */
    public function setClassification($classification)
    {
        $allowed_values = array('NonReimbursable', 'Reimbursable', 'Personal');
        if (!is_null($classification) && (!in_array($classification, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'classification', must be one of 'NonReimbursable', 'Reimbursable', 'Personal'");
        }
        $this->container['classification'] = $classification;

        return $this;
    }

    /**
     * Gets gl_type
     * @return string
     */
    public function getGlType()
    {
        return $this->container['gl_type'];
    }

    /**
     * Sets gl_type
     * @param string $gl_type
     * @return $this
     */
    public function setGlType($gl_type)
    {
        $allowed_values = array('AP', 'AR', 'EE', 'EI', 'EO', 'IA', 'IT', 'P', 'PF', 'R', 'RA', 'RD', 'RE', 'RP', 'ST', 'SD', 'ET', 'RM', 'FT', 'PT');
        if (!is_null($gl_type) && (!in_array($gl_type, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'gl_type', must be one of 'AP', 'AR', 'EE', 'EI', 'EO', 'IA', 'IT', 'P', 'PF', 'R', 'RA', 'RD', 'RE', 'RP', 'ST', 'SD', 'ET', 'RM', 'FT', 'PT'");
        }
        $this->container['gl_type'] = $gl_type;

        return $this;
    }

    /**
     * Gets member
     * @return \Spinen\ConnectWise\Clients\Finance\Spinen\ConnectWise\Clients\Finance\Model\MemberReference
     */
    public function getMember()
    {
        return $this->container['member'];
    }

    /**
     * Sets member
     * @param \Spinen\ConnectWise\Clients\Finance\Spinen\ConnectWise\Clients\Finance\Model\MemberReference $member
     * @return $this
     */
    public function setMember($member)
    {
        $this->container['member'] = $member;

        return $this;
    }

    /**
     * Gets date_expense
     * @return \DateTime
     */
    public function getDateExpense()
    {
        return $this->container['date_expense'];
    }

    /**
     * Sets date_expense
     * @param \DateTime $date_expense
     * @return $this
     */
    public function setDateExpense($date_expense)
    {
        $this->container['date_expense'] = $date_expense;

        return $this;
    }

    /**
     * Gets charge_code
     * @return \Spinen\ConnectWise\Clients\Finance\Spinen\ConnectWise\Clients\Finance\Model\ChargeCodeReference
     */
    public function getChargeCode()
    {
        return $this->container['charge_code'];
    }

    /**
     * Sets charge_code
     * @param \Spinen\ConnectWise\Clients\Finance\Spinen\ConnectWise\Clients\Finance\Model\ChargeCodeReference $charge_code
     * @return $this
     */
    public function setChargeCode($charge_code)
    {
        $this->container['charge_code'] = $charge_code;

        return $this;
    }

    /**
     * Gets charge_description
     * @return string
     */
    public function getChargeDescription()
    {
        return $this->container['charge_description'];
    }

    /**
     * Sets charge_description
     * @param string $charge_description
     * @return $this
     */
    public function setChargeDescription($charge_description)
    {
        $this->container['charge_description'] = $charge_description;

        return $this;
    }

    /**
     * Gets in_policy
     * @return bool
     */
    public function getInPolicy()
    {
        return $this->container['in_policy'];
    }

    /**
     * Sets in_policy
     * @param bool $in_policy
     * @return $this
     */
    public function setInPolicy($in_policy)
    {
        $this->container['in_policy'] = $in_policy;

        return $this;
    }

    /**
     * Gets payment_method
     * @return \Spinen\ConnectWise\Clients\Finance\Spinen\ConnectWise\Clients\Finance\Model\PaymentMethodReference
     */
    public function getPaymentMethod()
    {
        return $this->container['payment_method'];
    }

    /**
     * Sets payment_method
     * @param \Spinen\ConnectWise\Clients\Finance\Spinen\ConnectWise\Clients\Finance\Model\PaymentMethodReference $payment_method
     * @return $this
     */
    public function setPaymentMethod($payment_method)
    {
        $this->container['payment_method'] = $payment_method;

        return $this;
    }

    /**
     * Gets currency
     * @return \Spinen\ConnectWise\Clients\Finance\Spinen\ConnectWise\Clients\Finance\Model\CurrencyReference
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     * @param \Spinen\ConnectWise\Clients\Finance\Spinen\ConnectWise\Clients\Finance\Model\CurrencyReference $currency
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets total
     * @return double
     */
    public function getTotal()
    {
        return $this->container['total'];
    }

    /**
     * Sets total
     * @param double $total
     * @return $this
     */
    public function setTotal($total)
    {
        $this->container['total'] = $total;

        return $this;
    }

    /**
     * Gets billable_amount
     * @return double
     */
    public function getBillableAmount()
    {
        return $this->container['billable_amount'];
    }

    /**
     * Sets billable_amount
     * @param double $billable_amount
     * @return $this
     */
    public function setBillableAmount($billable_amount)
    {
        $this->container['billable_amount'] = $billable_amount;

        return $this;
    }

    /**
     * Gets non_billable_amount
     * @return double
     */
    public function getNonBillableAmount()
    {
        return $this->container['non_billable_amount'];
    }

    /**
     * Sets non_billable_amount
     * @param double $non_billable_amount
     * @return $this
     */
    public function setNonBillableAmount($non_billable_amount)
    {
        $this->container['non_billable_amount'] = $non_billable_amount;

        return $this;
    }

    /**
     * Gets agreement
     * @return \Spinen\ConnectWise\Clients\Finance\Spinen\ConnectWise\Clients\Finance\Model\AgreementReference
     */
    public function getAgreement()
    {
        return $this->container['agreement'];
    }

    /**
     * Sets agreement
     * @param \Spinen\ConnectWise\Clients\Finance\Spinen\ConnectWise\Clients\Finance\Model\AgreementReference $agreement
     * @return $this
     */
    public function setAgreement($agreement)
    {
        $this->container['agreement'] = $agreement;

        return $this;
    }

    /**
     * Gets agreement_amount_covered
     * @return double
     */
    public function getAgreementAmountCovered()
    {
        return $this->container['agreement_amount_covered'];
    }

    /**
     * Sets agreement_amount_covered
     * @param double $agreement_amount_covered
     * @return $this
     */
    public function setAgreementAmountCovered($agreement_amount_covered)
    {
        $this->container['agreement_amount_covered'] = $agreement_amount_covered;

        return $this;
    }

    /**
     * Gets ticket
     * @return \Spinen\ConnectWise\Clients\Finance\Spinen\ConnectWise\Clients\Finance\Model\TicketReference
     */
    public function getTicket()
    {
        return $this->container['ticket'];
    }

    /**
     * Sets ticket
     * @param \Spinen\ConnectWise\Clients\Finance\Spinen\ConnectWise\Clients\Finance\Model\TicketReference $ticket
     * @return $this
     */
    public function setTicket($ticket)
    {
        $this->container['ticket'] = $ticket;

        return $this;
    }

    /**
     * Gets project
     * @return \Spinen\ConnectWise\Clients\Finance\Spinen\ConnectWise\Clients\Finance\Model\ProjectReference
     */
    public function getProject()
    {
        return $this->container['project'];
    }

    /**
     * Sets project
     * @param \Spinen\ConnectWise\Clients\Finance\Spinen\ConnectWise\Clients\Finance\Model\ProjectReference $project
     * @return $this
     */
    public function setProject($project)
    {
        $this->container['project'] = $project;

        return $this;
    }

    /**
     * Gets project_phase
     * @return \Spinen\ConnectWise\Clients\Finance\Spinen\ConnectWise\Clients\Finance\Model\ProjectPhaseReference
     */
    public function getProjectPhase()
    {
        return $this->container['project_phase'];
    }

    /**
     * Sets project_phase
     * @param \Spinen\ConnectWise\Clients\Finance\Spinen\ConnectWise\Clients\Finance\Model\ProjectPhaseReference $project_phase
     * @return $this
     */
    public function setProjectPhase($project_phase)
    {
        $this->container['project_phase'] = $project_phase;

        return $this;
    }

    /**
     * Gets tax_code
     * @return \Spinen\ConnectWise\Clients\Finance\Spinen\ConnectWise\Clients\Finance\Model\TaxCodeReference
     */
    public function getTaxCode()
    {
        return $this->container['tax_code'];
    }

    /**
     * Sets tax_code
     * @param \Spinen\ConnectWise\Clients\Finance\Spinen\ConnectWise\Clients\Finance\Model\TaxCodeReference $tax_code
     * @return $this
     */
    public function setTaxCode($tax_code)
    {
        $this->container['tax_code'] = $tax_code;

        return $this;
    }

    /**
     * Gets avalara_tax_flag
     * @return bool
     */
    public function getAvalaraTaxFlag()
    {
        return $this->container['avalara_tax_flag'];
    }

    /**
     * Sets avalara_tax_flag
     * @param bool $avalara_tax_flag Used to determine if Avalara tax is enabled.
     * @return $this
     */
    public function setAvalaraTaxFlag($avalara_tax_flag)
    {
        $this->container['avalara_tax_flag'] = $avalara_tax_flag;

        return $this;
    }

    /**
     * Gets item_taxable_flag
     * @return bool
     */
    public function getItemTaxableFlag()
    {
        return $this->container['item_taxable_flag'];
    }

    /**
     * Sets item_taxable_flag
     * @param bool $item_taxable_flag
     * @return $this
     */
    public function setItemTaxableFlag($item_taxable_flag)
    {
        $this->container['item_taxable_flag'] = $item_taxable_flag;

        return $this;
    }

    /**
     * Gets sales_tax_amount
     * @return double
     */
    public function getSalesTaxAmount()
    {
        return $this->container['sales_tax_amount'];
    }

    /**
     * Sets sales_tax_amount
     * @param double $sales_tax_amount
     * @return $this
     */
    public function setSalesTaxAmount($sales_tax_amount)
    {
        $this->container['sales_tax_amount'] = $sales_tax_amount;

        return $this;
    }

    /**
     * Gets state_tax_flag
     * @return bool
     */
    public function getStateTaxFlag()
    {
        return $this->container['state_tax_flag'];
    }

    /**
     * Sets state_tax_flag
     * @param bool $state_tax_flag Set to true if transaction is taxable at the state level.
     * @return $this
     */
    public function setStateTaxFlag($state_tax_flag)
    {
        $this->container['state_tax_flag'] = $state_tax_flag;

        return $this;
    }

    /**
     * Gets state_tax_xref
     * @return string
     */
    public function getStateTaxXref()
    {
        return $this->container['state_tax_xref'];
    }

    /**
     * Sets state_tax_xref
     * @param string $state_tax_xref
     * @return $this
     */
    public function setStateTaxXref($state_tax_xref)
    {
        $this->container['state_tax_xref'] = $state_tax_xref;

        return $this;
    }

    /**
     * Gets state_tax_amount
     * @return double
     */
    public function getStateTaxAmount()
    {
        return $this->container['state_tax_amount'];
    }

    /**
     * Sets state_tax_amount
     * @param double $state_tax_amount
     * @return $this
     */
    public function setStateTaxAmount($state_tax_amount)
    {
        $this->container['state_tax_amount'] = $state_tax_amount;

        return $this;
    }

    /**
     * Gets county_tax_flag
     * @return bool
     */
    public function getCountyTaxFlag()
    {
        return $this->container['county_tax_flag'];
    }

    /**
     * Sets county_tax_flag
     * @param bool $county_tax_flag Set to true if transaction is taxable at the county level.
     * @return $this
     */
    public function setCountyTaxFlag($county_tax_flag)
    {
        $this->container['county_tax_flag'] = $county_tax_flag;

        return $this;
    }

    /**
     * Gets county_tax_xref
     * @return string
     */
    public function getCountyTaxXref()
    {
        return $this->container['county_tax_xref'];
    }

    /**
     * Sets county_tax_xref
     * @param string $county_tax_xref
     * @return $this
     */
    public function setCountyTaxXref($county_tax_xref)
    {
        $this->container['county_tax_xref'] = $county_tax_xref;

        return $this;
    }

    /**
     * Gets county_tax_amount
     * @return double
     */
    public function getCountyTaxAmount()
    {
        return $this->container['county_tax_amount'];
    }

    /**
     * Sets county_tax_amount
     * @param double $county_tax_amount
     * @return $this
     */
    public function setCountyTaxAmount($county_tax_amount)
    {
        $this->container['county_tax_amount'] = $county_tax_amount;

        return $this;
    }

    /**
     * Gets city_tax_flag
     * @return bool
     */
    public function getCityTaxFlag()
    {
        return $this->container['city_tax_flag'];
    }

    /**
     * Sets city_tax_flag
     * @param bool $city_tax_flag Set to true if transaction is taxable at the city level.
     * @return $this
     */
    public function setCityTaxFlag($city_tax_flag)
    {
        $this->container['city_tax_flag'] = $city_tax_flag;

        return $this;
    }

    /**
     * Gets city_tax_xref
     * @return string
     */
    public function getCityTaxXref()
    {
        return $this->container['city_tax_xref'];
    }

    /**
     * Sets city_tax_xref
     * @param string $city_tax_xref
     * @return $this
     */
    public function setCityTaxXref($city_tax_xref)
    {
        $this->container['city_tax_xref'] = $city_tax_xref;

        return $this;
    }

    /**
     * Gets city_tax_amount
     * @return double
     */
    public function getCityTaxAmount()
    {
        return $this->container['city_tax_amount'];
    }

    /**
     * Sets city_tax_amount
     * @param double $city_tax_amount
     * @return $this
     */
    public function setCityTaxAmount($city_tax_amount)
    {
        $this->container['city_tax_amount'] = $city_tax_amount;

        return $this;
    }

    /**
     * Gets country_tax_flag
     * @return bool
     */
    public function getCountryTaxFlag()
    {
        return $this->container['country_tax_flag'];
    }

    /**
     * Sets country_tax_flag
     * @param bool $country_tax_flag Set to true if transaction is taxable at the country level.
     * @return $this
     */
    public function setCountryTaxFlag($country_tax_flag)
    {
        $this->container['country_tax_flag'] = $country_tax_flag;

        return $this;
    }

    /**
     * Gets country_tax_xref
     * @return string
     */
    public function getCountryTaxXref()
    {
        return $this->container['country_tax_xref'];
    }

    /**
     * Sets country_tax_xref
     * @param string $country_tax_xref
     * @return $this
     */
    public function setCountryTaxXref($country_tax_xref)
    {
        $this->container['country_tax_xref'] = $country_tax_xref;

        return $this;
    }

    /**
     * Gets country_tax_amount
     * @return double
     */
    public function getCountryTaxAmount()
    {
        return $this->container['country_tax_amount'];
    }

    /**
     * Sets country_tax_amount
     * @param double $country_tax_amount
     * @return $this
     */
    public function setCountryTaxAmount($country_tax_amount)
    {
        $this->container['country_tax_amount'] = $country_tax_amount;

        return $this;
    }

    /**
     * Gets composite_tax_flag
     * @return bool
     */
    public function getCompositeTaxFlag()
    {
        return $this->container['composite_tax_flag'];
    }

    /**
     * Sets composite_tax_flag
     * @param bool $composite_tax_flag Set to true if transaction is taxable at the composite level.
     * @return $this
     */
    public function setCompositeTaxFlag($composite_tax_flag)
    {
        $this->container['composite_tax_flag'] = $composite_tax_flag;

        return $this;
    }

    /**
     * Gets composite_tax_xref
     * @return string
     */
    public function getCompositeTaxXref()
    {
        return $this->container['composite_tax_xref'];
    }

    /**
     * Sets composite_tax_xref
     * @param string $composite_tax_xref
     * @return $this
     */
    public function setCompositeTaxXref($composite_tax_xref)
    {
        $this->container['composite_tax_xref'] = $composite_tax_xref;

        return $this;
    }

    /**
     * Gets composite_tax_amount
     * @return double
     */
    public function getCompositeTaxAmount()
    {
        return $this->container['composite_tax_amount'];
    }

    /**
     * Sets composite_tax_amount
     * @param double $composite_tax_amount
     * @return $this
     */
    public function setCompositeTaxAmount($composite_tax_amount)
    {
        $this->container['composite_tax_amount'] = $composite_tax_amount;

        return $this;
    }

    /**
     * Gets date_closed
     * @return \DateTime
     */
    public function getDateClosed()
    {
        return $this->container['date_closed'];
    }

    /**
     * Sets date_closed
     * @param \DateTime $date_closed
     * @return $this
     */
    public function setDateClosed($date_closed)
    {
        $this->container['date_closed'] = $date_closed;

        return $this;
    }

    /**
     * Gets _info
     * @return \Spinen\ConnectWise\Clients\Finance\Spinen\ConnectWise\Clients\Finance\Model\Metadata
     */
    public function getInfo()
    {
        return $this->container['_info'];
    }

    /**
     * Sets _info
     * @param \Spinen\ConnectWise\Clients\Finance\Spinen\ConnectWise\Clients\Finance\Model\Metadata $_info Metadata of the entity
     * @return $this
     */
    public function setInfo($_info)
    {
        $this->container['_info'] = $_info;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Spinen\ConnectWise\Clients\Finance\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Spinen\ConnectWise\Clients\Finance\ObjectSerializer::sanitizeForSerialization($this));
    }
}


