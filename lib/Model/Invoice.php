<?php
/**
 * Invoice
 *
 * PHP version 5
 *
 * @category Class
 * @package  Spinen\ConnectWise\Clients\Finance
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Finance API
 *
 * ConnectWise Finance API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: platform@connectwise.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Spinen\ConnectWise\Clients\Finance\Spinen\ConnectWise\Clients\Finance\Model;

use \ArrayAccess;

/**
 * Invoice Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Spinen\ConnectWise\Clients\Finance
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Invoice implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Invoice';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'invoice_number' => 'string',
        'type' => 'string',
        'status' => '\Spinen\ConnectWise\Clients\Finance\Spinen\ConnectWise\Clients\Finance\Model\BillingStatusReference',
        'company' => '\Spinen\ConnectWise\Clients\Finance\Spinen\ConnectWise\Clients\Finance\Model\CompanyReference',
        'bill_to_company' => '\Spinen\ConnectWise\Clients\Finance\Spinen\ConnectWise\Clients\Finance\Model\CompanyReference',
        'ship_to_company' => '\Spinen\ConnectWise\Clients\Finance\Spinen\ConnectWise\Clients\Finance\Model\CompanyReference',
        'apply_to_type' => 'string',
        'apply_to_id' => 'int',
        'attention' => 'string',
        'billing_site' => '\Spinen\ConnectWise\Clients\Finance\Spinen\ConnectWise\Clients\Finance\Model\SiteReference',
        'shipping_site' => '\Spinen\ConnectWise\Clients\Finance\Spinen\ConnectWise\Clients\Finance\Model\SiteReference',
        'billing_terms' => '\Spinen\ConnectWise\Clients\Finance\Spinen\ConnectWise\Clients\Finance\Model\BillingTermsReference',
        'reference' => 'string',
        'customer_po' => 'string',
        'template_setup_id' => 'int',
        'email_template_id' => 'int',
        'add_to_batch_email_list' => 'bool',
        'date' => '\DateTime',
        'restrict_downpayment_flag' => 'bool',
        'location_id' => 'int',
        'department_id' => 'int',
        'territory_id' => 'int',
        'top_comment' => 'string',
        'bottom_comment' => 'string',
        'taxable_flag' => 'bool',
        'tax_code' => '\Spinen\ConnectWise\Clients\Finance\Spinen\ConnectWise\Clients\Finance\Model\TaxCodeReference',
        'internal_notes' => 'string',
        'downpayment_previously_taxed_flag' => 'bool',
        'service_total' => 'double',
        'due_date' => '\DateTime',
        'expense_total' => 'double',
        'product_total' => 'double',
        'previous_progress_applied' => 'double',
        'service_adjustment_amount' => 'double',
        'agreement_amount' => 'double',
        'downpayment_applied' => 'double',
        'subtotal' => 'double',
        'total' => 'double',
        'remaining_downpayment' => 'double',
        'sales_tax' => 'double',
        'adjustment_reason' => 'string',
        'adjusted_by' => 'string',
        'payments' => 'double',
        'credits' => 'double',
        'balance' => 'double',
        'special_invoice_flag' => 'bool',
        '_info' => '\Spinen\ConnectWise\Clients\Finance\Spinen\ConnectWise\Clients\Finance\Model\Metadata'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'invoice_number' => 'invoiceNumber',
        'type' => 'type',
        'status' => 'status',
        'company' => 'company',
        'bill_to_company' => 'billToCompany',
        'ship_to_company' => 'shipToCompany',
        'apply_to_type' => 'applyToType',
        'apply_to_id' => 'applyToId',
        'attention' => 'attention',
        'billing_site' => 'billingSite',
        'shipping_site' => 'shippingSite',
        'billing_terms' => 'billingTerms',
        'reference' => 'reference',
        'customer_po' => 'customerPO',
        'template_setup_id' => 'templateSetupId',
        'email_template_id' => 'emailTemplateId',
        'add_to_batch_email_list' => 'addToBatchEmailList',
        'date' => 'date',
        'restrict_downpayment_flag' => 'restrictDownpaymentFlag',
        'location_id' => 'locationId',
        'department_id' => 'departmentId',
        'territory_id' => 'territoryId',
        'top_comment' => 'topComment',
        'bottom_comment' => 'bottomComment',
        'taxable_flag' => 'taxableFlag',
        'tax_code' => 'taxCode',
        'internal_notes' => 'internalNotes',
        'downpayment_previously_taxed_flag' => 'downpaymentPreviouslyTaxedFlag',
        'service_total' => 'serviceTotal',
        'due_date' => 'dueDate',
        'expense_total' => 'expenseTotal',
        'product_total' => 'productTotal',
        'previous_progress_applied' => 'previousProgressApplied',
        'service_adjustment_amount' => 'serviceAdjustmentAmount',
        'agreement_amount' => 'agreementAmount',
        'downpayment_applied' => 'downpaymentApplied',
        'subtotal' => 'subtotal',
        'total' => 'total',
        'remaining_downpayment' => 'remainingDownpayment',
        'sales_tax' => 'salesTax',
        'adjustment_reason' => 'adjustmentReason',
        'adjusted_by' => 'adjustedBy',
        'payments' => 'payments',
        'credits' => 'credits',
        'balance' => 'balance',
        'special_invoice_flag' => 'specialInvoiceFlag',
        '_info' => '_info'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'invoice_number' => 'setInvoiceNumber',
        'type' => 'setType',
        'status' => 'setStatus',
        'company' => 'setCompany',
        'bill_to_company' => 'setBillToCompany',
        'ship_to_company' => 'setShipToCompany',
        'apply_to_type' => 'setApplyToType',
        'apply_to_id' => 'setApplyToId',
        'attention' => 'setAttention',
        'billing_site' => 'setBillingSite',
        'shipping_site' => 'setShippingSite',
        'billing_terms' => 'setBillingTerms',
        'reference' => 'setReference',
        'customer_po' => 'setCustomerPo',
        'template_setup_id' => 'setTemplateSetupId',
        'email_template_id' => 'setEmailTemplateId',
        'add_to_batch_email_list' => 'setAddToBatchEmailList',
        'date' => 'setDate',
        'restrict_downpayment_flag' => 'setRestrictDownpaymentFlag',
        'location_id' => 'setLocationId',
        'department_id' => 'setDepartmentId',
        'territory_id' => 'setTerritoryId',
        'top_comment' => 'setTopComment',
        'bottom_comment' => 'setBottomComment',
        'taxable_flag' => 'setTaxableFlag',
        'tax_code' => 'setTaxCode',
        'internal_notes' => 'setInternalNotes',
        'downpayment_previously_taxed_flag' => 'setDownpaymentPreviouslyTaxedFlag',
        'service_total' => 'setServiceTotal',
        'due_date' => 'setDueDate',
        'expense_total' => 'setExpenseTotal',
        'product_total' => 'setProductTotal',
        'previous_progress_applied' => 'setPreviousProgressApplied',
        'service_adjustment_amount' => 'setServiceAdjustmentAmount',
        'agreement_amount' => 'setAgreementAmount',
        'downpayment_applied' => 'setDownpaymentApplied',
        'subtotal' => 'setSubtotal',
        'total' => 'setTotal',
        'remaining_downpayment' => 'setRemainingDownpayment',
        'sales_tax' => 'setSalesTax',
        'adjustment_reason' => 'setAdjustmentReason',
        'adjusted_by' => 'setAdjustedBy',
        'payments' => 'setPayments',
        'credits' => 'setCredits',
        'balance' => 'setBalance',
        'special_invoice_flag' => 'setSpecialInvoiceFlag',
        '_info' => 'setInfo'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'invoice_number' => 'getInvoiceNumber',
        'type' => 'getType',
        'status' => 'getStatus',
        'company' => 'getCompany',
        'bill_to_company' => 'getBillToCompany',
        'ship_to_company' => 'getShipToCompany',
        'apply_to_type' => 'getApplyToType',
        'apply_to_id' => 'getApplyToId',
        'attention' => 'getAttention',
        'billing_site' => 'getBillingSite',
        'shipping_site' => 'getShippingSite',
        'billing_terms' => 'getBillingTerms',
        'reference' => 'getReference',
        'customer_po' => 'getCustomerPo',
        'template_setup_id' => 'getTemplateSetupId',
        'email_template_id' => 'getEmailTemplateId',
        'add_to_batch_email_list' => 'getAddToBatchEmailList',
        'date' => 'getDate',
        'restrict_downpayment_flag' => 'getRestrictDownpaymentFlag',
        'location_id' => 'getLocationId',
        'department_id' => 'getDepartmentId',
        'territory_id' => 'getTerritoryId',
        'top_comment' => 'getTopComment',
        'bottom_comment' => 'getBottomComment',
        'taxable_flag' => 'getTaxableFlag',
        'tax_code' => 'getTaxCode',
        'internal_notes' => 'getInternalNotes',
        'downpayment_previously_taxed_flag' => 'getDownpaymentPreviouslyTaxedFlag',
        'service_total' => 'getServiceTotal',
        'due_date' => 'getDueDate',
        'expense_total' => 'getExpenseTotal',
        'product_total' => 'getProductTotal',
        'previous_progress_applied' => 'getPreviousProgressApplied',
        'service_adjustment_amount' => 'getServiceAdjustmentAmount',
        'agreement_amount' => 'getAgreementAmount',
        'downpayment_applied' => 'getDownpaymentApplied',
        'subtotal' => 'getSubtotal',
        'total' => 'getTotal',
        'remaining_downpayment' => 'getRemainingDownpayment',
        'sales_tax' => 'getSalesTax',
        'adjustment_reason' => 'getAdjustmentReason',
        'adjusted_by' => 'getAdjustedBy',
        'payments' => 'getPayments',
        'credits' => 'getCredits',
        'balance' => 'getBalance',
        'special_invoice_flag' => 'getSpecialInvoiceFlag',
        '_info' => 'getInfo'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const TYPE_AGREEMENT = 'Agreement';
    const TYPE_CREDIT_MEMO = 'CreditMemo';
    const TYPE_DOWN_PAYMENT = 'DownPayment';
    const TYPE_MISCELLANEOUS = 'Miscellaneous';
    const TYPE_PROGRESS = 'Progress';
    const TYPE_STANDARD = 'Standard';
    const APPLY_TO_TYPE_ALL = 'All';
    const APPLY_TO_TYPE_AGREEMENT = 'Agreement';
    const APPLY_TO_TYPE_PROJECT = 'Project';
    const APPLY_TO_TYPE_PROJECT_PHASE = 'ProjectPhase';
    const APPLY_TO_TYPE_SALES_ORDER = 'SalesOrder';
    const APPLY_TO_TYPE_TICKET = 'Ticket';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_AGREEMENT,
            self::TYPE_CREDIT_MEMO,
            self::TYPE_DOWN_PAYMENT,
            self::TYPE_MISCELLANEOUS,
            self::TYPE_PROGRESS,
            self::TYPE_STANDARD,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getApplyToTypeAllowableValues()
    {
        return [
            self::APPLY_TO_TYPE_ALL,
            self::APPLY_TO_TYPE_AGREEMENT,
            self::APPLY_TO_TYPE_PROJECT,
            self::APPLY_TO_TYPE_PROJECT_PHASE,
            self::APPLY_TO_TYPE_SALES_ORDER,
            self::APPLY_TO_TYPE_TICKET,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['invoice_number'] = isset($data['invoice_number']) ? $data['invoice_number'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['company'] = isset($data['company']) ? $data['company'] : null;
        $this->container['bill_to_company'] = isset($data['bill_to_company']) ? $data['bill_to_company'] : null;
        $this->container['ship_to_company'] = isset($data['ship_to_company']) ? $data['ship_to_company'] : null;
        $this->container['apply_to_type'] = isset($data['apply_to_type']) ? $data['apply_to_type'] : null;
        $this->container['apply_to_id'] = isset($data['apply_to_id']) ? $data['apply_to_id'] : null;
        $this->container['attention'] = isset($data['attention']) ? $data['attention'] : null;
        $this->container['billing_site'] = isset($data['billing_site']) ? $data['billing_site'] : null;
        $this->container['shipping_site'] = isset($data['shipping_site']) ? $data['shipping_site'] : null;
        $this->container['billing_terms'] = isset($data['billing_terms']) ? $data['billing_terms'] : null;
        $this->container['reference'] = isset($data['reference']) ? $data['reference'] : null;
        $this->container['customer_po'] = isset($data['customer_po']) ? $data['customer_po'] : null;
        $this->container['template_setup_id'] = isset($data['template_setup_id']) ? $data['template_setup_id'] : null;
        $this->container['email_template_id'] = isset($data['email_template_id']) ? $data['email_template_id'] : null;
        $this->container['add_to_batch_email_list'] = isset($data['add_to_batch_email_list']) ? $data['add_to_batch_email_list'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['restrict_downpayment_flag'] = isset($data['restrict_downpayment_flag']) ? $data['restrict_downpayment_flag'] : null;
        $this->container['location_id'] = isset($data['location_id']) ? $data['location_id'] : null;
        $this->container['department_id'] = isset($data['department_id']) ? $data['department_id'] : null;
        $this->container['territory_id'] = isset($data['territory_id']) ? $data['territory_id'] : null;
        $this->container['top_comment'] = isset($data['top_comment']) ? $data['top_comment'] : null;
        $this->container['bottom_comment'] = isset($data['bottom_comment']) ? $data['bottom_comment'] : null;
        $this->container['taxable_flag'] = isset($data['taxable_flag']) ? $data['taxable_flag'] : null;
        $this->container['tax_code'] = isset($data['tax_code']) ? $data['tax_code'] : null;
        $this->container['internal_notes'] = isset($data['internal_notes']) ? $data['internal_notes'] : null;
        $this->container['downpayment_previously_taxed_flag'] = isset($data['downpayment_previously_taxed_flag']) ? $data['downpayment_previously_taxed_flag'] : null;
        $this->container['service_total'] = isset($data['service_total']) ? $data['service_total'] : null;
        $this->container['due_date'] = isset($data['due_date']) ? $data['due_date'] : null;
        $this->container['expense_total'] = isset($data['expense_total']) ? $data['expense_total'] : null;
        $this->container['product_total'] = isset($data['product_total']) ? $data['product_total'] : null;
        $this->container['previous_progress_applied'] = isset($data['previous_progress_applied']) ? $data['previous_progress_applied'] : null;
        $this->container['service_adjustment_amount'] = isset($data['service_adjustment_amount']) ? $data['service_adjustment_amount'] : null;
        $this->container['agreement_amount'] = isset($data['agreement_amount']) ? $data['agreement_amount'] : null;
        $this->container['downpayment_applied'] = isset($data['downpayment_applied']) ? $data['downpayment_applied'] : null;
        $this->container['subtotal'] = isset($data['subtotal']) ? $data['subtotal'] : null;
        $this->container['total'] = isset($data['total']) ? $data['total'] : null;
        $this->container['remaining_downpayment'] = isset($data['remaining_downpayment']) ? $data['remaining_downpayment'] : null;
        $this->container['sales_tax'] = isset($data['sales_tax']) ? $data['sales_tax'] : null;
        $this->container['adjustment_reason'] = isset($data['adjustment_reason']) ? $data['adjustment_reason'] : null;
        $this->container['adjusted_by'] = isset($data['adjusted_by']) ? $data['adjusted_by'] : null;
        $this->container['payments'] = isset($data['payments']) ? $data['payments'] : null;
        $this->container['credits'] = isset($data['credits']) ? $data['credits'] : null;
        $this->container['balance'] = isset($data['balance']) ? $data['balance'] : null;
        $this->container['special_invoice_flag'] = isset($data['special_invoice_flag']) ? $data['special_invoice_flag'] : null;
        $this->container['_info'] = isset($data['_info']) ? $data['_info'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if (!is_null($this->container['invoice_number']) && (strlen($this->container['invoice_number']) > 15)) {
            $invalid_properties[] = "invalid value for 'invoice_number', the character length must be smaller than or equal to 15.";
        }

        if ($this->container['type'] === null) {
            $invalid_properties[] = "'type' can't be null";
        }
        $allowed_values = ["Agreement", "CreditMemo", "DownPayment", "Miscellaneous", "Progress", "Standard"];
        if (!in_array($this->container['type'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'type', must be one of #{allowed_values}.";
        }

        if ($this->container['company'] === null) {
            $invalid_properties[] = "'company' can't be null";
        }
        $allowed_values = ["All", "Agreement", "Project", "ProjectPhase", "SalesOrder", "Ticket"];
        if (!in_array($this->container['apply_to_type'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'apply_to_type', must be one of #{allowed_values}.";
        }

        if (!is_null($this->container['attention']) && (strlen($this->container['attention']) > 60)) {
            $invalid_properties[] = "invalid value for 'attention', the character length must be smaller than or equal to 60.";
        }

        if (!is_null($this->container['reference']) && (strlen($this->container['reference']) > 50)) {
            $invalid_properties[] = "invalid value for 'reference', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['customer_po']) && (strlen($this->container['customer_po']) > 50)) {
            $invalid_properties[] = "invalid value for 'customer_po', the character length must be smaller than or equal to 50.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if (strlen($this->container['invoice_number']) > 15) {
            return false;
        }
        if ($this->container['type'] === null) {
            return false;
        }
        $allowed_values = ["Agreement", "CreditMemo", "DownPayment", "Miscellaneous", "Progress", "Standard"];
        if (!in_array($this->container['type'], $allowed_values)) {
            return false;
        }
        if ($this->container['company'] === null) {
            return false;
        }
        $allowed_values = ["All", "Agreement", "Project", "ProjectPhase", "SalesOrder", "Ticket"];
        if (!in_array($this->container['apply_to_type'], $allowed_values)) {
            return false;
        }
        if (strlen($this->container['attention']) > 60) {
            return false;
        }
        if (strlen($this->container['reference']) > 50) {
            return false;
        }
        if (strlen($this->container['customer_po']) > 50) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets invoice_number
     * @return string
     */
    public function getInvoiceNumber()
    {
        return $this->container['invoice_number'];
    }

    /**
     * Sets invoice_number
     * @param string $invoice_number
     * @return $this
     */
    public function setInvoiceNumber($invoice_number)
    {
        if (!is_null($invoice_number) && (strlen($invoice_number) > 15)) {
            throw new \InvalidArgumentException('invalid length for $invoice_number when calling Invoice., must be smaller than or equal to 15.');
        }

        $this->container['invoice_number'] = $invoice_number;

        return $this;
    }

    /**
     * Gets type
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     * @param string $type
     * @return $this
     */
    public function setType($type)
    {
        $allowed_values = array('Agreement', 'CreditMemo', 'DownPayment', 'Miscellaneous', 'Progress', 'Standard');
        if ((!in_array($type, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'type', must be one of 'Agreement', 'CreditMemo', 'DownPayment', 'Miscellaneous', 'Progress', 'Standard'");
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets status
     * @return \Spinen\ConnectWise\Clients\Finance\Spinen\ConnectWise\Clients\Finance\Model\BillingStatusReference
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     * @param \Spinen\ConnectWise\Clients\Finance\Spinen\ConnectWise\Clients\Finance\Model\BillingStatusReference $status
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets company
     * @return \Spinen\ConnectWise\Clients\Finance\Spinen\ConnectWise\Clients\Finance\Model\CompanyReference
     */
    public function getCompany()
    {
        return $this->container['company'];
    }

    /**
     * Sets company
     * @param \Spinen\ConnectWise\Clients\Finance\Spinen\ConnectWise\Clients\Finance\Model\CompanyReference $company
     * @return $this
     */
    public function setCompany($company)
    {
        $this->container['company'] = $company;

        return $this;
    }

    /**
     * Gets bill_to_company
     * @return \Spinen\ConnectWise\Clients\Finance\Spinen\ConnectWise\Clients\Finance\Model\CompanyReference
     */
    public function getBillToCompany()
    {
        return $this->container['bill_to_company'];
    }

    /**
     * Sets bill_to_company
     * @param \Spinen\ConnectWise\Clients\Finance\Spinen\ConnectWise\Clients\Finance\Model\CompanyReference $bill_to_company
     * @return $this
     */
    public function setBillToCompany($bill_to_company)
    {
        $this->container['bill_to_company'] = $bill_to_company;

        return $this;
    }

    /**
     * Gets ship_to_company
     * @return \Spinen\ConnectWise\Clients\Finance\Spinen\ConnectWise\Clients\Finance\Model\CompanyReference
     */
    public function getShipToCompany()
    {
        return $this->container['ship_to_company'];
    }

    /**
     * Sets ship_to_company
     * @param \Spinen\ConnectWise\Clients\Finance\Spinen\ConnectWise\Clients\Finance\Model\CompanyReference $ship_to_company
     * @return $this
     */
    public function setShipToCompany($ship_to_company)
    {
        $this->container['ship_to_company'] = $ship_to_company;

        return $this;
    }

    /**
     * Gets apply_to_type
     * @return string
     */
    public function getApplyToType()
    {
        return $this->container['apply_to_type'];
    }

    /**
     * Sets apply_to_type
     * @param string $apply_to_type
     * @return $this
     */
    public function setApplyToType($apply_to_type)
    {
        $allowed_values = array('All', 'Agreement', 'Project', 'ProjectPhase', 'SalesOrder', 'Ticket');
        if (!is_null($apply_to_type) && (!in_array($apply_to_type, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'apply_to_type', must be one of 'All', 'Agreement', 'Project', 'ProjectPhase', 'SalesOrder', 'Ticket'");
        }
        $this->container['apply_to_type'] = $apply_to_type;

        return $this;
    }

    /**
     * Gets apply_to_id
     * @return int
     */
    public function getApplyToId()
    {
        return $this->container['apply_to_id'];
    }

    /**
     * Sets apply_to_id
     * @param int $apply_to_id
     * @return $this
     */
    public function setApplyToId($apply_to_id)
    {
        $this->container['apply_to_id'] = $apply_to_id;

        return $this;
    }

    /**
     * Gets attention
     * @return string
     */
    public function getAttention()
    {
        return $this->container['attention'];
    }

    /**
     * Sets attention
     * @param string $attention
     * @return $this
     */
    public function setAttention($attention)
    {
        if (!is_null($attention) && (strlen($attention) > 60)) {
            throw new \InvalidArgumentException('invalid length for $attention when calling Invoice., must be smaller than or equal to 60.');
        }

        $this->container['attention'] = $attention;

        return $this;
    }

    /**
     * Gets billing_site
     * @return \Spinen\ConnectWise\Clients\Finance\Spinen\ConnectWise\Clients\Finance\Model\SiteReference
     */
    public function getBillingSite()
    {
        return $this->container['billing_site'];
    }

    /**
     * Sets billing_site
     * @param \Spinen\ConnectWise\Clients\Finance\Spinen\ConnectWise\Clients\Finance\Model\SiteReference $billing_site
     * @return $this
     */
    public function setBillingSite($billing_site)
    {
        $this->container['billing_site'] = $billing_site;

        return $this;
    }

    /**
     * Gets shipping_site
     * @return \Spinen\ConnectWise\Clients\Finance\Spinen\ConnectWise\Clients\Finance\Model\SiteReference
     */
    public function getShippingSite()
    {
        return $this->container['shipping_site'];
    }

    /**
     * Sets shipping_site
     * @param \Spinen\ConnectWise\Clients\Finance\Spinen\ConnectWise\Clients\Finance\Model\SiteReference $shipping_site
     * @return $this
     */
    public function setShippingSite($shipping_site)
    {
        $this->container['shipping_site'] = $shipping_site;

        return $this;
    }

    /**
     * Gets billing_terms
     * @return \Spinen\ConnectWise\Clients\Finance\Spinen\ConnectWise\Clients\Finance\Model\BillingTermsReference
     */
    public function getBillingTerms()
    {
        return $this->container['billing_terms'];
    }

    /**
     * Sets billing_terms
     * @param \Spinen\ConnectWise\Clients\Finance\Spinen\ConnectWise\Clients\Finance\Model\BillingTermsReference $billing_terms
     * @return $this
     */
    public function setBillingTerms($billing_terms)
    {
        $this->container['billing_terms'] = $billing_terms;

        return $this;
    }

    /**
     * Gets reference
     * @return string
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     * @param string $reference
     * @return $this
     */
    public function setReference($reference)
    {
        if (!is_null($reference) && (strlen($reference) > 50)) {
            throw new \InvalidArgumentException('invalid length for $reference when calling Invoice., must be smaller than or equal to 50.');
        }

        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets customer_po
     * @return string
     */
    public function getCustomerPo()
    {
        return $this->container['customer_po'];
    }

    /**
     * Sets customer_po
     * @param string $customer_po
     * @return $this
     */
    public function setCustomerPo($customer_po)
    {
        if (!is_null($customer_po) && (strlen($customer_po) > 50)) {
            throw new \InvalidArgumentException('invalid length for $customer_po when calling Invoice., must be smaller than or equal to 50.');
        }

        $this->container['customer_po'] = $customer_po;

        return $this;
    }

    /**
     * Gets template_setup_id
     * @return int
     */
    public function getTemplateSetupId()
    {
        return $this->container['template_setup_id'];
    }

    /**
     * Sets template_setup_id
     * @param int $template_setup_id Can be obtained via InvoiceTemplate report
     * @return $this
     */
    public function setTemplateSetupId($template_setup_id)
    {
        $this->container['template_setup_id'] = $template_setup_id;

        return $this;
    }

    /**
     * Gets email_template_id
     * @return int
     */
    public function getEmailTemplateId()
    {
        return $this->container['email_template_id'];
    }

    /**
     * Sets email_template_id
     * @param int $email_template_id Can be obtained via InvoiceEmailTemplate report
     * @return $this
     */
    public function setEmailTemplateId($email_template_id)
    {
        $this->container['email_template_id'] = $email_template_id;

        return $this;
    }

    /**
     * Gets add_to_batch_email_list
     * @return bool
     */
    public function getAddToBatchEmailList()
    {
        return $this->container['add_to_batch_email_list'];
    }

    /**
     * Sets add_to_batch_email_list
     * @param bool $add_to_batch_email_list
     * @return $this
     */
    public function setAddToBatchEmailList($add_to_batch_email_list)
    {
        $this->container['add_to_batch_email_list'] = $add_to_batch_email_list;

        return $this;
    }

    /**
     * Gets date
     * @return \DateTime
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     * @param \DateTime $date
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets restrict_downpayment_flag
     * @return bool
     */
    public function getRestrictDownpaymentFlag()
    {
        return $this->container['restrict_downpayment_flag'];
    }

    /**
     * Sets restrict_downpayment_flag
     * @param bool $restrict_downpayment_flag
     * @return $this
     */
    public function setRestrictDownpaymentFlag($restrict_downpayment_flag)
    {
        $this->container['restrict_downpayment_flag'] = $restrict_downpayment_flag;

        return $this;
    }

    /**
     * Gets location_id
     * @return int
     */
    public function getLocationId()
    {
        return $this->container['location_id'];
    }

    /**
     * Sets location_id
     * @param int $location_id
     * @return $this
     */
    public function setLocationId($location_id)
    {
        $this->container['location_id'] = $location_id;

        return $this;
    }

    /**
     * Gets department_id
     * @return int
     */
    public function getDepartmentId()
    {
        return $this->container['department_id'];
    }

    /**
     * Sets department_id
     * @param int $department_id
     * @return $this
     */
    public function setDepartmentId($department_id)
    {
        $this->container['department_id'] = $department_id;

        return $this;
    }

    /**
     * Gets territory_id
     * @return int
     */
    public function getTerritoryId()
    {
        return $this->container['territory_id'];
    }

    /**
     * Sets territory_id
     * @param int $territory_id
     * @return $this
     */
    public function setTerritoryId($territory_id)
    {
        $this->container['territory_id'] = $territory_id;

        return $this;
    }

    /**
     * Gets top_comment
     * @return string
     */
    public function getTopComment()
    {
        return $this->container['top_comment'];
    }

    /**
     * Sets top_comment
     * @param string $top_comment
     * @return $this
     */
    public function setTopComment($top_comment)
    {
        $this->container['top_comment'] = $top_comment;

        return $this;
    }

    /**
     * Gets bottom_comment
     * @return string
     */
    public function getBottomComment()
    {
        return $this->container['bottom_comment'];
    }

    /**
     * Sets bottom_comment
     * @param string $bottom_comment
     * @return $this
     */
    public function setBottomComment($bottom_comment)
    {
        $this->container['bottom_comment'] = $bottom_comment;

        return $this;
    }

    /**
     * Gets taxable_flag
     * @return bool
     */
    public function getTaxableFlag()
    {
        return $this->container['taxable_flag'];
    }

    /**
     * Sets taxable_flag
     * @param bool $taxable_flag
     * @return $this
     */
    public function setTaxableFlag($taxable_flag)
    {
        $this->container['taxable_flag'] = $taxable_flag;

        return $this;
    }

    /**
     * Gets tax_code
     * @return \Spinen\ConnectWise\Clients\Finance\Spinen\ConnectWise\Clients\Finance\Model\TaxCodeReference
     */
    public function getTaxCode()
    {
        return $this->container['tax_code'];
    }

    /**
     * Sets tax_code
     * @param \Spinen\ConnectWise\Clients\Finance\Spinen\ConnectWise\Clients\Finance\Model\TaxCodeReference $tax_code
     * @return $this
     */
    public function setTaxCode($tax_code)
    {
        $this->container['tax_code'] = $tax_code;

        return $this;
    }

    /**
     * Gets internal_notes
     * @return string
     */
    public function getInternalNotes()
    {
        return $this->container['internal_notes'];
    }

    /**
     * Sets internal_notes
     * @param string $internal_notes
     * @return $this
     */
    public function setInternalNotes($internal_notes)
    {
        $this->container['internal_notes'] = $internal_notes;

        return $this;
    }

    /**
     * Gets downpayment_previously_taxed_flag
     * @return bool
     */
    public function getDownpaymentPreviouslyTaxedFlag()
    {
        return $this->container['downpayment_previously_taxed_flag'];
    }

    /**
     * Sets downpayment_previously_taxed_flag
     * @param bool $downpayment_previously_taxed_flag
     * @return $this
     */
    public function setDownpaymentPreviouslyTaxedFlag($downpayment_previously_taxed_flag)
    {
        $this->container['downpayment_previously_taxed_flag'] = $downpayment_previously_taxed_flag;

        return $this;
    }

    /**
     * Gets service_total
     * @return double
     */
    public function getServiceTotal()
    {
        return $this->container['service_total'];
    }

    /**
     * Sets service_total
     * @param double $service_total
     * @return $this
     */
    public function setServiceTotal($service_total)
    {
        $this->container['service_total'] = $service_total;

        return $this;
    }

    /**
     * Gets due_date
     * @return \DateTime
     */
    public function getDueDate()
    {
        return $this->container['due_date'];
    }

    /**
     * Sets due_date
     * @param \DateTime $due_date
     * @return $this
     */
    public function setDueDate($due_date)
    {
        $this->container['due_date'] = $due_date;

        return $this;
    }

    /**
     * Gets expense_total
     * @return double
     */
    public function getExpenseTotal()
    {
        return $this->container['expense_total'];
    }

    /**
     * Sets expense_total
     * @param double $expense_total
     * @return $this
     */
    public function setExpenseTotal($expense_total)
    {
        $this->container['expense_total'] = $expense_total;

        return $this;
    }

    /**
     * Gets product_total
     * @return double
     */
    public function getProductTotal()
    {
        return $this->container['product_total'];
    }

    /**
     * Sets product_total
     * @param double $product_total
     * @return $this
     */
    public function setProductTotal($product_total)
    {
        $this->container['product_total'] = $product_total;

        return $this;
    }

    /**
     * Gets previous_progress_applied
     * @return double
     */
    public function getPreviousProgressApplied()
    {
        return $this->container['previous_progress_applied'];
    }

    /**
     * Sets previous_progress_applied
     * @param double $previous_progress_applied
     * @return $this
     */
    public function setPreviousProgressApplied($previous_progress_applied)
    {
        $this->container['previous_progress_applied'] = $previous_progress_applied;

        return $this;
    }

    /**
     * Gets service_adjustment_amount
     * @return double
     */
    public function getServiceAdjustmentAmount()
    {
        return $this->container['service_adjustment_amount'];
    }

    /**
     * Sets service_adjustment_amount
     * @param double $service_adjustment_amount
     * @return $this
     */
    public function setServiceAdjustmentAmount($service_adjustment_amount)
    {
        $this->container['service_adjustment_amount'] = $service_adjustment_amount;

        return $this;
    }

    /**
     * Gets agreement_amount
     * @return double
     */
    public function getAgreementAmount()
    {
        return $this->container['agreement_amount'];
    }

    /**
     * Sets agreement_amount
     * @param double $agreement_amount
     * @return $this
     */
    public function setAgreementAmount($agreement_amount)
    {
        $this->container['agreement_amount'] = $agreement_amount;

        return $this;
    }

    /**
     * Gets downpayment_applied
     * @return double
     */
    public function getDownpaymentApplied()
    {
        return $this->container['downpayment_applied'];
    }

    /**
     * Sets downpayment_applied
     * @param double $downpayment_applied
     * @return $this
     */
    public function setDownpaymentApplied($downpayment_applied)
    {
        $this->container['downpayment_applied'] = $downpayment_applied;

        return $this;
    }

    /**
     * Gets subtotal
     * @return double
     */
    public function getSubtotal()
    {
        return $this->container['subtotal'];
    }

    /**
     * Sets subtotal
     * @param double $subtotal
     * @return $this
     */
    public function setSubtotal($subtotal)
    {
        $this->container['subtotal'] = $subtotal;

        return $this;
    }

    /**
     * Gets total
     * @return double
     */
    public function getTotal()
    {
        return $this->container['total'];
    }

    /**
     * Sets total
     * @param double $total
     * @return $this
     */
    public function setTotal($total)
    {
        $this->container['total'] = $total;

        return $this;
    }

    /**
     * Gets remaining_downpayment
     * @return double
     */
    public function getRemainingDownpayment()
    {
        return $this->container['remaining_downpayment'];
    }

    /**
     * Sets remaining_downpayment
     * @param double $remaining_downpayment
     * @return $this
     */
    public function setRemainingDownpayment($remaining_downpayment)
    {
        $this->container['remaining_downpayment'] = $remaining_downpayment;

        return $this;
    }

    /**
     * Gets sales_tax
     * @return double
     */
    public function getSalesTax()
    {
        return $this->container['sales_tax'];
    }

    /**
     * Sets sales_tax
     * @param double $sales_tax
     * @return $this
     */
    public function setSalesTax($sales_tax)
    {
        $this->container['sales_tax'] = $sales_tax;

        return $this;
    }

    /**
     * Gets adjustment_reason
     * @return string
     */
    public function getAdjustmentReason()
    {
        return $this->container['adjustment_reason'];
    }

    /**
     * Sets adjustment_reason
     * @param string $adjustment_reason
     * @return $this
     */
    public function setAdjustmentReason($adjustment_reason)
    {
        $this->container['adjustment_reason'] = $adjustment_reason;

        return $this;
    }

    /**
     * Gets adjusted_by
     * @return string
     */
    public function getAdjustedBy()
    {
        return $this->container['adjusted_by'];
    }

    /**
     * Sets adjusted_by
     * @param string $adjusted_by
     * @return $this
     */
    public function setAdjustedBy($adjusted_by)
    {
        $this->container['adjusted_by'] = $adjusted_by;

        return $this;
    }

    /**
     * Gets payments
     * @return double
     */
    public function getPayments()
    {
        return $this->container['payments'];
    }

    /**
     * Sets payments
     * @param double $payments
     * @return $this
     */
    public function setPayments($payments)
    {
        $this->container['payments'] = $payments;

        return $this;
    }

    /**
     * Gets credits
     * @return double
     */
    public function getCredits()
    {
        return $this->container['credits'];
    }

    /**
     * Sets credits
     * @param double $credits
     * @return $this
     */
    public function setCredits($credits)
    {
        $this->container['credits'] = $credits;

        return $this;
    }

    /**
     * Gets balance
     * @return double
     */
    public function getBalance()
    {
        return $this->container['balance'];
    }

    /**
     * Sets balance
     * @param double $balance
     * @return $this
     */
    public function setBalance($balance)
    {
        $this->container['balance'] = $balance;

        return $this;
    }

    /**
     * Gets special_invoice_flag
     * @return bool
     */
    public function getSpecialInvoiceFlag()
    {
        return $this->container['special_invoice_flag'];
    }

    /**
     * Sets special_invoice_flag
     * @param bool $special_invoice_flag
     * @return $this
     */
    public function setSpecialInvoiceFlag($special_invoice_flag)
    {
        $this->container['special_invoice_flag'] = $special_invoice_flag;

        return $this;
    }

    /**
     * Gets _info
     * @return \Spinen\ConnectWise\Clients\Finance\Spinen\ConnectWise\Clients\Finance\Model\Metadata
     */
    public function getInfo()
    {
        return $this->container['_info'];
    }

    /**
     * Sets _info
     * @param \Spinen\ConnectWise\Clients\Finance\Spinen\ConnectWise\Clients\Finance\Model\Metadata $_info Metadata of the entity
     * @return $this
     */
    public function setInfo($_info)
    {
        $this->container['_info'] = $_info;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Spinen\ConnectWise\Clients\Finance\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Spinen\ConnectWise\Clients\Finance\ObjectSerializer::sanitizeForSerialization($this));
    }
}


