<?php
/**
 * TaxCode
 *
 * PHP version 5
 *
 * @category Class
 * @package  Spinen\ConnectWise\Clients\Finance
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Finance API
 *
 * ConnectWise Finance API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: platform@connectwise.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Spinen\ConnectWise\Clients\Finance\Model;

use \ArrayAccess;

/**
 * TaxCode Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Spinen\ConnectWise\Clients\Finance
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class TaxCode implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'TaxCode';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'identifier' => 'string',
        'description' => 'string',
        'invoice_caption' => 'string',
        'country' => '\Spinen\ConnectWise\Clients\Finance\Model\CountryReference',
        'effective_date' => '\DateTime',
        'default_flag' => 'bool',
        'display_on_invoice_flag' => 'bool',
        'canada_calculate_gst_flag' => 'bool',
        'cancel_date' => '\DateTime',
        'level_one_rate' => 'double',
        'level_one_rate_type' => 'string',
        'level_one_taxable_max' => 'double',
        'level_one_caption' => 'string',
        'level_one_tax_code_xref' => 'string',
        'level_one_agency_xref' => 'string',
        'level_one_services_flag' => 'bool',
        'level_one_expenses_flag' => 'bool',
        'level_one_products_flag' => 'bool',
        'level_one_apply_single_unit_flag' => 'bool',
        'level_one_apply_single_unit_min' => 'double',
        'level_one_apply_single_unit_max' => 'double',
        'level_two_rate' => 'double',
        'level_two_rate_type' => 'string',
        'level_two_taxable_max' => 'double',
        'level_two_caption' => 'string',
        'level_two_tax_code_xref' => 'string',
        'level_two_agency_xref' => 'string',
        'level_two_services_flag' => 'bool',
        'level_two_expenses_flag' => 'bool',
        'level_two_products_flag' => 'bool',
        'level_two_apply_single_unit_flag' => 'bool',
        'level_two_apply_single_unit_min' => 'double',
        'level_two_apply_single_unit_max' => 'double',
        'level_three_rate' => 'double',
        'level_three_rate_type' => 'string',
        'level_three_taxable_max' => 'double',
        'level_three_caption' => 'string',
        'level_three_tax_code_xref' => 'string',
        'level_three_agency_xref' => 'string',
        'level_three_services_flag' => 'bool',
        'level_three_expenses_flag' => 'bool',
        'level_three_products_flag' => 'bool',
        'level_three_apply_single_unit_flag' => 'bool',
        'level_three_apply_single_unit_min' => 'double',
        'level_three_apply_single_unit_max' => 'double',
        'level_four_rate' => 'double',
        'level_four_rate_type' => 'string',
        'level_four_taxable_max' => 'double',
        'level_four_caption' => 'string',
        'level_four_tax_code_xref' => 'string',
        'level_four_agency_xref' => 'string',
        'level_four_services_flag' => 'bool',
        'level_four_expenses_flag' => 'bool',
        'level_four_products_flag' => 'bool',
        'level_four_apply_single_unit_flag' => 'bool',
        'level_four_apply_single_unit_min' => 'double',
        'level_four_apply_single_unit_max' => 'double',
        'level_five_rate' => 'double',
        'level_five_rate_type' => 'string',
        'level_five_taxable_max' => 'double',
        'level_five_caption' => 'string',
        'level_five_tax_code_xref' => 'string',
        'level_five_agency_xref' => 'string',
        'level_five_services_flag' => 'bool',
        'level_five_expenses_flag' => 'bool',
        'level_five_products_flag' => 'bool',
        'level_five_apply_single_unit_flag' => 'bool',
        'level_five_apply_single_unit_min' => 'double',
        'level_five_apply_single_unit_max' => 'double',
        '_info' => '\Spinen\ConnectWise\Clients\Finance\Model\Metadata'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'identifier' => 'identifier',
        'description' => 'description',
        'invoice_caption' => 'invoiceCaption',
        'country' => 'country',
        'effective_date' => 'effectiveDate',
        'default_flag' => 'defaultFlag',
        'display_on_invoice_flag' => 'displayOnInvoiceFlag',
        'canada_calculate_gst_flag' => 'canadaCalculateGSTFlag',
        'cancel_date' => 'cancelDate',
        'level_one_rate' => 'levelOneRate',
        'level_one_rate_type' => 'levelOneRateType',
        'level_one_taxable_max' => 'levelOneTaxableMax',
        'level_one_caption' => 'levelOneCaption',
        'level_one_tax_code_xref' => 'levelOneTaxCodeXref',
        'level_one_agency_xref' => 'levelOneAgencyXref',
        'level_one_services_flag' => 'levelOneServicesFlag',
        'level_one_expenses_flag' => 'levelOneExpensesFlag',
        'level_one_products_flag' => 'levelOneProductsFlag',
        'level_one_apply_single_unit_flag' => 'levelOneApplySingleUnitFlag',
        'level_one_apply_single_unit_min' => 'levelOneApplySingleUnitMin',
        'level_one_apply_single_unit_max' => 'levelOneApplySingleUnitMax',
        'level_two_rate' => 'levelTwoRate',
        'level_two_rate_type' => 'levelTwoRateType',
        'level_two_taxable_max' => 'levelTwoTaxableMax',
        'level_two_caption' => 'levelTwoCaption',
        'level_two_tax_code_xref' => 'levelTwoTaxCodeXref',
        'level_two_agency_xref' => 'levelTwoAgencyXref',
        'level_two_services_flag' => 'levelTwoServicesFlag',
        'level_two_expenses_flag' => 'levelTwoExpensesFlag',
        'level_two_products_flag' => 'levelTwoProductsFlag',
        'level_two_apply_single_unit_flag' => 'levelTwoApplySingleUnitFlag',
        'level_two_apply_single_unit_min' => 'levelTwoApplySingleUnitMin',
        'level_two_apply_single_unit_max' => 'levelTwoApplySingleUnitMax',
        'level_three_rate' => 'levelThreeRate',
        'level_three_rate_type' => 'levelThreeRateType',
        'level_three_taxable_max' => 'levelThreeTaxableMax',
        'level_three_caption' => 'levelThreeCaption',
        'level_three_tax_code_xref' => 'levelThreeTaxCodeXref',
        'level_three_agency_xref' => 'levelThreeAgencyXref',
        'level_three_services_flag' => 'levelThreeServicesFlag',
        'level_three_expenses_flag' => 'levelThreeExpensesFlag',
        'level_three_products_flag' => 'levelThreeProductsFlag',
        'level_three_apply_single_unit_flag' => 'levelThreeApplySingleUnitFlag',
        'level_three_apply_single_unit_min' => 'levelThreeApplySingleUnitMin',
        'level_three_apply_single_unit_max' => 'levelThreeApplySingleUnitMax',
        'level_four_rate' => 'levelFourRate',
        'level_four_rate_type' => 'levelFourRateType',
        'level_four_taxable_max' => 'levelFourTaxableMax',
        'level_four_caption' => 'levelFourCaption',
        'level_four_tax_code_xref' => 'levelFourTaxCodeXref',
        'level_four_agency_xref' => 'levelFourAgencyXref',
        'level_four_services_flag' => 'levelFourServicesFlag',
        'level_four_expenses_flag' => 'levelFourExpensesFlag',
        'level_four_products_flag' => 'levelFourProductsFlag',
        'level_four_apply_single_unit_flag' => 'levelFourApplySingleUnitFlag',
        'level_four_apply_single_unit_min' => 'levelFourApplySingleUnitMin',
        'level_four_apply_single_unit_max' => 'levelFourApplySingleUnitMax',
        'level_five_rate' => 'levelFiveRate',
        'level_five_rate_type' => 'levelFiveRateType',
        'level_five_taxable_max' => 'levelFiveTaxableMax',
        'level_five_caption' => 'levelFiveCaption',
        'level_five_tax_code_xref' => 'levelFiveTaxCodeXref',
        'level_five_agency_xref' => 'levelFiveAgencyXref',
        'level_five_services_flag' => 'levelFiveServicesFlag',
        'level_five_expenses_flag' => 'levelFiveExpensesFlag',
        'level_five_products_flag' => 'levelFiveProductsFlag',
        'level_five_apply_single_unit_flag' => 'levelFiveApplySingleUnitFlag',
        'level_five_apply_single_unit_min' => 'levelFiveApplySingleUnitMin',
        'level_five_apply_single_unit_max' => 'levelFiveApplySingleUnitMax',
        '_info' => '_info'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'identifier' => 'setIdentifier',
        'description' => 'setDescription',
        'invoice_caption' => 'setInvoiceCaption',
        'country' => 'setCountry',
        'effective_date' => 'setEffectiveDate',
        'default_flag' => 'setDefaultFlag',
        'display_on_invoice_flag' => 'setDisplayOnInvoiceFlag',
        'canada_calculate_gst_flag' => 'setCanadaCalculateGstFlag',
        'cancel_date' => 'setCancelDate',
        'level_one_rate' => 'setLevelOneRate',
        'level_one_rate_type' => 'setLevelOneRateType',
        'level_one_taxable_max' => 'setLevelOneTaxableMax',
        'level_one_caption' => 'setLevelOneCaption',
        'level_one_tax_code_xref' => 'setLevelOneTaxCodeXref',
        'level_one_agency_xref' => 'setLevelOneAgencyXref',
        'level_one_services_flag' => 'setLevelOneServicesFlag',
        'level_one_expenses_flag' => 'setLevelOneExpensesFlag',
        'level_one_products_flag' => 'setLevelOneProductsFlag',
        'level_one_apply_single_unit_flag' => 'setLevelOneApplySingleUnitFlag',
        'level_one_apply_single_unit_min' => 'setLevelOneApplySingleUnitMin',
        'level_one_apply_single_unit_max' => 'setLevelOneApplySingleUnitMax',
        'level_two_rate' => 'setLevelTwoRate',
        'level_two_rate_type' => 'setLevelTwoRateType',
        'level_two_taxable_max' => 'setLevelTwoTaxableMax',
        'level_two_caption' => 'setLevelTwoCaption',
        'level_two_tax_code_xref' => 'setLevelTwoTaxCodeXref',
        'level_two_agency_xref' => 'setLevelTwoAgencyXref',
        'level_two_services_flag' => 'setLevelTwoServicesFlag',
        'level_two_expenses_flag' => 'setLevelTwoExpensesFlag',
        'level_two_products_flag' => 'setLevelTwoProductsFlag',
        'level_two_apply_single_unit_flag' => 'setLevelTwoApplySingleUnitFlag',
        'level_two_apply_single_unit_min' => 'setLevelTwoApplySingleUnitMin',
        'level_two_apply_single_unit_max' => 'setLevelTwoApplySingleUnitMax',
        'level_three_rate' => 'setLevelThreeRate',
        'level_three_rate_type' => 'setLevelThreeRateType',
        'level_three_taxable_max' => 'setLevelThreeTaxableMax',
        'level_three_caption' => 'setLevelThreeCaption',
        'level_three_tax_code_xref' => 'setLevelThreeTaxCodeXref',
        'level_three_agency_xref' => 'setLevelThreeAgencyXref',
        'level_three_services_flag' => 'setLevelThreeServicesFlag',
        'level_three_expenses_flag' => 'setLevelThreeExpensesFlag',
        'level_three_products_flag' => 'setLevelThreeProductsFlag',
        'level_three_apply_single_unit_flag' => 'setLevelThreeApplySingleUnitFlag',
        'level_three_apply_single_unit_min' => 'setLevelThreeApplySingleUnitMin',
        'level_three_apply_single_unit_max' => 'setLevelThreeApplySingleUnitMax',
        'level_four_rate' => 'setLevelFourRate',
        'level_four_rate_type' => 'setLevelFourRateType',
        'level_four_taxable_max' => 'setLevelFourTaxableMax',
        'level_four_caption' => 'setLevelFourCaption',
        'level_four_tax_code_xref' => 'setLevelFourTaxCodeXref',
        'level_four_agency_xref' => 'setLevelFourAgencyXref',
        'level_four_services_flag' => 'setLevelFourServicesFlag',
        'level_four_expenses_flag' => 'setLevelFourExpensesFlag',
        'level_four_products_flag' => 'setLevelFourProductsFlag',
        'level_four_apply_single_unit_flag' => 'setLevelFourApplySingleUnitFlag',
        'level_four_apply_single_unit_min' => 'setLevelFourApplySingleUnitMin',
        'level_four_apply_single_unit_max' => 'setLevelFourApplySingleUnitMax',
        'level_five_rate' => 'setLevelFiveRate',
        'level_five_rate_type' => 'setLevelFiveRateType',
        'level_five_taxable_max' => 'setLevelFiveTaxableMax',
        'level_five_caption' => 'setLevelFiveCaption',
        'level_five_tax_code_xref' => 'setLevelFiveTaxCodeXref',
        'level_five_agency_xref' => 'setLevelFiveAgencyXref',
        'level_five_services_flag' => 'setLevelFiveServicesFlag',
        'level_five_expenses_flag' => 'setLevelFiveExpensesFlag',
        'level_five_products_flag' => 'setLevelFiveProductsFlag',
        'level_five_apply_single_unit_flag' => 'setLevelFiveApplySingleUnitFlag',
        'level_five_apply_single_unit_min' => 'setLevelFiveApplySingleUnitMin',
        'level_five_apply_single_unit_max' => 'setLevelFiveApplySingleUnitMax',
        '_info' => 'setInfo'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'identifier' => 'getIdentifier',
        'description' => 'getDescription',
        'invoice_caption' => 'getInvoiceCaption',
        'country' => 'getCountry',
        'effective_date' => 'getEffectiveDate',
        'default_flag' => 'getDefaultFlag',
        'display_on_invoice_flag' => 'getDisplayOnInvoiceFlag',
        'canada_calculate_gst_flag' => 'getCanadaCalculateGstFlag',
        'cancel_date' => 'getCancelDate',
        'level_one_rate' => 'getLevelOneRate',
        'level_one_rate_type' => 'getLevelOneRateType',
        'level_one_taxable_max' => 'getLevelOneTaxableMax',
        'level_one_caption' => 'getLevelOneCaption',
        'level_one_tax_code_xref' => 'getLevelOneTaxCodeXref',
        'level_one_agency_xref' => 'getLevelOneAgencyXref',
        'level_one_services_flag' => 'getLevelOneServicesFlag',
        'level_one_expenses_flag' => 'getLevelOneExpensesFlag',
        'level_one_products_flag' => 'getLevelOneProductsFlag',
        'level_one_apply_single_unit_flag' => 'getLevelOneApplySingleUnitFlag',
        'level_one_apply_single_unit_min' => 'getLevelOneApplySingleUnitMin',
        'level_one_apply_single_unit_max' => 'getLevelOneApplySingleUnitMax',
        'level_two_rate' => 'getLevelTwoRate',
        'level_two_rate_type' => 'getLevelTwoRateType',
        'level_two_taxable_max' => 'getLevelTwoTaxableMax',
        'level_two_caption' => 'getLevelTwoCaption',
        'level_two_tax_code_xref' => 'getLevelTwoTaxCodeXref',
        'level_two_agency_xref' => 'getLevelTwoAgencyXref',
        'level_two_services_flag' => 'getLevelTwoServicesFlag',
        'level_two_expenses_flag' => 'getLevelTwoExpensesFlag',
        'level_two_products_flag' => 'getLevelTwoProductsFlag',
        'level_two_apply_single_unit_flag' => 'getLevelTwoApplySingleUnitFlag',
        'level_two_apply_single_unit_min' => 'getLevelTwoApplySingleUnitMin',
        'level_two_apply_single_unit_max' => 'getLevelTwoApplySingleUnitMax',
        'level_three_rate' => 'getLevelThreeRate',
        'level_three_rate_type' => 'getLevelThreeRateType',
        'level_three_taxable_max' => 'getLevelThreeTaxableMax',
        'level_three_caption' => 'getLevelThreeCaption',
        'level_three_tax_code_xref' => 'getLevelThreeTaxCodeXref',
        'level_three_agency_xref' => 'getLevelThreeAgencyXref',
        'level_three_services_flag' => 'getLevelThreeServicesFlag',
        'level_three_expenses_flag' => 'getLevelThreeExpensesFlag',
        'level_three_products_flag' => 'getLevelThreeProductsFlag',
        'level_three_apply_single_unit_flag' => 'getLevelThreeApplySingleUnitFlag',
        'level_three_apply_single_unit_min' => 'getLevelThreeApplySingleUnitMin',
        'level_three_apply_single_unit_max' => 'getLevelThreeApplySingleUnitMax',
        'level_four_rate' => 'getLevelFourRate',
        'level_four_rate_type' => 'getLevelFourRateType',
        'level_four_taxable_max' => 'getLevelFourTaxableMax',
        'level_four_caption' => 'getLevelFourCaption',
        'level_four_tax_code_xref' => 'getLevelFourTaxCodeXref',
        'level_four_agency_xref' => 'getLevelFourAgencyXref',
        'level_four_services_flag' => 'getLevelFourServicesFlag',
        'level_four_expenses_flag' => 'getLevelFourExpensesFlag',
        'level_four_products_flag' => 'getLevelFourProductsFlag',
        'level_four_apply_single_unit_flag' => 'getLevelFourApplySingleUnitFlag',
        'level_four_apply_single_unit_min' => 'getLevelFourApplySingleUnitMin',
        'level_four_apply_single_unit_max' => 'getLevelFourApplySingleUnitMax',
        'level_five_rate' => 'getLevelFiveRate',
        'level_five_rate_type' => 'getLevelFiveRateType',
        'level_five_taxable_max' => 'getLevelFiveTaxableMax',
        'level_five_caption' => 'getLevelFiveCaption',
        'level_five_tax_code_xref' => 'getLevelFiveTaxCodeXref',
        'level_five_agency_xref' => 'getLevelFiveAgencyXref',
        'level_five_services_flag' => 'getLevelFiveServicesFlag',
        'level_five_expenses_flag' => 'getLevelFiveExpensesFlag',
        'level_five_products_flag' => 'getLevelFiveProductsFlag',
        'level_five_apply_single_unit_flag' => 'getLevelFiveApplySingleUnitFlag',
        'level_five_apply_single_unit_min' => 'getLevelFiveApplySingleUnitMin',
        'level_five_apply_single_unit_max' => 'getLevelFiveApplySingleUnitMax',
        '_info' => 'getInfo'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const LEVEL_ONE_RATE_TYPE_AMOUNT = 'Amount';
    const LEVEL_ONE_RATE_TYPE_PERCENT = 'Percent';
    const LEVEL_TWO_RATE_TYPE_AMOUNT = 'Amount';
    const LEVEL_TWO_RATE_TYPE_PERCENT = 'Percent';
    const LEVEL_THREE_RATE_TYPE_AMOUNT = 'Amount';
    const LEVEL_THREE_RATE_TYPE_PERCENT = 'Percent';
    const LEVEL_FOUR_RATE_TYPE_AMOUNT = 'Amount';
    const LEVEL_FOUR_RATE_TYPE_PERCENT = 'Percent';
    const LEVEL_FIVE_RATE_TYPE_AMOUNT = 'Amount';
    const LEVEL_FIVE_RATE_TYPE_PERCENT = 'Percent';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getLevelOneRateTypeAllowableValues()
    {
        return [
            self::LEVEL_ONE_RATE_TYPE_AMOUNT,
            self::LEVEL_ONE_RATE_TYPE_PERCENT,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getLevelTwoRateTypeAllowableValues()
    {
        return [
            self::LEVEL_TWO_RATE_TYPE_AMOUNT,
            self::LEVEL_TWO_RATE_TYPE_PERCENT,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getLevelThreeRateTypeAllowableValues()
    {
        return [
            self::LEVEL_THREE_RATE_TYPE_AMOUNT,
            self::LEVEL_THREE_RATE_TYPE_PERCENT,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getLevelFourRateTypeAllowableValues()
    {
        return [
            self::LEVEL_FOUR_RATE_TYPE_AMOUNT,
            self::LEVEL_FOUR_RATE_TYPE_PERCENT,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getLevelFiveRateTypeAllowableValues()
    {
        return [
            self::LEVEL_FIVE_RATE_TYPE_AMOUNT,
            self::LEVEL_FIVE_RATE_TYPE_PERCENT,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['identifier'] = isset($data['identifier']) ? $data['identifier'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['invoice_caption'] = isset($data['invoice_caption']) ? $data['invoice_caption'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['effective_date'] = isset($data['effective_date']) ? $data['effective_date'] : null;
        $this->container['default_flag'] = isset($data['default_flag']) ? $data['default_flag'] : null;
        $this->container['display_on_invoice_flag'] = isset($data['display_on_invoice_flag']) ? $data['display_on_invoice_flag'] : null;
        $this->container['canada_calculate_gst_flag'] = isset($data['canada_calculate_gst_flag']) ? $data['canada_calculate_gst_flag'] : null;
        $this->container['cancel_date'] = isset($data['cancel_date']) ? $data['cancel_date'] : null;
        $this->container['level_one_rate'] = isset($data['level_one_rate']) ? $data['level_one_rate'] : null;
        $this->container['level_one_rate_type'] = isset($data['level_one_rate_type']) ? $data['level_one_rate_type'] : null;
        $this->container['level_one_taxable_max'] = isset($data['level_one_taxable_max']) ? $data['level_one_taxable_max'] : null;
        $this->container['level_one_caption'] = isset($data['level_one_caption']) ? $data['level_one_caption'] : null;
        $this->container['level_one_tax_code_xref'] = isset($data['level_one_tax_code_xref']) ? $data['level_one_tax_code_xref'] : null;
        $this->container['level_one_agency_xref'] = isset($data['level_one_agency_xref']) ? $data['level_one_agency_xref'] : null;
        $this->container['level_one_services_flag'] = isset($data['level_one_services_flag']) ? $data['level_one_services_flag'] : null;
        $this->container['level_one_expenses_flag'] = isset($data['level_one_expenses_flag']) ? $data['level_one_expenses_flag'] : null;
        $this->container['level_one_products_flag'] = isset($data['level_one_products_flag']) ? $data['level_one_products_flag'] : null;
        $this->container['level_one_apply_single_unit_flag'] = isset($data['level_one_apply_single_unit_flag']) ? $data['level_one_apply_single_unit_flag'] : null;
        $this->container['level_one_apply_single_unit_min'] = isset($data['level_one_apply_single_unit_min']) ? $data['level_one_apply_single_unit_min'] : null;
        $this->container['level_one_apply_single_unit_max'] = isset($data['level_one_apply_single_unit_max']) ? $data['level_one_apply_single_unit_max'] : null;
        $this->container['level_two_rate'] = isset($data['level_two_rate']) ? $data['level_two_rate'] : null;
        $this->container['level_two_rate_type'] = isset($data['level_two_rate_type']) ? $data['level_two_rate_type'] : null;
        $this->container['level_two_taxable_max'] = isset($data['level_two_taxable_max']) ? $data['level_two_taxable_max'] : null;
        $this->container['level_two_caption'] = isset($data['level_two_caption']) ? $data['level_two_caption'] : null;
        $this->container['level_two_tax_code_xref'] = isset($data['level_two_tax_code_xref']) ? $data['level_two_tax_code_xref'] : null;
        $this->container['level_two_agency_xref'] = isset($data['level_two_agency_xref']) ? $data['level_two_agency_xref'] : null;
        $this->container['level_two_services_flag'] = isset($data['level_two_services_flag']) ? $data['level_two_services_flag'] : null;
        $this->container['level_two_expenses_flag'] = isset($data['level_two_expenses_flag']) ? $data['level_two_expenses_flag'] : null;
        $this->container['level_two_products_flag'] = isset($data['level_two_products_flag']) ? $data['level_two_products_flag'] : null;
        $this->container['level_two_apply_single_unit_flag'] = isset($data['level_two_apply_single_unit_flag']) ? $data['level_two_apply_single_unit_flag'] : null;
        $this->container['level_two_apply_single_unit_min'] = isset($data['level_two_apply_single_unit_min']) ? $data['level_two_apply_single_unit_min'] : null;
        $this->container['level_two_apply_single_unit_max'] = isset($data['level_two_apply_single_unit_max']) ? $data['level_two_apply_single_unit_max'] : null;
        $this->container['level_three_rate'] = isset($data['level_three_rate']) ? $data['level_three_rate'] : null;
        $this->container['level_three_rate_type'] = isset($data['level_three_rate_type']) ? $data['level_three_rate_type'] : null;
        $this->container['level_three_taxable_max'] = isset($data['level_three_taxable_max']) ? $data['level_three_taxable_max'] : null;
        $this->container['level_three_caption'] = isset($data['level_three_caption']) ? $data['level_three_caption'] : null;
        $this->container['level_three_tax_code_xref'] = isset($data['level_three_tax_code_xref']) ? $data['level_three_tax_code_xref'] : null;
        $this->container['level_three_agency_xref'] = isset($data['level_three_agency_xref']) ? $data['level_three_agency_xref'] : null;
        $this->container['level_three_services_flag'] = isset($data['level_three_services_flag']) ? $data['level_three_services_flag'] : null;
        $this->container['level_three_expenses_flag'] = isset($data['level_three_expenses_flag']) ? $data['level_three_expenses_flag'] : null;
        $this->container['level_three_products_flag'] = isset($data['level_three_products_flag']) ? $data['level_three_products_flag'] : null;
        $this->container['level_three_apply_single_unit_flag'] = isset($data['level_three_apply_single_unit_flag']) ? $data['level_three_apply_single_unit_flag'] : null;
        $this->container['level_three_apply_single_unit_min'] = isset($data['level_three_apply_single_unit_min']) ? $data['level_three_apply_single_unit_min'] : null;
        $this->container['level_three_apply_single_unit_max'] = isset($data['level_three_apply_single_unit_max']) ? $data['level_three_apply_single_unit_max'] : null;
        $this->container['level_four_rate'] = isset($data['level_four_rate']) ? $data['level_four_rate'] : null;
        $this->container['level_four_rate_type'] = isset($data['level_four_rate_type']) ? $data['level_four_rate_type'] : null;
        $this->container['level_four_taxable_max'] = isset($data['level_four_taxable_max']) ? $data['level_four_taxable_max'] : null;
        $this->container['level_four_caption'] = isset($data['level_four_caption']) ? $data['level_four_caption'] : null;
        $this->container['level_four_tax_code_xref'] = isset($data['level_four_tax_code_xref']) ? $data['level_four_tax_code_xref'] : null;
        $this->container['level_four_agency_xref'] = isset($data['level_four_agency_xref']) ? $data['level_four_agency_xref'] : null;
        $this->container['level_four_services_flag'] = isset($data['level_four_services_flag']) ? $data['level_four_services_flag'] : null;
        $this->container['level_four_expenses_flag'] = isset($data['level_four_expenses_flag']) ? $data['level_four_expenses_flag'] : null;
        $this->container['level_four_products_flag'] = isset($data['level_four_products_flag']) ? $data['level_four_products_flag'] : null;
        $this->container['level_four_apply_single_unit_flag'] = isset($data['level_four_apply_single_unit_flag']) ? $data['level_four_apply_single_unit_flag'] : null;
        $this->container['level_four_apply_single_unit_min'] = isset($data['level_four_apply_single_unit_min']) ? $data['level_four_apply_single_unit_min'] : null;
        $this->container['level_four_apply_single_unit_max'] = isset($data['level_four_apply_single_unit_max']) ? $data['level_four_apply_single_unit_max'] : null;
        $this->container['level_five_rate'] = isset($data['level_five_rate']) ? $data['level_five_rate'] : null;
        $this->container['level_five_rate_type'] = isset($data['level_five_rate_type']) ? $data['level_five_rate_type'] : null;
        $this->container['level_five_taxable_max'] = isset($data['level_five_taxable_max']) ? $data['level_five_taxable_max'] : null;
        $this->container['level_five_caption'] = isset($data['level_five_caption']) ? $data['level_five_caption'] : null;
        $this->container['level_five_tax_code_xref'] = isset($data['level_five_tax_code_xref']) ? $data['level_five_tax_code_xref'] : null;
        $this->container['level_five_agency_xref'] = isset($data['level_five_agency_xref']) ? $data['level_five_agency_xref'] : null;
        $this->container['level_five_services_flag'] = isset($data['level_five_services_flag']) ? $data['level_five_services_flag'] : null;
        $this->container['level_five_expenses_flag'] = isset($data['level_five_expenses_flag']) ? $data['level_five_expenses_flag'] : null;
        $this->container['level_five_products_flag'] = isset($data['level_five_products_flag']) ? $data['level_five_products_flag'] : null;
        $this->container['level_five_apply_single_unit_flag'] = isset($data['level_five_apply_single_unit_flag']) ? $data['level_five_apply_single_unit_flag'] : null;
        $this->container['level_five_apply_single_unit_min'] = isset($data['level_five_apply_single_unit_min']) ? $data['level_five_apply_single_unit_min'] : null;
        $this->container['level_five_apply_single_unit_max'] = isset($data['level_five_apply_single_unit_max']) ? $data['level_five_apply_single_unit_max'] : null;
        $this->container['_info'] = isset($data['_info']) ? $data['_info'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if ($this->container['identifier'] === null) {
            $invalid_properties[] = "'identifier' can't be null";
        }
        if ((strlen($this->container['identifier']) > 8)) {
            $invalid_properties[] = "invalid value for 'identifier', the character length must be smaller than or equal to 8.";
        }

        if ($this->container['description'] === null) {
            $invalid_properties[] = "'description' can't be null";
        }
        if ((strlen($this->container['description']) > 50)) {
            $invalid_properties[] = "invalid value for 'description', the character length must be smaller than or equal to 50.";
        }

        if ($this->container['invoice_caption'] === null) {
            $invalid_properties[] = "'invoice_caption' can't be null";
        }
        if ((strlen($this->container['invoice_caption']) > 25)) {
            $invalid_properties[] = "invalid value for 'invoice_caption', the character length must be smaller than or equal to 25.";
        }

        if ($this->container['effective_date'] === null) {
            $invalid_properties[] = "'effective_date' can't be null";
        }
        $allowed_values = ["Amount", "Percent"];
        if (!in_array($this->container['level_one_rate_type'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'level_one_rate_type', must be one of #{allowed_values}.";
        }

        if (!is_null($this->container['level_one_caption']) && (strlen($this->container['level_one_caption']) > 25)) {
            $invalid_properties[] = "invalid value for 'level_one_caption', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['level_one_tax_code_xref']) && (strlen($this->container['level_one_tax_code_xref']) > 50)) {
            $invalid_properties[] = "invalid value for 'level_one_tax_code_xref', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['level_one_agency_xref']) && (strlen($this->container['level_one_agency_xref']) > 100)) {
            $invalid_properties[] = "invalid value for 'level_one_agency_xref', the character length must be smaller than or equal to 100.";
        }

        $allowed_values = ["Amount", "Percent"];
        if (!in_array($this->container['level_two_rate_type'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'level_two_rate_type', must be one of #{allowed_values}.";
        }

        if (!is_null($this->container['level_two_caption']) && (strlen($this->container['level_two_caption']) > 25)) {
            $invalid_properties[] = "invalid value for 'level_two_caption', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['level_two_tax_code_xref']) && (strlen($this->container['level_two_tax_code_xref']) > 50)) {
            $invalid_properties[] = "invalid value for 'level_two_tax_code_xref', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['level_two_agency_xref']) && (strlen($this->container['level_two_agency_xref']) > 100)) {
            $invalid_properties[] = "invalid value for 'level_two_agency_xref', the character length must be smaller than or equal to 100.";
        }

        $allowed_values = ["Amount", "Percent"];
        if (!in_array($this->container['level_three_rate_type'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'level_three_rate_type', must be one of #{allowed_values}.";
        }

        if (!is_null($this->container['level_three_caption']) && (strlen($this->container['level_three_caption']) > 25)) {
            $invalid_properties[] = "invalid value for 'level_three_caption', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['level_three_tax_code_xref']) && (strlen($this->container['level_three_tax_code_xref']) > 50)) {
            $invalid_properties[] = "invalid value for 'level_three_tax_code_xref', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['level_three_agency_xref']) && (strlen($this->container['level_three_agency_xref']) > 100)) {
            $invalid_properties[] = "invalid value for 'level_three_agency_xref', the character length must be smaller than or equal to 100.";
        }

        $allowed_values = ["Amount", "Percent"];
        if (!in_array($this->container['level_four_rate_type'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'level_four_rate_type', must be one of #{allowed_values}.";
        }

        if (!is_null($this->container['level_four_caption']) && (strlen($this->container['level_four_caption']) > 25)) {
            $invalid_properties[] = "invalid value for 'level_four_caption', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['level_four_tax_code_xref']) && (strlen($this->container['level_four_tax_code_xref']) > 50)) {
            $invalid_properties[] = "invalid value for 'level_four_tax_code_xref', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['level_four_agency_xref']) && (strlen($this->container['level_four_agency_xref']) > 100)) {
            $invalid_properties[] = "invalid value for 'level_four_agency_xref', the character length must be smaller than or equal to 100.";
        }

        $allowed_values = ["Amount", "Percent"];
        if (!in_array($this->container['level_five_rate_type'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'level_five_rate_type', must be one of #{allowed_values}.";
        }

        if (!is_null($this->container['level_five_caption']) && (strlen($this->container['level_five_caption']) > 25)) {
            $invalid_properties[] = "invalid value for 'level_five_caption', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['level_five_tax_code_xref']) && (strlen($this->container['level_five_tax_code_xref']) > 50)) {
            $invalid_properties[] = "invalid value for 'level_five_tax_code_xref', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['level_five_agency_xref']) && (strlen($this->container['level_five_agency_xref']) > 100)) {
            $invalid_properties[] = "invalid value for 'level_five_agency_xref', the character length must be smaller than or equal to 100.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['identifier'] === null) {
            return false;
        }
        if (strlen($this->container['identifier']) > 8) {
            return false;
        }
        if ($this->container['description'] === null) {
            return false;
        }
        if (strlen($this->container['description']) > 50) {
            return false;
        }
        if ($this->container['invoice_caption'] === null) {
            return false;
        }
        if (strlen($this->container['invoice_caption']) > 25) {
            return false;
        }
        if ($this->container['effective_date'] === null) {
            return false;
        }
        $allowed_values = ["Amount", "Percent"];
        if (!in_array($this->container['level_one_rate_type'], $allowed_values)) {
            return false;
        }
        if (strlen($this->container['level_one_caption']) > 25) {
            return false;
        }
        if (strlen($this->container['level_one_tax_code_xref']) > 50) {
            return false;
        }
        if (strlen($this->container['level_one_agency_xref']) > 100) {
            return false;
        }
        $allowed_values = ["Amount", "Percent"];
        if (!in_array($this->container['level_two_rate_type'], $allowed_values)) {
            return false;
        }
        if (strlen($this->container['level_two_caption']) > 25) {
            return false;
        }
        if (strlen($this->container['level_two_tax_code_xref']) > 50) {
            return false;
        }
        if (strlen($this->container['level_two_agency_xref']) > 100) {
            return false;
        }
        $allowed_values = ["Amount", "Percent"];
        if (!in_array($this->container['level_three_rate_type'], $allowed_values)) {
            return false;
        }
        if (strlen($this->container['level_three_caption']) > 25) {
            return false;
        }
        if (strlen($this->container['level_three_tax_code_xref']) > 50) {
            return false;
        }
        if (strlen($this->container['level_three_agency_xref']) > 100) {
            return false;
        }
        $allowed_values = ["Amount", "Percent"];
        if (!in_array($this->container['level_four_rate_type'], $allowed_values)) {
            return false;
        }
        if (strlen($this->container['level_four_caption']) > 25) {
            return false;
        }
        if (strlen($this->container['level_four_tax_code_xref']) > 50) {
            return false;
        }
        if (strlen($this->container['level_four_agency_xref']) > 100) {
            return false;
        }
        $allowed_values = ["Amount", "Percent"];
        if (!in_array($this->container['level_five_rate_type'], $allowed_values)) {
            return false;
        }
        if (strlen($this->container['level_five_caption']) > 25) {
            return false;
        }
        if (strlen($this->container['level_five_tax_code_xref']) > 50) {
            return false;
        }
        if (strlen($this->container['level_five_agency_xref']) > 100) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets identifier
     * @return string
     */
    public function getIdentifier()
    {
        return $this->container['identifier'];
    }

    /**
     * Sets identifier
     * @param string $identifier
     * @return $this
     */
    public function setIdentifier($identifier)
    {
        if ((strlen($identifier) > 8)) {
            throw new \InvalidArgumentException('invalid length for $identifier when calling TaxCode., must be smaller than or equal to 8.');
        }

        $this->container['identifier'] = $identifier;

        return $this;
    }

    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     * @param string $description
     * @return $this
     */
    public function setDescription($description)
    {
        if ((strlen($description) > 50)) {
            throw new \InvalidArgumentException('invalid length for $description when calling TaxCode., must be smaller than or equal to 50.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets invoice_caption
     * @return string
     */
    public function getInvoiceCaption()
    {
        return $this->container['invoice_caption'];
    }

    /**
     * Sets invoice_caption
     * @param string $invoice_caption
     * @return $this
     */
    public function setInvoiceCaption($invoice_caption)
    {
        if ((strlen($invoice_caption) > 25)) {
            throw new \InvalidArgumentException('invalid length for $invoice_caption when calling TaxCode., must be smaller than or equal to 25.');
        }

        $this->container['invoice_caption'] = $invoice_caption;

        return $this;
    }

    /**
     * Gets country
     * @return \Spinen\ConnectWise\Clients\Finance\Model\CountryReference
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     * @param \Spinen\ConnectWise\Clients\Finance\Model\CountryReference $country
     * @return $this
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets effective_date
     * @return \DateTime
     */
    public function getEffectiveDate()
    {
        return $this->container['effective_date'];
    }

    /**
     * Sets effective_date
     * @param \DateTime $effective_date
     * @return $this
     */
    public function setEffectiveDate($effective_date)
    {
        $this->container['effective_date'] = $effective_date;

        return $this;
    }

    /**
     * Gets default_flag
     * @return bool
     */
    public function getDefaultFlag()
    {
        return $this->container['default_flag'];
    }

    /**
     * Sets default_flag
     * @param bool $default_flag
     * @return $this
     */
    public function setDefaultFlag($default_flag)
    {
        $this->container['default_flag'] = $default_flag;

        return $this;
    }

    /**
     * Gets display_on_invoice_flag
     * @return bool
     */
    public function getDisplayOnInvoiceFlag()
    {
        return $this->container['display_on_invoice_flag'];
    }

    /**
     * Sets display_on_invoice_flag
     * @param bool $display_on_invoice_flag
     * @return $this
     */
    public function setDisplayOnInvoiceFlag($display_on_invoice_flag)
    {
        $this->container['display_on_invoice_flag'] = $display_on_invoice_flag;

        return $this;
    }

    /**
     * Gets canada_calculate_gst_flag
     * @return bool
     */
    public function getCanadaCalculateGstFlag()
    {
        return $this->container['canada_calculate_gst_flag'];
    }

    /**
     * Sets canada_calculate_gst_flag
     * @param bool $canada_calculate_gst_flag
     * @return $this
     */
    public function setCanadaCalculateGstFlag($canada_calculate_gst_flag)
    {
        $this->container['canada_calculate_gst_flag'] = $canada_calculate_gst_flag;

        return $this;
    }

    /**
     * Gets cancel_date
     * @return \DateTime
     */
    public function getCancelDate()
    {
        return $this->container['cancel_date'];
    }

    /**
     * Sets cancel_date
     * @param \DateTime $cancel_date
     * @return $this
     */
    public function setCancelDate($cancel_date)
    {
        $this->container['cancel_date'] = $cancel_date;

        return $this;
    }

    /**
     * Gets level_one_rate
     * @return double
     */
    public function getLevelOneRate()
    {
        return $this->container['level_one_rate'];
    }

    /**
     * Sets level_one_rate
     * @param double $level_one_rate
     * @return $this
     */
    public function setLevelOneRate($level_one_rate)
    {
        $this->container['level_one_rate'] = $level_one_rate;

        return $this;
    }

    /**
     * Gets level_one_rate_type
     * @return string
     */
    public function getLevelOneRateType()
    {
        return $this->container['level_one_rate_type'];
    }

    /**
     * Sets level_one_rate_type
     * @param string $level_one_rate_type
     * @return $this
     */
    public function setLevelOneRateType($level_one_rate_type)
    {
        $allowed_values = array('Amount', 'Percent');
        if (!is_null($level_one_rate_type) && (!in_array($level_one_rate_type, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'level_one_rate_type', must be one of 'Amount', 'Percent'");
        }
        $this->container['level_one_rate_type'] = $level_one_rate_type;

        return $this;
    }

    /**
     * Gets level_one_taxable_max
     * @return double
     */
    public function getLevelOneTaxableMax()
    {
        return $this->container['level_one_taxable_max'];
    }

    /**
     * Sets level_one_taxable_max
     * @param double $level_one_taxable_max
     * @return $this
     */
    public function setLevelOneTaxableMax($level_one_taxable_max)
    {
        $this->container['level_one_taxable_max'] = $level_one_taxable_max;

        return $this;
    }

    /**
     * Gets level_one_caption
     * @return string
     */
    public function getLevelOneCaption()
    {
        return $this->container['level_one_caption'];
    }

    /**
     * Sets level_one_caption
     * @param string $level_one_caption
     * @return $this
     */
    public function setLevelOneCaption($level_one_caption)
    {
        if (!is_null($level_one_caption) && (strlen($level_one_caption) > 25)) {
            throw new \InvalidArgumentException('invalid length for $level_one_caption when calling TaxCode., must be smaller than or equal to 25.');
        }

        $this->container['level_one_caption'] = $level_one_caption;

        return $this;
    }

    /**
     * Gets level_one_tax_code_xref
     * @return string
     */
    public function getLevelOneTaxCodeXref()
    {
        return $this->container['level_one_tax_code_xref'];
    }

    /**
     * Sets level_one_tax_code_xref
     * @param string $level_one_tax_code_xref
     * @return $this
     */
    public function setLevelOneTaxCodeXref($level_one_tax_code_xref)
    {
        if (!is_null($level_one_tax_code_xref) && (strlen($level_one_tax_code_xref) > 50)) {
            throw new \InvalidArgumentException('invalid length for $level_one_tax_code_xref when calling TaxCode., must be smaller than or equal to 50.');
        }

        $this->container['level_one_tax_code_xref'] = $level_one_tax_code_xref;

        return $this;
    }

    /**
     * Gets level_one_agency_xref
     * @return string
     */
    public function getLevelOneAgencyXref()
    {
        return $this->container['level_one_agency_xref'];
    }

    /**
     * Sets level_one_agency_xref
     * @param string $level_one_agency_xref
     * @return $this
     */
    public function setLevelOneAgencyXref($level_one_agency_xref)
    {
        if (!is_null($level_one_agency_xref) && (strlen($level_one_agency_xref) > 100)) {
            throw new \InvalidArgumentException('invalid length for $level_one_agency_xref when calling TaxCode., must be smaller than or equal to 100.');
        }

        $this->container['level_one_agency_xref'] = $level_one_agency_xref;

        return $this;
    }

    /**
     * Gets level_one_services_flag
     * @return bool
     */
    public function getLevelOneServicesFlag()
    {
        return $this->container['level_one_services_flag'];
    }

    /**
     * Sets level_one_services_flag
     * @param bool $level_one_services_flag
     * @return $this
     */
    public function setLevelOneServicesFlag($level_one_services_flag)
    {
        $this->container['level_one_services_flag'] = $level_one_services_flag;

        return $this;
    }

    /**
     * Gets level_one_expenses_flag
     * @return bool
     */
    public function getLevelOneExpensesFlag()
    {
        return $this->container['level_one_expenses_flag'];
    }

    /**
     * Sets level_one_expenses_flag
     * @param bool $level_one_expenses_flag
     * @return $this
     */
    public function setLevelOneExpensesFlag($level_one_expenses_flag)
    {
        $this->container['level_one_expenses_flag'] = $level_one_expenses_flag;

        return $this;
    }

    /**
     * Gets level_one_products_flag
     * @return bool
     */
    public function getLevelOneProductsFlag()
    {
        return $this->container['level_one_products_flag'];
    }

    /**
     * Sets level_one_products_flag
     * @param bool $level_one_products_flag
     * @return $this
     */
    public function setLevelOneProductsFlag($level_one_products_flag)
    {
        $this->container['level_one_products_flag'] = $level_one_products_flag;

        return $this;
    }

    /**
     * Gets level_one_apply_single_unit_flag
     * @return bool
     */
    public function getLevelOneApplySingleUnitFlag()
    {
        return $this->container['level_one_apply_single_unit_flag'];
    }

    /**
     * Sets level_one_apply_single_unit_flag
     * @param bool $level_one_apply_single_unit_flag
     * @return $this
     */
    public function setLevelOneApplySingleUnitFlag($level_one_apply_single_unit_flag)
    {
        $this->container['level_one_apply_single_unit_flag'] = $level_one_apply_single_unit_flag;

        return $this;
    }

    /**
     * Gets level_one_apply_single_unit_min
     * @return double
     */
    public function getLevelOneApplySingleUnitMin()
    {
        return $this->container['level_one_apply_single_unit_min'];
    }

    /**
     * Sets level_one_apply_single_unit_min
     * @param double $level_one_apply_single_unit_min
     * @return $this
     */
    public function setLevelOneApplySingleUnitMin($level_one_apply_single_unit_min)
    {
        $this->container['level_one_apply_single_unit_min'] = $level_one_apply_single_unit_min;

        return $this;
    }

    /**
     * Gets level_one_apply_single_unit_max
     * @return double
     */
    public function getLevelOneApplySingleUnitMax()
    {
        return $this->container['level_one_apply_single_unit_max'];
    }

    /**
     * Sets level_one_apply_single_unit_max
     * @param double $level_one_apply_single_unit_max
     * @return $this
     */
    public function setLevelOneApplySingleUnitMax($level_one_apply_single_unit_max)
    {
        $this->container['level_one_apply_single_unit_max'] = $level_one_apply_single_unit_max;

        return $this;
    }

    /**
     * Gets level_two_rate
     * @return double
     */
    public function getLevelTwoRate()
    {
        return $this->container['level_two_rate'];
    }

    /**
     * Sets level_two_rate
     * @param double $level_two_rate
     * @return $this
     */
    public function setLevelTwoRate($level_two_rate)
    {
        $this->container['level_two_rate'] = $level_two_rate;

        return $this;
    }

    /**
     * Gets level_two_rate_type
     * @return string
     */
    public function getLevelTwoRateType()
    {
        return $this->container['level_two_rate_type'];
    }

    /**
     * Sets level_two_rate_type
     * @param string $level_two_rate_type
     * @return $this
     */
    public function setLevelTwoRateType($level_two_rate_type)
    {
        $allowed_values = array('Amount', 'Percent');
        if (!is_null($level_two_rate_type) && (!in_array($level_two_rate_type, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'level_two_rate_type', must be one of 'Amount', 'Percent'");
        }
        $this->container['level_two_rate_type'] = $level_two_rate_type;

        return $this;
    }

    /**
     * Gets level_two_taxable_max
     * @return double
     */
    public function getLevelTwoTaxableMax()
    {
        return $this->container['level_two_taxable_max'];
    }

    /**
     * Sets level_two_taxable_max
     * @param double $level_two_taxable_max
     * @return $this
     */
    public function setLevelTwoTaxableMax($level_two_taxable_max)
    {
        $this->container['level_two_taxable_max'] = $level_two_taxable_max;

        return $this;
    }

    /**
     * Gets level_two_caption
     * @return string
     */
    public function getLevelTwoCaption()
    {
        return $this->container['level_two_caption'];
    }

    /**
     * Sets level_two_caption
     * @param string $level_two_caption
     * @return $this
     */
    public function setLevelTwoCaption($level_two_caption)
    {
        if (!is_null($level_two_caption) && (strlen($level_two_caption) > 25)) {
            throw new \InvalidArgumentException('invalid length for $level_two_caption when calling TaxCode., must be smaller than or equal to 25.');
        }

        $this->container['level_two_caption'] = $level_two_caption;

        return $this;
    }

    /**
     * Gets level_two_tax_code_xref
     * @return string
     */
    public function getLevelTwoTaxCodeXref()
    {
        return $this->container['level_two_tax_code_xref'];
    }

    /**
     * Sets level_two_tax_code_xref
     * @param string $level_two_tax_code_xref
     * @return $this
     */
    public function setLevelTwoTaxCodeXref($level_two_tax_code_xref)
    {
        if (!is_null($level_two_tax_code_xref) && (strlen($level_two_tax_code_xref) > 50)) {
            throw new \InvalidArgumentException('invalid length for $level_two_tax_code_xref when calling TaxCode., must be smaller than or equal to 50.');
        }

        $this->container['level_two_tax_code_xref'] = $level_two_tax_code_xref;

        return $this;
    }

    /**
     * Gets level_two_agency_xref
     * @return string
     */
    public function getLevelTwoAgencyXref()
    {
        return $this->container['level_two_agency_xref'];
    }

    /**
     * Sets level_two_agency_xref
     * @param string $level_two_agency_xref
     * @return $this
     */
    public function setLevelTwoAgencyXref($level_two_agency_xref)
    {
        if (!is_null($level_two_agency_xref) && (strlen($level_two_agency_xref) > 100)) {
            throw new \InvalidArgumentException('invalid length for $level_two_agency_xref when calling TaxCode., must be smaller than or equal to 100.');
        }

        $this->container['level_two_agency_xref'] = $level_two_agency_xref;

        return $this;
    }

    /**
     * Gets level_two_services_flag
     * @return bool
     */
    public function getLevelTwoServicesFlag()
    {
        return $this->container['level_two_services_flag'];
    }

    /**
     * Sets level_two_services_flag
     * @param bool $level_two_services_flag
     * @return $this
     */
    public function setLevelTwoServicesFlag($level_two_services_flag)
    {
        $this->container['level_two_services_flag'] = $level_two_services_flag;

        return $this;
    }

    /**
     * Gets level_two_expenses_flag
     * @return bool
     */
    public function getLevelTwoExpensesFlag()
    {
        return $this->container['level_two_expenses_flag'];
    }

    /**
     * Sets level_two_expenses_flag
     * @param bool $level_two_expenses_flag
     * @return $this
     */
    public function setLevelTwoExpensesFlag($level_two_expenses_flag)
    {
        $this->container['level_two_expenses_flag'] = $level_two_expenses_flag;

        return $this;
    }

    /**
     * Gets level_two_products_flag
     * @return bool
     */
    public function getLevelTwoProductsFlag()
    {
        return $this->container['level_two_products_flag'];
    }

    /**
     * Sets level_two_products_flag
     * @param bool $level_two_products_flag
     * @return $this
     */
    public function setLevelTwoProductsFlag($level_two_products_flag)
    {
        $this->container['level_two_products_flag'] = $level_two_products_flag;

        return $this;
    }

    /**
     * Gets level_two_apply_single_unit_flag
     * @return bool
     */
    public function getLevelTwoApplySingleUnitFlag()
    {
        return $this->container['level_two_apply_single_unit_flag'];
    }

    /**
     * Sets level_two_apply_single_unit_flag
     * @param bool $level_two_apply_single_unit_flag
     * @return $this
     */
    public function setLevelTwoApplySingleUnitFlag($level_two_apply_single_unit_flag)
    {
        $this->container['level_two_apply_single_unit_flag'] = $level_two_apply_single_unit_flag;

        return $this;
    }

    /**
     * Gets level_two_apply_single_unit_min
     * @return double
     */
    public function getLevelTwoApplySingleUnitMin()
    {
        return $this->container['level_two_apply_single_unit_min'];
    }

    /**
     * Sets level_two_apply_single_unit_min
     * @param double $level_two_apply_single_unit_min
     * @return $this
     */
    public function setLevelTwoApplySingleUnitMin($level_two_apply_single_unit_min)
    {
        $this->container['level_two_apply_single_unit_min'] = $level_two_apply_single_unit_min;

        return $this;
    }

    /**
     * Gets level_two_apply_single_unit_max
     * @return double
     */
    public function getLevelTwoApplySingleUnitMax()
    {
        return $this->container['level_two_apply_single_unit_max'];
    }

    /**
     * Sets level_two_apply_single_unit_max
     * @param double $level_two_apply_single_unit_max
     * @return $this
     */
    public function setLevelTwoApplySingleUnitMax($level_two_apply_single_unit_max)
    {
        $this->container['level_two_apply_single_unit_max'] = $level_two_apply_single_unit_max;

        return $this;
    }

    /**
     * Gets level_three_rate
     * @return double
     */
    public function getLevelThreeRate()
    {
        return $this->container['level_three_rate'];
    }

    /**
     * Sets level_three_rate
     * @param double $level_three_rate
     * @return $this
     */
    public function setLevelThreeRate($level_three_rate)
    {
        $this->container['level_three_rate'] = $level_three_rate;

        return $this;
    }

    /**
     * Gets level_three_rate_type
     * @return string
     */
    public function getLevelThreeRateType()
    {
        return $this->container['level_three_rate_type'];
    }

    /**
     * Sets level_three_rate_type
     * @param string $level_three_rate_type
     * @return $this
     */
    public function setLevelThreeRateType($level_three_rate_type)
    {
        $allowed_values = array('Amount', 'Percent');
        if (!is_null($level_three_rate_type) && (!in_array($level_three_rate_type, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'level_three_rate_type', must be one of 'Amount', 'Percent'");
        }
        $this->container['level_three_rate_type'] = $level_three_rate_type;

        return $this;
    }

    /**
     * Gets level_three_taxable_max
     * @return double
     */
    public function getLevelThreeTaxableMax()
    {
        return $this->container['level_three_taxable_max'];
    }

    /**
     * Sets level_three_taxable_max
     * @param double $level_three_taxable_max
     * @return $this
     */
    public function setLevelThreeTaxableMax($level_three_taxable_max)
    {
        $this->container['level_three_taxable_max'] = $level_three_taxable_max;

        return $this;
    }

    /**
     * Gets level_three_caption
     * @return string
     */
    public function getLevelThreeCaption()
    {
        return $this->container['level_three_caption'];
    }

    /**
     * Sets level_three_caption
     * @param string $level_three_caption
     * @return $this
     */
    public function setLevelThreeCaption($level_three_caption)
    {
        if (!is_null($level_three_caption) && (strlen($level_three_caption) > 25)) {
            throw new \InvalidArgumentException('invalid length for $level_three_caption when calling TaxCode., must be smaller than or equal to 25.');
        }

        $this->container['level_three_caption'] = $level_three_caption;

        return $this;
    }

    /**
     * Gets level_three_tax_code_xref
     * @return string
     */
    public function getLevelThreeTaxCodeXref()
    {
        return $this->container['level_three_tax_code_xref'];
    }

    /**
     * Sets level_three_tax_code_xref
     * @param string $level_three_tax_code_xref
     * @return $this
     */
    public function setLevelThreeTaxCodeXref($level_three_tax_code_xref)
    {
        if (!is_null($level_three_tax_code_xref) && (strlen($level_three_tax_code_xref) > 50)) {
            throw new \InvalidArgumentException('invalid length for $level_three_tax_code_xref when calling TaxCode., must be smaller than or equal to 50.');
        }

        $this->container['level_three_tax_code_xref'] = $level_three_tax_code_xref;

        return $this;
    }

    /**
     * Gets level_three_agency_xref
     * @return string
     */
    public function getLevelThreeAgencyXref()
    {
        return $this->container['level_three_agency_xref'];
    }

    /**
     * Sets level_three_agency_xref
     * @param string $level_three_agency_xref
     * @return $this
     */
    public function setLevelThreeAgencyXref($level_three_agency_xref)
    {
        if (!is_null($level_three_agency_xref) && (strlen($level_three_agency_xref) > 100)) {
            throw new \InvalidArgumentException('invalid length for $level_three_agency_xref when calling TaxCode., must be smaller than or equal to 100.');
        }

        $this->container['level_three_agency_xref'] = $level_three_agency_xref;

        return $this;
    }

    /**
     * Gets level_three_services_flag
     * @return bool
     */
    public function getLevelThreeServicesFlag()
    {
        return $this->container['level_three_services_flag'];
    }

    /**
     * Sets level_three_services_flag
     * @param bool $level_three_services_flag
     * @return $this
     */
    public function setLevelThreeServicesFlag($level_three_services_flag)
    {
        $this->container['level_three_services_flag'] = $level_three_services_flag;

        return $this;
    }

    /**
     * Gets level_three_expenses_flag
     * @return bool
     */
    public function getLevelThreeExpensesFlag()
    {
        return $this->container['level_three_expenses_flag'];
    }

    /**
     * Sets level_three_expenses_flag
     * @param bool $level_three_expenses_flag
     * @return $this
     */
    public function setLevelThreeExpensesFlag($level_three_expenses_flag)
    {
        $this->container['level_three_expenses_flag'] = $level_three_expenses_flag;

        return $this;
    }

    /**
     * Gets level_three_products_flag
     * @return bool
     */
    public function getLevelThreeProductsFlag()
    {
        return $this->container['level_three_products_flag'];
    }

    /**
     * Sets level_three_products_flag
     * @param bool $level_three_products_flag
     * @return $this
     */
    public function setLevelThreeProductsFlag($level_three_products_flag)
    {
        $this->container['level_three_products_flag'] = $level_three_products_flag;

        return $this;
    }

    /**
     * Gets level_three_apply_single_unit_flag
     * @return bool
     */
    public function getLevelThreeApplySingleUnitFlag()
    {
        return $this->container['level_three_apply_single_unit_flag'];
    }

    /**
     * Sets level_three_apply_single_unit_flag
     * @param bool $level_three_apply_single_unit_flag
     * @return $this
     */
    public function setLevelThreeApplySingleUnitFlag($level_three_apply_single_unit_flag)
    {
        $this->container['level_three_apply_single_unit_flag'] = $level_three_apply_single_unit_flag;

        return $this;
    }

    /**
     * Gets level_three_apply_single_unit_min
     * @return double
     */
    public function getLevelThreeApplySingleUnitMin()
    {
        return $this->container['level_three_apply_single_unit_min'];
    }

    /**
     * Sets level_three_apply_single_unit_min
     * @param double $level_three_apply_single_unit_min
     * @return $this
     */
    public function setLevelThreeApplySingleUnitMin($level_three_apply_single_unit_min)
    {
        $this->container['level_three_apply_single_unit_min'] = $level_three_apply_single_unit_min;

        return $this;
    }

    /**
     * Gets level_three_apply_single_unit_max
     * @return double
     */
    public function getLevelThreeApplySingleUnitMax()
    {
        return $this->container['level_three_apply_single_unit_max'];
    }

    /**
     * Sets level_three_apply_single_unit_max
     * @param double $level_three_apply_single_unit_max
     * @return $this
     */
    public function setLevelThreeApplySingleUnitMax($level_three_apply_single_unit_max)
    {
        $this->container['level_three_apply_single_unit_max'] = $level_three_apply_single_unit_max;

        return $this;
    }

    /**
     * Gets level_four_rate
     * @return double
     */
    public function getLevelFourRate()
    {
        return $this->container['level_four_rate'];
    }

    /**
     * Sets level_four_rate
     * @param double $level_four_rate
     * @return $this
     */
    public function setLevelFourRate($level_four_rate)
    {
        $this->container['level_four_rate'] = $level_four_rate;

        return $this;
    }

    /**
     * Gets level_four_rate_type
     * @return string
     */
    public function getLevelFourRateType()
    {
        return $this->container['level_four_rate_type'];
    }

    /**
     * Sets level_four_rate_type
     * @param string $level_four_rate_type
     * @return $this
     */
    public function setLevelFourRateType($level_four_rate_type)
    {
        $allowed_values = array('Amount', 'Percent');
        if (!is_null($level_four_rate_type) && (!in_array($level_four_rate_type, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'level_four_rate_type', must be one of 'Amount', 'Percent'");
        }
        $this->container['level_four_rate_type'] = $level_four_rate_type;

        return $this;
    }

    /**
     * Gets level_four_taxable_max
     * @return double
     */
    public function getLevelFourTaxableMax()
    {
        return $this->container['level_four_taxable_max'];
    }

    /**
     * Sets level_four_taxable_max
     * @param double $level_four_taxable_max
     * @return $this
     */
    public function setLevelFourTaxableMax($level_four_taxable_max)
    {
        $this->container['level_four_taxable_max'] = $level_four_taxable_max;

        return $this;
    }

    /**
     * Gets level_four_caption
     * @return string
     */
    public function getLevelFourCaption()
    {
        return $this->container['level_four_caption'];
    }

    /**
     * Sets level_four_caption
     * @param string $level_four_caption
     * @return $this
     */
    public function setLevelFourCaption($level_four_caption)
    {
        if (!is_null($level_four_caption) && (strlen($level_four_caption) > 25)) {
            throw new \InvalidArgumentException('invalid length for $level_four_caption when calling TaxCode., must be smaller than or equal to 25.');
        }

        $this->container['level_four_caption'] = $level_four_caption;

        return $this;
    }

    /**
     * Gets level_four_tax_code_xref
     * @return string
     */
    public function getLevelFourTaxCodeXref()
    {
        return $this->container['level_four_tax_code_xref'];
    }

    /**
     * Sets level_four_tax_code_xref
     * @param string $level_four_tax_code_xref
     * @return $this
     */
    public function setLevelFourTaxCodeXref($level_four_tax_code_xref)
    {
        if (!is_null($level_four_tax_code_xref) && (strlen($level_four_tax_code_xref) > 50)) {
            throw new \InvalidArgumentException('invalid length for $level_four_tax_code_xref when calling TaxCode., must be smaller than or equal to 50.');
        }

        $this->container['level_four_tax_code_xref'] = $level_four_tax_code_xref;

        return $this;
    }

    /**
     * Gets level_four_agency_xref
     * @return string
     */
    public function getLevelFourAgencyXref()
    {
        return $this->container['level_four_agency_xref'];
    }

    /**
     * Sets level_four_agency_xref
     * @param string $level_four_agency_xref
     * @return $this
     */
    public function setLevelFourAgencyXref($level_four_agency_xref)
    {
        if (!is_null($level_four_agency_xref) && (strlen($level_four_agency_xref) > 100)) {
            throw new \InvalidArgumentException('invalid length for $level_four_agency_xref when calling TaxCode., must be smaller than or equal to 100.');
        }

        $this->container['level_four_agency_xref'] = $level_four_agency_xref;

        return $this;
    }

    /**
     * Gets level_four_services_flag
     * @return bool
     */
    public function getLevelFourServicesFlag()
    {
        return $this->container['level_four_services_flag'];
    }

    /**
     * Sets level_four_services_flag
     * @param bool $level_four_services_flag
     * @return $this
     */
    public function setLevelFourServicesFlag($level_four_services_flag)
    {
        $this->container['level_four_services_flag'] = $level_four_services_flag;

        return $this;
    }

    /**
     * Gets level_four_expenses_flag
     * @return bool
     */
    public function getLevelFourExpensesFlag()
    {
        return $this->container['level_four_expenses_flag'];
    }

    /**
     * Sets level_four_expenses_flag
     * @param bool $level_four_expenses_flag
     * @return $this
     */
    public function setLevelFourExpensesFlag($level_four_expenses_flag)
    {
        $this->container['level_four_expenses_flag'] = $level_four_expenses_flag;

        return $this;
    }

    /**
     * Gets level_four_products_flag
     * @return bool
     */
    public function getLevelFourProductsFlag()
    {
        return $this->container['level_four_products_flag'];
    }

    /**
     * Sets level_four_products_flag
     * @param bool $level_four_products_flag
     * @return $this
     */
    public function setLevelFourProductsFlag($level_four_products_flag)
    {
        $this->container['level_four_products_flag'] = $level_four_products_flag;

        return $this;
    }

    /**
     * Gets level_four_apply_single_unit_flag
     * @return bool
     */
    public function getLevelFourApplySingleUnitFlag()
    {
        return $this->container['level_four_apply_single_unit_flag'];
    }

    /**
     * Sets level_four_apply_single_unit_flag
     * @param bool $level_four_apply_single_unit_flag
     * @return $this
     */
    public function setLevelFourApplySingleUnitFlag($level_four_apply_single_unit_flag)
    {
        $this->container['level_four_apply_single_unit_flag'] = $level_four_apply_single_unit_flag;

        return $this;
    }

    /**
     * Gets level_four_apply_single_unit_min
     * @return double
     */
    public function getLevelFourApplySingleUnitMin()
    {
        return $this->container['level_four_apply_single_unit_min'];
    }

    /**
     * Sets level_four_apply_single_unit_min
     * @param double $level_four_apply_single_unit_min
     * @return $this
     */
    public function setLevelFourApplySingleUnitMin($level_four_apply_single_unit_min)
    {
        $this->container['level_four_apply_single_unit_min'] = $level_four_apply_single_unit_min;

        return $this;
    }

    /**
     * Gets level_four_apply_single_unit_max
     * @return double
     */
    public function getLevelFourApplySingleUnitMax()
    {
        return $this->container['level_four_apply_single_unit_max'];
    }

    /**
     * Sets level_four_apply_single_unit_max
     * @param double $level_four_apply_single_unit_max
     * @return $this
     */
    public function setLevelFourApplySingleUnitMax($level_four_apply_single_unit_max)
    {
        $this->container['level_four_apply_single_unit_max'] = $level_four_apply_single_unit_max;

        return $this;
    }

    /**
     * Gets level_five_rate
     * @return double
     */
    public function getLevelFiveRate()
    {
        return $this->container['level_five_rate'];
    }

    /**
     * Sets level_five_rate
     * @param double $level_five_rate
     * @return $this
     */
    public function setLevelFiveRate($level_five_rate)
    {
        $this->container['level_five_rate'] = $level_five_rate;

        return $this;
    }

    /**
     * Gets level_five_rate_type
     * @return string
     */
    public function getLevelFiveRateType()
    {
        return $this->container['level_five_rate_type'];
    }

    /**
     * Sets level_five_rate_type
     * @param string $level_five_rate_type
     * @return $this
     */
    public function setLevelFiveRateType($level_five_rate_type)
    {
        $allowed_values = array('Amount', 'Percent');
        if (!is_null($level_five_rate_type) && (!in_array($level_five_rate_type, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'level_five_rate_type', must be one of 'Amount', 'Percent'");
        }
        $this->container['level_five_rate_type'] = $level_five_rate_type;

        return $this;
    }

    /**
     * Gets level_five_taxable_max
     * @return double
     */
    public function getLevelFiveTaxableMax()
    {
        return $this->container['level_five_taxable_max'];
    }

    /**
     * Sets level_five_taxable_max
     * @param double $level_five_taxable_max
     * @return $this
     */
    public function setLevelFiveTaxableMax($level_five_taxable_max)
    {
        $this->container['level_five_taxable_max'] = $level_five_taxable_max;

        return $this;
    }

    /**
     * Gets level_five_caption
     * @return string
     */
    public function getLevelFiveCaption()
    {
        return $this->container['level_five_caption'];
    }

    /**
     * Sets level_five_caption
     * @param string $level_five_caption
     * @return $this
     */
    public function setLevelFiveCaption($level_five_caption)
    {
        if (!is_null($level_five_caption) && (strlen($level_five_caption) > 25)) {
            throw new \InvalidArgumentException('invalid length for $level_five_caption when calling TaxCode., must be smaller than or equal to 25.');
        }

        $this->container['level_five_caption'] = $level_five_caption;

        return $this;
    }

    /**
     * Gets level_five_tax_code_xref
     * @return string
     */
    public function getLevelFiveTaxCodeXref()
    {
        return $this->container['level_five_tax_code_xref'];
    }

    /**
     * Sets level_five_tax_code_xref
     * @param string $level_five_tax_code_xref
     * @return $this
     */
    public function setLevelFiveTaxCodeXref($level_five_tax_code_xref)
    {
        if (!is_null($level_five_tax_code_xref) && (strlen($level_five_tax_code_xref) > 50)) {
            throw new \InvalidArgumentException('invalid length for $level_five_tax_code_xref when calling TaxCode., must be smaller than or equal to 50.');
        }

        $this->container['level_five_tax_code_xref'] = $level_five_tax_code_xref;

        return $this;
    }

    /**
     * Gets level_five_agency_xref
     * @return string
     */
    public function getLevelFiveAgencyXref()
    {
        return $this->container['level_five_agency_xref'];
    }

    /**
     * Sets level_five_agency_xref
     * @param string $level_five_agency_xref
     * @return $this
     */
    public function setLevelFiveAgencyXref($level_five_agency_xref)
    {
        if (!is_null($level_five_agency_xref) && (strlen($level_five_agency_xref) > 100)) {
            throw new \InvalidArgumentException('invalid length for $level_five_agency_xref when calling TaxCode., must be smaller than or equal to 100.');
        }

        $this->container['level_five_agency_xref'] = $level_five_agency_xref;

        return $this;
    }

    /**
     * Gets level_five_services_flag
     * @return bool
     */
    public function getLevelFiveServicesFlag()
    {
        return $this->container['level_five_services_flag'];
    }

    /**
     * Sets level_five_services_flag
     * @param bool $level_five_services_flag
     * @return $this
     */
    public function setLevelFiveServicesFlag($level_five_services_flag)
    {
        $this->container['level_five_services_flag'] = $level_five_services_flag;

        return $this;
    }

    /**
     * Gets level_five_expenses_flag
     * @return bool
     */
    public function getLevelFiveExpensesFlag()
    {
        return $this->container['level_five_expenses_flag'];
    }

    /**
     * Sets level_five_expenses_flag
     * @param bool $level_five_expenses_flag
     * @return $this
     */
    public function setLevelFiveExpensesFlag($level_five_expenses_flag)
    {
        $this->container['level_five_expenses_flag'] = $level_five_expenses_flag;

        return $this;
    }

    /**
     * Gets level_five_products_flag
     * @return bool
     */
    public function getLevelFiveProductsFlag()
    {
        return $this->container['level_five_products_flag'];
    }

    /**
     * Sets level_five_products_flag
     * @param bool $level_five_products_flag
     * @return $this
     */
    public function setLevelFiveProductsFlag($level_five_products_flag)
    {
        $this->container['level_five_products_flag'] = $level_five_products_flag;

        return $this;
    }

    /**
     * Gets level_five_apply_single_unit_flag
     * @return bool
     */
    public function getLevelFiveApplySingleUnitFlag()
    {
        return $this->container['level_five_apply_single_unit_flag'];
    }

    /**
     * Sets level_five_apply_single_unit_flag
     * @param bool $level_five_apply_single_unit_flag
     * @return $this
     */
    public function setLevelFiveApplySingleUnitFlag($level_five_apply_single_unit_flag)
    {
        $this->container['level_five_apply_single_unit_flag'] = $level_five_apply_single_unit_flag;

        return $this;
    }

    /**
     * Gets level_five_apply_single_unit_min
     * @return double
     */
    public function getLevelFiveApplySingleUnitMin()
    {
        return $this->container['level_five_apply_single_unit_min'];
    }

    /**
     * Sets level_five_apply_single_unit_min
     * @param double $level_five_apply_single_unit_min
     * @return $this
     */
    public function setLevelFiveApplySingleUnitMin($level_five_apply_single_unit_min)
    {
        $this->container['level_five_apply_single_unit_min'] = $level_five_apply_single_unit_min;

        return $this;
    }

    /**
     * Gets level_five_apply_single_unit_max
     * @return double
     */
    public function getLevelFiveApplySingleUnitMax()
    {
        return $this->container['level_five_apply_single_unit_max'];
    }

    /**
     * Sets level_five_apply_single_unit_max
     * @param double $level_five_apply_single_unit_max
     * @return $this
     */
    public function setLevelFiveApplySingleUnitMax($level_five_apply_single_unit_max)
    {
        $this->container['level_five_apply_single_unit_max'] = $level_five_apply_single_unit_max;

        return $this;
    }

    /**
     * Gets _info
     * @return \Spinen\ConnectWise\Clients\Finance\Model\Metadata
     */
    public function getInfo()
    {
        return $this->container['_info'];
    }

    /**
     * Sets _info
     * @param \Spinen\ConnectWise\Clients\Finance\Model\Metadata $_info Metadata of the entity
     * @return $this
     */
    public function setInfo($_info)
    {
        $this->container['_info'] = $_info;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Spinen\ConnectWise\Clients\Finance\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Spinen\ConnectWise\Clients\Finance\ObjectSerializer::sanitizeForSerialization($this));
    }
}


