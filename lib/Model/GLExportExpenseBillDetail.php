<?php
/**
 * GLExportExpenseBillDetail
 *
 * PHP version 5
 *
 * @category Class
 * @package  Spinen\ConnectWise\Clients\Finance
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Finance API
 *
 * ConnectWise Finance API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: platform@connectwise.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Spinen\ConnectWise\Clients\Finance\Model;

use \ArrayAccess;

/**
 * GLExportExpenseBillDetail Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Spinen\ConnectWise\Clients\Finance
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class GLExportExpenseBillDetail implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'GLExportExpenseBillDetail';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'document_date' => 'string',
        'gl_type_id' => 'string',
        'memo' => 'string',
        'company' => '\Spinen\ConnectWise\Clients\Finance\Model\CompanyReference',
        'account_number' => 'string',
        'expense_class' => '\Spinen\ConnectWise\Clients\Finance\Model\ClassificationReference',
        'currency' => '\Spinen\ConnectWise\Clients\Finance\Model\CurrencyReference',
        'total' => 'double',
        'billable' => 'bool',
        'reimbursable' => 'bool',
        'company_advance' => 'bool'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'document_date' => 'documentDate',
        'gl_type_id' => 'glTypeId',
        'memo' => 'memo',
        'company' => 'company',
        'account_number' => 'accountNumber',
        'expense_class' => 'expenseClass',
        'currency' => 'currency',
        'total' => 'total',
        'billable' => 'billable',
        'reimbursable' => 'reimbursable',
        'company_advance' => 'companyAdvance'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'document_date' => 'setDocumentDate',
        'gl_type_id' => 'setGlTypeId',
        'memo' => 'setMemo',
        'company' => 'setCompany',
        'account_number' => 'setAccountNumber',
        'expense_class' => 'setExpenseClass',
        'currency' => 'setCurrency',
        'total' => 'setTotal',
        'billable' => 'setBillable',
        'reimbursable' => 'setReimbursable',
        'company_advance' => 'setCompanyAdvance'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'document_date' => 'getDocumentDate',
        'gl_type_id' => 'getGlTypeId',
        'memo' => 'getMemo',
        'company' => 'getCompany',
        'account_number' => 'getAccountNumber',
        'expense_class' => 'getExpenseClass',
        'currency' => 'getCurrency',
        'total' => 'getTotal',
        'billable' => 'getBillable',
        'reimbursable' => 'getReimbursable',
        'company_advance' => 'getCompanyAdvance'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['document_date'] = isset($data['document_date']) ? $data['document_date'] : null;
        $this->container['gl_type_id'] = isset($data['gl_type_id']) ? $data['gl_type_id'] : null;
        $this->container['memo'] = isset($data['memo']) ? $data['memo'] : null;
        $this->container['company'] = isset($data['company']) ? $data['company'] : null;
        $this->container['account_number'] = isset($data['account_number']) ? $data['account_number'] : null;
        $this->container['expense_class'] = isset($data['expense_class']) ? $data['expense_class'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['total'] = isset($data['total']) ? $data['total'] : null;
        $this->container['billable'] = isset($data['billable']) ? $data['billable'] : null;
        $this->container['reimbursable'] = isset($data['reimbursable']) ? $data['reimbursable'] : null;
        $this->container['company_advance'] = isset($data['company_advance']) ? $data['company_advance'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets document_date
     * @return string
     */
    public function getDocumentDate()
    {
        return $this->container['document_date'];
    }

    /**
     * Sets document_date
     * @param string $document_date
     * @return $this
     */
    public function setDocumentDate($document_date)
    {
        $this->container['document_date'] = $document_date;

        return $this;
    }

    /**
     * Gets gl_type_id
     * @return string
     */
    public function getGlTypeId()
    {
        return $this->container['gl_type_id'];
    }

    /**
     * Sets gl_type_id
     * @param string $gl_type_id
     * @return $this
     */
    public function setGlTypeId($gl_type_id)
    {
        $this->container['gl_type_id'] = $gl_type_id;

        return $this;
    }

    /**
     * Gets memo
     * @return string
     */
    public function getMemo()
    {
        return $this->container['memo'];
    }

    /**
     * Sets memo
     * @param string $memo
     * @return $this
     */
    public function setMemo($memo)
    {
        $this->container['memo'] = $memo;

        return $this;
    }

    /**
     * Gets company
     * @return \Spinen\ConnectWise\Clients\Finance\Model\CompanyReference
     */
    public function getCompany()
    {
        return $this->container['company'];
    }

    /**
     * Sets company
     * @param \Spinen\ConnectWise\Clients\Finance\Model\CompanyReference $company
     * @return $this
     */
    public function setCompany($company)
    {
        $this->container['company'] = $company;

        return $this;
    }

    /**
     * Gets account_number
     * @return string
     */
    public function getAccountNumber()
    {
        return $this->container['account_number'];
    }

    /**
     * Sets account_number
     * @param string $account_number
     * @return $this
     */
    public function setAccountNumber($account_number)
    {
        $this->container['account_number'] = $account_number;

        return $this;
    }

    /**
     * Gets expense_class
     * @return \Spinen\ConnectWise\Clients\Finance\Model\ClassificationReference
     */
    public function getExpenseClass()
    {
        return $this->container['expense_class'];
    }

    /**
     * Sets expense_class
     * @param \Spinen\ConnectWise\Clients\Finance\Model\ClassificationReference $expense_class
     * @return $this
     */
    public function setExpenseClass($expense_class)
    {
        $this->container['expense_class'] = $expense_class;

        return $this;
    }

    /**
     * Gets currency
     * @return \Spinen\ConnectWise\Clients\Finance\Model\CurrencyReference
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     * @param \Spinen\ConnectWise\Clients\Finance\Model\CurrencyReference $currency
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets total
     * @return double
     */
    public function getTotal()
    {
        return $this->container['total'];
    }

    /**
     * Sets total
     * @param double $total
     * @return $this
     */
    public function setTotal($total)
    {
        $this->container['total'] = $total;

        return $this;
    }

    /**
     * Gets billable
     * @return bool
     */
    public function getBillable()
    {
        return $this->container['billable'];
    }

    /**
     * Sets billable
     * @param bool $billable
     * @return $this
     */
    public function setBillable($billable)
    {
        $this->container['billable'] = $billable;

        return $this;
    }

    /**
     * Gets reimbursable
     * @return bool
     */
    public function getReimbursable()
    {
        return $this->container['reimbursable'];
    }

    /**
     * Sets reimbursable
     * @param bool $reimbursable
     * @return $this
     */
    public function setReimbursable($reimbursable)
    {
        $this->container['reimbursable'] = $reimbursable;

        return $this;
    }

    /**
     * Gets company_advance
     * @return bool
     */
    public function getCompanyAdvance()
    {
        return $this->container['company_advance'];
    }

    /**
     * Sets company_advance
     * @param bool $company_advance
     * @return $this
     */
    public function setCompanyAdvance($company_advance)
    {
        $this->container['company_advance'] = $company_advance;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Spinen\ConnectWise\Clients\Finance\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Spinen\ConnectWise\Clients\Finance\ObjectSerializer::sanitizeForSerialization($this));
    }
}


