<?php
/**
 * InvoicePaymentsApi
 * PHP version 5
 *
 * @category Class
 * @package  Spinen\ConnectWise\Clients\Finance
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Finance API
 *
 * ConnectWise Finance API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: platform@connectwise.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Spinen\ConnectWise\Clients\Finance\Api;

use \Spinen\ConnectWise\Clients\Finance\ApiClient;
use \Spinen\ConnectWise\Clients\Finance\ApiException;
use \Spinen\ConnectWise\Clients\Finance\Configuration;
use \Spinen\ConnectWise\Clients\Finance\ObjectSerializer;

/**
 * InvoicePaymentsApi Class Doc Comment
 *
 * @category Class
 * @package  Spinen\ConnectWise\Clients\Finance
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InvoicePaymentsApi
{
    /**
     * API Client
     *
     * @var \Spinen\ConnectWise\Clients\Finance\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param  \Spinen\ConnectWise\Clients\Finance\ApiClient|null  $apiClient  The api client to use
     */
    public function __construct(\Spinen\ConnectWise\Clients\Finance\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Spinen\ConnectWise\Clients\Finance\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param  \Spinen\ConnectWise\Clients\Finance\ApiClient  $apiClient  set the API client
     *
     * @return InvoicePaymentsApi
     */
    public function setApiClient(\Spinen\ConnectWise\Clients\Finance\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation financeInvoicesIdPaymentsGet
     *
     *
     *
     * Spinen&#39;s PHP ConnectWise Client for Finance API generated by Swagger Code Generator.
     *
     * @param  int  $id  (required)
     * @param  string  $conditions  (optional)
     * @param  string  $order_by  (optional)
     * @param  string  $childconditions  (optional)
     * @param  string  $customfieldconditions  (optional)
     * @param  int  $page  (optional)
     * @param  int  $page_size  (optional)
     * @return \Spinen\ConnectWise\Clients\Finance\Model\Payment[]
     * @throws \Spinen\ConnectWise\Clients\Finance\ApiException on non-2xx response
     */
    public function financeInvoicesIdPaymentsGet(
        $id,
        $conditions = null,
        $order_by = null,
        $childconditions = null,
        $customfieldconditions = null,
        $page = null,
        $page_size = null
    ) {
        list($response) = $this->financeInvoicesIdPaymentsGetWithHttpInfo($id, $conditions, $order_by, $childconditions,
            $customfieldconditions, $page, $page_size);
        return $response;
    }

    /**
     * Operation financeInvoicesIdPaymentsGetWithHttpInfo
     *
     *
     *
     * Spinen&#39;s PHP ConnectWise Client for Finance API generated by Swagger Code Generator.
     *
     * @param  int  $id  (required)
     * @param  string  $conditions  (optional)
     * @param  string  $order_by  (optional)
     * @param  string  $childconditions  (optional)
     * @param  string  $customfieldconditions  (optional)
     * @param  int  $page  (optional)
     * @param  int  $page_size  (optional)
     * @return array of \Spinen\ConnectWise\Clients\Finance\Model\Payment[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Spinen\ConnectWise\Clients\Finance\ApiException on non-2xx response
     */
    public function financeInvoicesIdPaymentsGetWithHttpInfo(
        $id,
        $conditions = null,
        $order_by = null,
        $childconditions = null,
        $customfieldconditions = null,
        $page = null,
        $page_size = null
    ) {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling financeInvoicesIdPaymentsGet');
        }
        // parse inputs
        $resourcePath = "/finance/invoices/{id}/payments";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($conditions !== null) {
            $queryParams['conditions'] = $this->apiClient->getSerializer()->toQueryValue($conditions);
        }
        // query params
        if ($order_by !== null) {
            $queryParams['orderBy'] = $this->apiClient->getSerializer()->toQueryValue($order_by);
        }
        // query params
        if ($childconditions !== null) {
            $queryParams['childconditions'] = $this->apiClient->getSerializer()->toQueryValue($childconditions);
        }
        // query params
        if ($customfieldconditions !== null) {
            $queryParams['customfieldconditions'] = $this->apiClient->getSerializer()->toQueryValue($customfieldconditions);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($page);
        }
        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = $this->apiClient->getSerializer()->toQueryValue($page_size);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{"."id"."}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic '.base64_encode($this->apiClient->getConfig()->getUsername().":".$this->apiClient->getConfig()->getPassword());
        }
        if (strlen($this->apiClient->getConfig()->getClientId()) !== 0) {
            $headerParams['clientId'] = $this->apiClient->getConfig()->getClientId();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Spinen\ConnectWise\Clients\Finance\Model\Payment[]',
                '/finance/invoices/{id}/payments'
            );

            return [
                $this->apiClient->getSerializer()->deserialize($response,
                    '\Spinen\ConnectWise\Clients\Finance\Model\Payment[]', $httpHeader), $statusCode, $httpHeader
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(),
                        '\Spinen\ConnectWise\Clients\Finance\Model\Payment[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(),
                        '\Spinen\ConnectWise\Clients\Finance\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation financeInvoicesIdPaymentsPaymentIdDelete
     *
     *
     *
     * Spinen&#39;s PHP ConnectWise Client for Finance API generated by Swagger Code Generator.
     *
     * @param  int  $id  (required)
     * @param  int  $payment_id  (required)
     * @return void
     * @throws \Spinen\ConnectWise\Clients\Finance\ApiException on non-2xx response
     */
    public function financeInvoicesIdPaymentsPaymentIdDelete($id, $payment_id)
    {
        list($response) = $this->financeInvoicesIdPaymentsPaymentIdDeleteWithHttpInfo($id, $payment_id);
        return $response;
    }

    /**
     * Operation financeInvoicesIdPaymentsPaymentIdDeleteWithHttpInfo
     *
     *
     *
     * Spinen&#39;s PHP ConnectWise Client for Finance API generated by Swagger Code Generator.
     *
     * @param  int  $id  (required)
     * @param  int  $payment_id  (required)
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Spinen\ConnectWise\Clients\Finance\ApiException on non-2xx response
     */
    public function financeInvoicesIdPaymentsPaymentIdDeleteWithHttpInfo($id, $payment_id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling financeInvoicesIdPaymentsPaymentIdDelete');
        }
        // verify the required parameter 'payment_id' is set
        if ($payment_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $payment_id when calling financeInvoicesIdPaymentsPaymentIdDelete');
        }
        // parse inputs
        $resourcePath = "/finance/invoices/{id}/payments/{paymentId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{"."id"."}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($payment_id !== null) {
            $resourcePath = str_replace(
                "{"."paymentId"."}",
                $this->apiClient->getSerializer()->toPathValue($payment_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic '.base64_encode($this->apiClient->getConfig()->getUsername().":".$this->apiClient->getConfig()->getPassword());
        }
        if (strlen($this->apiClient->getConfig()->getClientId()) !== 0) {
            $headerParams['clientId'] = $this->apiClient->getConfig()->getClientId();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/finance/invoices/{id}/payments/{paymentId}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(),
                        '\Spinen\ConnectWise\Clients\Finance\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation financeInvoicesIdPaymentsPaymentIdGet
     *
     *
     *
     * Spinen&#39;s PHP ConnectWise Client for Finance API generated by Swagger Code Generator.
     *
     * @param  int  $id  (required)
     * @param  int  $payment_id  (required)
     * @return \Spinen\ConnectWise\Clients\Finance\Model\Payment
     * @throws \Spinen\ConnectWise\Clients\Finance\ApiException on non-2xx response
     */
    public function financeInvoicesIdPaymentsPaymentIdGet($id, $payment_id)
    {
        list($response) = $this->financeInvoicesIdPaymentsPaymentIdGetWithHttpInfo($id, $payment_id);
        return $response;
    }

    /**
     * Operation financeInvoicesIdPaymentsPaymentIdGetWithHttpInfo
     *
     *
     *
     * Spinen&#39;s PHP ConnectWise Client for Finance API generated by Swagger Code Generator.
     *
     * @param  int  $id  (required)
     * @param  int  $payment_id  (required)
     * @return array of \Spinen\ConnectWise\Clients\Finance\Model\Payment, HTTP status code, HTTP response headers (array of strings)
     * @throws \Spinen\ConnectWise\Clients\Finance\ApiException on non-2xx response
     */
    public function financeInvoicesIdPaymentsPaymentIdGetWithHttpInfo($id, $payment_id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling financeInvoicesIdPaymentsPaymentIdGet');
        }
        // verify the required parameter 'payment_id' is set
        if ($payment_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $payment_id when calling financeInvoicesIdPaymentsPaymentIdGet');
        }
        // parse inputs
        $resourcePath = "/finance/invoices/{id}/payments/{paymentId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{"."id"."}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($payment_id !== null) {
            $resourcePath = str_replace(
                "{"."paymentId"."}",
                $this->apiClient->getSerializer()->toPathValue($payment_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic '.base64_encode($this->apiClient->getConfig()->getUsername().":".$this->apiClient->getConfig()->getPassword());
        }
        if (strlen($this->apiClient->getConfig()->getClientId()) !== 0) {
            $headerParams['clientId'] = $this->apiClient->getConfig()->getClientId();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Spinen\ConnectWise\Clients\Finance\Model\Payment',
                '/finance/invoices/{id}/payments/{paymentId}'
            );

            return [
                $this->apiClient->getSerializer()->deserialize($response,
                    '\Spinen\ConnectWise\Clients\Finance\Model\Payment', $httpHeader), $statusCode, $httpHeader
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(),
                        '\Spinen\ConnectWise\Clients\Finance\Model\Payment', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(),
                        '\Spinen\ConnectWise\Clients\Finance\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation financeInvoicesIdPaymentsPaymentIdPatch
     *
     *
     *
     * Spinen&#39;s PHP ConnectWise Client for Finance API generated by Swagger Code Generator.
     *
     * @param  int  $id  (required)
     * @param  int  $payment_id  (required)
     * @param  \Spinen\ConnectWise\Clients\Finance\Model\PatchOperation[]  $operations  (required)
     * @return \Spinen\ConnectWise\Clients\Finance\Model\Payment
     * @throws \Spinen\ConnectWise\Clients\Finance\ApiException on non-2xx response
     */
    public function financeInvoicesIdPaymentsPaymentIdPatch($id, $payment_id, $operations)
    {
        list($response) = $this->financeInvoicesIdPaymentsPaymentIdPatchWithHttpInfo($id, $payment_id, $operations);
        return $response;
    }

    /**
     * Operation financeInvoicesIdPaymentsPaymentIdPatchWithHttpInfo
     *
     *
     *
     * Spinen&#39;s PHP ConnectWise Client for Finance API generated by Swagger Code Generator.
     *
     * @param  int  $id  (required)
     * @param  int  $payment_id  (required)
     * @param  \Spinen\ConnectWise\Clients\Finance\Model\PatchOperation[]  $operations  (required)
     * @return array of \Spinen\ConnectWise\Clients\Finance\Model\Payment, HTTP status code, HTTP response headers (array of strings)
     * @throws \Spinen\ConnectWise\Clients\Finance\ApiException on non-2xx response
     */
    public function financeInvoicesIdPaymentsPaymentIdPatchWithHttpInfo($id, $payment_id, $operations)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling financeInvoicesIdPaymentsPaymentIdPatch');
        }
        // verify the required parameter 'payment_id' is set
        if ($payment_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $payment_id when calling financeInvoicesIdPaymentsPaymentIdPatch');
        }
        // verify the required parameter 'operations' is set
        if ($operations === null) {
            throw new \InvalidArgumentException('Missing the required parameter $operations when calling financeInvoicesIdPaymentsPaymentIdPatch');
        }
        // parse inputs
        $resourcePath = "/finance/invoices/{id}/payments/{paymentId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{"."id"."}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($payment_id !== null) {
            $resourcePath = str_replace(
                "{"."paymentId"."}",
                $this->apiClient->getSerializer()->toPathValue($payment_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($operations)) {
            $_tempBody = $operations;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic '.base64_encode($this->apiClient->getConfig()->getUsername().":".$this->apiClient->getConfig()->getPassword());
        }
        if (strlen($this->apiClient->getConfig()->getClientId()) !== 0) {
            $headerParams['clientId'] = $this->apiClient->getConfig()->getClientId();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PATCH',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Spinen\ConnectWise\Clients\Finance\Model\Payment',
                '/finance/invoices/{id}/payments/{paymentId}'
            );

            return [
                $this->apiClient->getSerializer()->deserialize($response,
                    '\Spinen\ConnectWise\Clients\Finance\Model\Payment', $httpHeader), $statusCode, $httpHeader
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(),
                        '\Spinen\ConnectWise\Clients\Finance\Model\Payment', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(),
                        '\Spinen\ConnectWise\Clients\Finance\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation financeInvoicesIdPaymentsPaymentIdPut
     *
     *
     *
     * Spinen&#39;s PHP ConnectWise Client for Finance API generated by Swagger Code Generator.
     *
     * @param  int  $id  (required)
     * @param  int  $payment_id  (required)
     * @param  \Spinen\ConnectWise\Clients\Finance\Model\Payment  $payment  (required)
     * @return \Spinen\ConnectWise\Clients\Finance\Model\Payment
     * @throws \Spinen\ConnectWise\Clients\Finance\ApiException on non-2xx response
     */
    public function financeInvoicesIdPaymentsPaymentIdPut($id, $payment_id, $payment)
    {
        list($response) = $this->financeInvoicesIdPaymentsPaymentIdPutWithHttpInfo($id, $payment_id, $payment);
        return $response;
    }

    /**
     * Operation financeInvoicesIdPaymentsPaymentIdPutWithHttpInfo
     *
     *
     *
     * Spinen&#39;s PHP ConnectWise Client for Finance API generated by Swagger Code Generator.
     *
     * @param  int  $id  (required)
     * @param  int  $payment_id  (required)
     * @param  \Spinen\ConnectWise\Clients\Finance\Model\Payment  $payment  (required)
     * @return array of \Spinen\ConnectWise\Clients\Finance\Model\Payment, HTTP status code, HTTP response headers (array of strings)
     * @throws \Spinen\ConnectWise\Clients\Finance\ApiException on non-2xx response
     */
    public function financeInvoicesIdPaymentsPaymentIdPutWithHttpInfo($id, $payment_id, $payment)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling financeInvoicesIdPaymentsPaymentIdPut');
        }
        // verify the required parameter 'payment_id' is set
        if ($payment_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $payment_id when calling financeInvoicesIdPaymentsPaymentIdPut');
        }
        // verify the required parameter 'payment' is set
        if ($payment === null) {
            throw new \InvalidArgumentException('Missing the required parameter $payment when calling financeInvoicesIdPaymentsPaymentIdPut');
        }
        // parse inputs
        $resourcePath = "/finance/invoices/{id}/payments/{paymentId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{"."id"."}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($payment_id !== null) {
            $resourcePath = str_replace(
                "{"."paymentId"."}",
                $this->apiClient->getSerializer()->toPathValue($payment_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($payment)) {
            $_tempBody = $payment;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic '.base64_encode($this->apiClient->getConfig()->getUsername().":".$this->apiClient->getConfig()->getPassword());
        }
        if (strlen($this->apiClient->getConfig()->getClientId()) !== 0) {
            $headerParams['clientId'] = $this->apiClient->getConfig()->getClientId();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Spinen\ConnectWise\Clients\Finance\Model\Payment',
                '/finance/invoices/{id}/payments/{paymentId}'
            );

            return [
                $this->apiClient->getSerializer()->deserialize($response,
                    '\Spinen\ConnectWise\Clients\Finance\Model\Payment', $httpHeader), $statusCode, $httpHeader
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(),
                        '\Spinen\ConnectWise\Clients\Finance\Model\Payment', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(),
                        '\Spinen\ConnectWise\Clients\Finance\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation financeInvoicesIdPaymentsPost
     *
     *
     *
     * Spinen&#39;s PHP ConnectWise Client for Finance API generated by Swagger Code Generator.
     *
     * @param  int  $id  (required)
     * @param  \Spinen\ConnectWise\Clients\Finance\Model\Payment  $payment  (required)
     * @return \Spinen\ConnectWise\Clients\Finance\Model\Payment
     * @throws \Spinen\ConnectWise\Clients\Finance\ApiException on non-2xx response
     */
    public function financeInvoicesIdPaymentsPost($id, $payment)
    {
        list($response) = $this->financeInvoicesIdPaymentsPostWithHttpInfo($id, $payment);
        return $response;
    }

    /**
     * Operation financeInvoicesIdPaymentsPostWithHttpInfo
     *
     *
     *
     * Spinen&#39;s PHP ConnectWise Client for Finance API generated by Swagger Code Generator.
     *
     * @param  int  $id  (required)
     * @param  \Spinen\ConnectWise\Clients\Finance\Model\Payment  $payment  (required)
     * @return array of \Spinen\ConnectWise\Clients\Finance\Model\Payment, HTTP status code, HTTP response headers (array of strings)
     * @throws \Spinen\ConnectWise\Clients\Finance\ApiException on non-2xx response
     */
    public function financeInvoicesIdPaymentsPostWithHttpInfo($id, $payment)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling financeInvoicesIdPaymentsPost');
        }
        // verify the required parameter 'payment' is set
        if ($payment === null) {
            throw new \InvalidArgumentException('Missing the required parameter $payment when calling financeInvoicesIdPaymentsPost');
        }
        // parse inputs
        $resourcePath = "/finance/invoices/{id}/payments";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{"."id"."}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($payment)) {
            $_tempBody = $payment;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic '.base64_encode($this->apiClient->getConfig()->getUsername().":".$this->apiClient->getConfig()->getPassword());
        }
        if (strlen($this->apiClient->getConfig()->getClientId()) !== 0) {
            $headerParams['clientId'] = $this->apiClient->getConfig()->getClientId();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Spinen\ConnectWise\Clients\Finance\Model\Payment',
                '/finance/invoices/{id}/payments'
            );

            return [
                $this->apiClient->getSerializer()->deserialize($response,
                    '\Spinen\ConnectWise\Clients\Finance\Model\Payment', $httpHeader), $statusCode, $httpHeader
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(),
                        '\Spinen\ConnectWise\Clients\Finance\Model\Payment', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(),
                        '\Spinen\ConnectWise\Clients\Finance\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
